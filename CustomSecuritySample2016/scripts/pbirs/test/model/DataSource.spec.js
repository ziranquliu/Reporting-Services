/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerBiReportServerRestApi);
  }
}(this, function(expect, PowerBiReportServerRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DataSource', function() {
      beforeEach(function() {
        instance = new PowerBiReportServerRestApi.DataSource();
      });

      it('should create an instance of DataSource', function() {
        // TODO: update the code to test DataSource
        expect(instance).to.be.a(PowerBiReportServerRestApi.DataSource);
      });

      it('should have the property isEnabled (base name: "IsEnabled")', function() {
        // TODO: update the code to test the property isEnabled
        expect(instance).to.have.property('isEnabled');
        // expect(instance.isEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property connectionString (base name: "ConnectionString")', function() {
        // TODO: update the code to test the property connectionString
        expect(instance).to.have.property('connectionString');
        // expect(instance.connectionString).to.be(expectedValueLiteral);
      });

      it('should have the property dataModelDataSource (base name: "DataModelDataSource")', function() {
        // TODO: update the code to test the property dataModelDataSource
        expect(instance).to.have.property('dataModelDataSource');
        // expect(instance.dataModelDataSource).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceSubType (base name: "DataSourceSubType")', function() {
        // TODO: update the code to test the property dataSourceSubType
        expect(instance).to.have.property('dataSourceSubType');
        // expect(instance.dataSourceSubType).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceType (base name: "DataSourceType")', function() {
        // TODO: update the code to test the property dataSourceType
        expect(instance).to.have.property('dataSourceType');
        // expect(instance.dataSourceType).to.be(expectedValueLiteral);
      });

      it('should have the property isOriginalConnectionStringExpressionBased (base name: "IsOriginalConnectionStringExpressionBased")', function() {
        // TODO: update the code to test the property isOriginalConnectionStringExpressionBased
        expect(instance).to.have.property('isOriginalConnectionStringExpressionBased');
        // expect(instance.isOriginalConnectionStringExpressionBased).to.be(expectedValueLiteral);
      });

      it('should have the property isConnectionStringOverridden (base name: "IsConnectionStringOverridden")', function() {
        // TODO: update the code to test the property isConnectionStringOverridden
        expect(instance).to.have.property('isConnectionStringOverridden');
        // expect(instance.isConnectionStringOverridden).to.be(expectedValueLiteral);
      });

      it('should have the property credentialsByUser (base name: "CredentialsByUser")', function() {
        // TODO: update the code to test the property credentialsByUser
        expect(instance).to.have.property('credentialsByUser');
        // expect(instance.credentialsByUser).to.be(expectedValueLiteral);
      });

      it('should have the property credentialsInServer (base name: "CredentialsInServer")', function() {
        // TODO: update the code to test the property credentialsInServer
        expect(instance).to.have.property('credentialsInServer');
        // expect(instance.credentialsInServer).to.be(expectedValueLiteral);
      });

      it('should have the property isReference (base name: "IsReference")', function() {
        // TODO: update the code to test the property isReference
        expect(instance).to.have.property('isReference');
        // expect(instance.isReference).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptions (base name: "Subscriptions")', function() {
        // TODO: update the code to test the property subscriptions
        expect(instance).to.have.property('subscriptions');
        // expect(instance.subscriptions).to.be(expectedValueLiteral);
      });

    });
  });

}));
