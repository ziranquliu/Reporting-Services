/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerBiReportServerRestApi);
  }
}(this, function(expect, PowerBiReportServerRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CatalogItemType', function() {
      beforeEach(function() {
        instance = PowerBiReportServerRestApi.CatalogItemType;
      });

      it('should create an instance of CatalogItemType', function() {
        // TODO: update the code to test CatalogItemType
        expect(instance).to.be.a('object');
      });

      it('should have the property unknown', function() {
        expect(instance).to.have.property('unknown');
        expect(instance.unknown).to.be("Unknown");
      });

      it('should have the property folder', function() {
        expect(instance).to.have.property('folder');
        expect(instance.folder).to.be("Folder");
      });

      it('should have the property report', function() {
        expect(instance).to.have.property('report');
        expect(instance.report).to.be("Report");
      });

      it('should have the property dataSource', function() {
        expect(instance).to.have.property('dataSource');
        expect(instance.dataSource).to.be("DataSource");
      });

      it('should have the property dataSet', function() {
        expect(instance).to.have.property('dataSet');
        expect(instance.dataSet).to.be("DataSet");
      });

      it('should have the property component', function() {
        expect(instance).to.have.property('component');
        expect(instance.component).to.be("Component");
      });

      it('should have the property resource', function() {
        expect(instance).to.have.property('resource');
        expect(instance.resource).to.be("Resource");
      });

      it('should have the property kpi', function() {
        expect(instance).to.have.property('kpi');
        expect(instance.kpi).to.be("Kpi");
      });

      it('should have the property mobileReport', function() {
        expect(instance).to.have.property('mobileReport');
        expect(instance.mobileReport).to.be("MobileReport");
      });

      it('should have the property linkedReport', function() {
        expect(instance).to.have.property('linkedReport');
        expect(instance.linkedReport).to.be("LinkedReport");
      });

      it('should have the property reportModel', function() {
        expect(instance).to.have.property('reportModel');
        expect(instance.reportModel).to.be("ReportModel");
      });

      it('should have the property powerBIReport', function() {
        expect(instance).to.have.property('powerBIReport');
        expect(instance.powerBIReport).to.be("PowerBIReport");
      });

      it('should have the property excelWorkbook', function() {
        expect(instance).to.have.property('excelWorkbook');
        expect(instance.excelWorkbook).to.be("ExcelWorkbook");
      });

    });
  });

}));
