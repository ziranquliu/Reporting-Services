/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerBiReportServerRestApi);
  }
}(this, function(expect, PowerBiReportServerRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DataModelDataSourceKind', function() {
      beforeEach(function() {
        instance = PowerBiReportServerRestApi.DataModelDataSourceKind;
      });

      it('should create an instance of DataModelDataSourceKind', function() {
        // TODO: update the code to test DataModelDataSourceKind
        expect(instance).to.be.a('object');
      });

      it('should have the property unknownFunction', function() {
        expect(instance).to.have.property('unknownFunction');
        expect(instance.unknownFunction).to.be("UnknownFunction");
      });

      it('should have the property analysisServices', function() {
        expect(instance).to.have.property('analysisServices');
        expect(instance.analysisServices).to.be("AnalysisServices");
      });

      it('should have the property SQL', function() {
        expect(instance).to.have.property('SQL');
        expect(instance.SQL).to.be("SQL");
      });

      it('should have the property file', function() {
        expect(instance).to.have.property('file');
        expect(instance.file).to.be("File");
      });

      it('should have the property azureBlobs', function() {
        expect(instance).to.have.property('azureBlobs');
        expect(instance.azureBlobs).to.be("AzureBlobs");
      });

      it('should have the property oracle', function() {
        expect(instance).to.have.property('oracle');
        expect(instance.oracle).to.be("Oracle");
      });

      it('should have the property folder', function() {
        expect(instance).to.have.property('folder');
        expect(instance.folder).to.be("Folder");
      });

      it('should have the property mySql', function() {
        expect(instance).to.have.property('mySql');
        expect(instance.mySql).to.be("MySql");
      });

      it('should have the property teradata', function() {
        expect(instance).to.have.property('teradata');
        expect(instance.teradata).to.be("Teradata");
      });

      it('should have the property web', function() {
        expect(instance).to.have.property('web');
        expect(instance.web).to.be("Web");
      });

      it('should have the property oData', function() {
        expect(instance).to.have.property('oData');
        expect(instance.oData).to.be("OData");
      });

      it('should have the property hDInsight', function() {
        expect(instance).to.have.property('hDInsight');
        expect(instance.hDInsight).to.be("HDInsight");
      });

      it('should have the property azureTables', function() {
        expect(instance).to.have.property('azureTables');
        expect(instance.azureTables).to.be("AzureTables");
      });

      it('should have the property sharePoint', function() {
        expect(instance).to.have.property('sharePoint');
        expect(instance.sharePoint).to.be("SharePoint");
      });

      it('should have the property dataMarket', function() {
        expect(instance).to.have.property('dataMarket');
        expect(instance.dataMarket).to.be("DataMarket");
      });

      it('should have the property postgreSQL', function() {
        expect(instance).to.have.property('postgreSQL');
        expect(instance.postgreSQL).to.be("PostgreSQL");
      });

      it('should have the property sybase', function() {
        expect(instance).to.have.property('sybase');
        expect(instance.sybase).to.be("Sybase");
      });

      it('should have the property dB2', function() {
        expect(instance).to.have.property('dB2');
        expect(instance.dB2).to.be("DB2");
      });

      it('should have the property informix', function() {
        expect(instance).to.have.property('informix');
        expect(instance.informix).to.be("Informix");
      });

      it('should have the property MQ', function() {
        expect(instance).to.have.property('MQ');
        expect(instance.MQ).to.be("MQ");
      });

      it('should have the property activeDirectory', function() {
        expect(instance).to.have.property('activeDirectory');
        expect(instance.activeDirectory).to.be("ActiveDirectory");
      });

      it('should have the property currentWorkbook', function() {
        expect(instance).to.have.property('currentWorkbook');
        expect(instance.currentWorkbook).to.be("CurrentWorkbook");
      });

      it('should have the property exchange', function() {
        expect(instance).to.have.property('exchange');
        expect(instance.exchange).to.be("Exchange");
      });

      it('should have the property facebook', function() {
        expect(instance).to.have.property('facebook');
        expect(instance.facebook).to.be("Facebook");
      });

      it('should have the property hdfs', function() {
        expect(instance).to.have.property('hdfs');
        expect(instance.hdfs).to.be("Hdfs");
      });

      it('should have the property sapBusinessObjects', function() {
        expect(instance).to.have.property('sapBusinessObjects');
        expect(instance.sapBusinessObjects).to.be("SapBusinessObjects");
      });

      it('should have the property salesforce', function() {
        expect(instance).to.have.property('salesforce');
        expect(instance.salesforce).to.be("Salesforce");
      });

      it('should have the property odbc', function() {
        expect(instance).to.have.property('odbc');
        expect(instance.odbc).to.be("Odbc");
      });

      it('should have the property googleAnalytics', function() {
        expect(instance).to.have.property('googleAnalytics');
        expect(instance.googleAnalytics).to.be("GoogleAnalytics");
      });

      it('should have the property sapBusinessWarehouse', function() {
        expect(instance).to.have.property('sapBusinessWarehouse');
        expect(instance.sapBusinessWarehouse).to.be("SapBusinessWarehouse");
      });

    });
  });

}));
