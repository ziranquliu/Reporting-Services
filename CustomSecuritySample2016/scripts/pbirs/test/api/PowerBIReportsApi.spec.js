/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerBiReportServerRestApi);
  }
}(this, function(expect, PowerBiReportServerRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowerBiReportServerRestApi.PowerBIReportsApi();
  });

  describe('(package)', function() {
    describe('PowerBIReportsApi', function() {
      describe('addPowerBIReport', function() {
        it('should call addPowerBIReport successfully', function(done) {
          // TODO: uncomment, update parameter values for addPowerBIReport call and complete the assertions
          /*
          var powerBIReport = new PowerBiReportServerRestApi.PowerBIReport();
          powerBIReport.id = "01234567-89ab-cdef-0123-456789abcdef";
          powerBIReport.name = "";
          powerBIReport.description = "";
          powerBIReport.path = "";
          powerBIReport.type = new PowerBiReportServerRestApi.CatalogItemType();
          powerBIReport.hidden = false;
          powerBIReport.size = "0";
          powerBIReport.modifiedBy = "";
          powerBIReport.modifiedDate = 2017-04-13T15:51:04Z;
          powerBIReport.createdBy = "";
          powerBIReport.createdDate = 2017-04-13T15:51:04Z;
          powerBIReport.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          powerBIReport.contentType = "";
          powerBIReport.content = "";
          powerBIReport.isFavorite = false;
          powerBIReport.hasDataSources = false;

          instance.addPowerBIReport(powerBIReport, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.PowerBIReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasDataSources).to.be.a('boolean');
            expect(data.hasDataSources).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addPowerBIReportComment', function() {
        it('should call addPowerBIReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for addPowerBIReportComment call
          /*
          var id = "id_example";
          var comment = new PowerBiReportServerRestApi.Comment();
          comment.id = """00000000-0000-0000-0000-000000000000";
          comment.itemId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.userName = "";
          comment.threadId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.attachmentPath = "";
          comment.text = "";
          comment.createdDate = 2017-04-13T15:51:04Z;
          comment.modifiedDate = 2017-04-13T15:51:04Z;

          instance.addPowerBIReportComment(id, comment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkPowerBIReportDataSourceConnection', function() {
        it('should call checkPowerBIReportDataSourceConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for checkPowerBIReportDataSourceConnection call and complete the assertions
          /*
          var id = "id_example";
          var dataSourceName = "dataSourceName_example";

          instance.checkPowerBIReportDataSourceConnection(id, dataSourceName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.DataSourceCheckResult);
            expect(data.isSuccessful).to.be.a('boolean');
            expect(data.isSuccessful).to.be(false);
            expect(data.errorMessage).to.be.a('string');
            expect(data.errorMessage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePowerBIReport', function() {
        it('should call deletePowerBIReport successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePowerBIReport call
          /*
          var id = "id_example";

          instance.deletePowerBIReport(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePowerBIReportComment', function() {
        it('should call deletePowerBIReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePowerBIReportComment call
          /*
          var id = "id_example";
          var commentId = "commentId_example";

          instance.deletePowerBIReportComment(id, commentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBICacheRefreshPlans', function() {
        it('should call getPowerBICacheRefreshPlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBICacheRefreshPlans call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBICacheRefreshPlans(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataCacheRefreshPlans);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.CacheRefreshPlan);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.catalogItemPath).to.be.a('string');
                expect(data.catalogItemPath).to.be("");
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("");
                expect(data.schedule).to.be.a(PowerBiReportServerRestApi.ScheduleReference);
                      expect(data.schedule.scheduleId).to.be.a('string');
                  expect(data.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.schedule.definition).to.be.a(PowerBiReportServerRestApi.ScheduleDefinition);
                        expect(data.schedule.definition.startDateTime).to.be.a(Date);
                    expect(data.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                    expect(data.schedule.definition.endDate).to.be.a(Date);
                    expect(data.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                    expect(data.schedule.definition.endDateSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.endDateSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence).to.be.a(PowerBiReportServerRestApi.ScheduleRecurrence);
                          expect(data.schedule.definition.recurrence.minuteRecurrence).to.be.a(PowerBiReportServerRestApi.MinuteRecurrence);
                            expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                      expect(data.schedule.definition.recurrence.dailyRecurrence).to.be.a(PowerBiReportServerRestApi.DailyRecurrence);
                            expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence).to.be.a(PowerBiReportServerRestApi.WeeklyRecurrence);
                            expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                              expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyRecurrence);
                            expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                              expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyDOWRecurrence);
                            expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(PowerBiReportServerRestApi.WeekNumberEnum);
                            expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                              expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                              expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);
                expect(data.lastRunTime).to.be.a(Date);
                expect(data.lastRunTime).to.be(2017-04-13T15:51:04Z);
                expect(data.lastStatus).to.be.a('string');
                expect(data.lastStatus).to.be("");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                {
                  let dataCtr = data.parameterValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.isValueFieldReference).to.be.a('boolean');
                    expect(data.isValueFieldReference).to.be(false);
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReport', function() {
        it('should call getPowerBIReport successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReport call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBIReport(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.PowerBIReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasDataSources).to.be.a('boolean');
            expect(data.hasDataSources).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReportAllowedActions', function() {
        it('should call getPowerBIReportAllowedActions successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReportAllowedActions call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBIReportAllowedActions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataAllowedActions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.AllowedAction);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReportComments', function() {
        it('should call getPowerBIReportComments successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReportComments call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBIReportComments(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataComments);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.Comment);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.itemId).to.be.a('string');
                expect(data.itemId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.threadId).to.be.a('string');
                expect(data.threadId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.attachmentPath).to.be.a('string');
                expect(data.attachmentPath).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReportContent', function() {
        it('should call getPowerBIReportContent successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReportContent call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBIReportContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReportDataModelRoleAssignments', function() {
        it('should call getPowerBIReportDataModelRoleAssignments successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReportDataModelRoleAssignments call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBIReportDataModelRoleAssignments(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataDataModelRoleAssignments);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.DataModelRoleAssignment);
                expect(data.groupUserName).to.be.a('string');
                expect(data.groupUserName).to.be("");
                {
                  let dataCtr = data.dataModelRoles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("""00000000-0000-0000-0000-000000000000");
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReportDataModelRoles', function() {
        it('should call getPowerBIReportDataModelRoles successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReportDataModelRoles call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBIReportDataModelRoles(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataDataModelRoles);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.DataModelRole);
                expect(data.modelRoleId).to.be.a('string');
                expect(data.modelRoleId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.modelRoleName).to.be.a('string');
                expect(data.modelRoleName).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReportDataSources', function() {
        it('should call getPowerBIReportDataSources successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReportDataSources call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBIReportDataSources(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataDataSources);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.DataSource);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
                expect(data.isEnabled).to.be.a('boolean');
                expect(data.isEnabled).to.be(false);
                expect(data.connectionString).to.be.a('string');
                expect(data.connectionString).to.be("");
                expect(data.dataModelDataSource).to.be.a(PowerBiReportServerRestApi.DataModelDataSource);
                      expect(data.dataModelDataSource.authType).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceAuthType);
                      {
                    let dataCtr = data.dataModelDataSource.supportedAuthTypes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceAuthType);
                    }
                  }
                  expect(data.dataModelDataSource.kind).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceKind);
                      expect(data.dataModelDataSource.modelConnectionName).to.be.a('string');
                  expect(data.dataModelDataSource.modelConnectionName).to.be("");
                  expect(data.dataModelDataSource.secret).to.be.a('string');
                  expect(data.dataModelDataSource.secret).to.be("");
                  expect(data.dataModelDataSource.type).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceType);
                      expect(data.dataModelDataSource.username).to.be.a('string');
                  expect(data.dataModelDataSource.username).to.be("");
                expect(data.dataSourceSubType).to.be.a('string');
                expect(data.dataSourceSubType).to.be("");
                expect(data.dataSourceType).to.be.a('string');
                expect(data.dataSourceType).to.be("");
                expect(data.isOriginalConnectionStringExpressionBased).to.be.a('boolean');
                expect(data.isOriginalConnectionStringExpressionBased).to.be(false);
                expect(data.isConnectionStringOverridden).to.be.a('boolean');
                expect(data.isConnectionStringOverridden).to.be(false);
                expect(data.credentialsByUser).to.be.a(PowerBiReportServerRestApi.CredentialsSuppliedByUser);
                      expect(data.credentialsByUser.displayText).to.be.a('string');
                  expect(data.credentialsByUser.displayText).to.be("");
                  expect(data.credentialsByUser.useAsWindowsCredentials).to.be.a('boolean');
                  expect(data.credentialsByUser.useAsWindowsCredentials).to.be(false);
                expect(data.credentialsInServer).to.be.a(PowerBiReportServerRestApi.CredentialsStoredInServer);
                      expect(data.credentialsInServer.userName).to.be.a('string');
                  expect(data.credentialsInServer.userName).to.be("");
                  expect(data.credentialsInServer.password).to.be.a('string');
                  expect(data.credentialsInServer.password).to.be("");
                  expect(data.credentialsInServer.useAsWindowsCredentials).to.be.a('boolean');
                  expect(data.credentialsInServer.useAsWindowsCredentials).to.be(false);
                  expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be.a('boolean');
                  expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be(false);
                expect(data.isReference).to.be.a('boolean');
                expect(data.isReference).to.be(false);
                expect(data.subscriptions).to.be.a(PowerBiReportServerRestApi.Subscription);
                      expect(data.subscriptions.id).to.be.a('string');
                  expect(data.subscriptions.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                  expect(data.subscriptions.owner).to.be.a('string');
                  expect(data.subscriptions.owner).to.be("");
                  expect(data.subscriptions.isDataDriven).to.be.a('boolean');
                  expect(data.subscriptions.isDataDriven).to.be(false);
                  expect(data.subscriptions.description).to.be.a('string');
                  expect(data.subscriptions.description).to.be("");
                  expect(data.subscriptions.report).to.be.a('string');
                  expect(data.subscriptions.report).to.be("");
                  expect(data.subscriptions.isActive).to.be.a('boolean');
                  expect(data.subscriptions.isActive).to.be(false);
                  expect(data.subscriptions.eventType).to.be.a('string');
                  expect(data.subscriptions.eventType).to.be("");
                  expect(data.subscriptions.scheduleDescription).to.be.a('string');
                  expect(data.subscriptions.scheduleDescription).to.be("");
                  expect(data.subscriptions.lastRunTime).to.be.a(Date);
                  expect(data.subscriptions.lastRunTime).to.be(2017-04-13T15:51:04Z);
                  expect(data.subscriptions.lastStatus).to.be.a('string');
                  expect(data.subscriptions.lastStatus).to.be("");
                  expect(data.subscriptions.extensionSettings).to.be.a(PowerBiReportServerRestApi.ExtensionSettings);
                        expect(data.subscriptions.extensionSettings.extension).to.be.a('string');
                    expect(data.subscriptions.extensionSettings.extension).to.be("");
                    expect(data.subscriptions.extensionSettings.parameterValues).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                          expect(data.subscriptions.extensionSettings.parameterValues.name).to.be.a('string');
                      expect(data.subscriptions.extensionSettings.parameterValues.name).to.be("");
                      expect(data.subscriptions.extensionSettings.parameterValues.value).to.be.a('string');
                      expect(data.subscriptions.extensionSettings.parameterValues.value).to.be("");
                      expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be.a('boolean');
                      expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be(false);
                  expect(data.subscriptions.deliveryExtension).to.be.a('string');
                  expect(data.subscriptions.deliveryExtension).to.be("");
                  expect(data.subscriptions.localizedDeliveryExtensionName).to.be.a('string');
                  expect(data.subscriptions.localizedDeliveryExtensionName).to.be("");
                  expect(data.subscriptions.modifiedBy).to.be.a('string');
                  expect(data.subscriptions.modifiedBy).to.be("");
                  expect(data.subscriptions.modifiedDate).to.be.a(Date);
                  expect(data.subscriptions.modifiedDate).to.be(2017-04-13T15:51:04Z);
                  {
                    let dataCtr = data.subscriptions.parameterValues;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                      expect(data.isValueFieldReference).to.be.a('boolean');
                      expect(data.isValueFieldReference).to.be(false);
                    }
                  }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReportPolicies', function() {
        it('should call getPowerBIReportPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReportPolicies call and complete the assertions
          /*
          var id = "id_example";

          instance.getPowerBIReportPolicies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PowerBiReportServerRestApi.ItemPolicy);
              expect(data.inheritParentPolicy).to.be.a('boolean');
              expect(data.inheritParentPolicy).to.be(false);
              {
                let dataCtr = data.policies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PowerBiReportServerRestApi.Policy);
                  expect(data.groupUserName).to.be.a('string');
                  expect(data.groupUserName).to.be("");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PowerBiReportServerRestApi.Role);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReportProperties', function() {
        it('should call getPowerBIReportProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReportProperties call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.properties = ["properties_example"];

          instance.getPowerBIReportProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataProperties);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.Property);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPowerBIReports', function() {
        it('should call getPowerBIReports successfully', function(done) {
          // TODO: uncomment, update parameter values for getPowerBIReports call and complete the assertions
          /*
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";
          opts.orderBy = "orderBy_example";
          opts.select = "select_example";

          instance.getPowerBIReports(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataPowerBIReports);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.PowerBIReport);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
                expect(data.hasDataSources).to.be.a('boolean');
                expect(data.hasDataSources).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('replacePowerBIReportDataModelRoleAssignments', function() {
        it('should call replacePowerBIReportDataModelRoleAssignments successfully', function(done) {
          // TODO: uncomment, update parameter values for replacePowerBIReportDataModelRoleAssignments call
          /*
          var id = "id_example";
          var dataModelRoleAssignments = [new PowerBiReportServerRestApi.DataModelRoleAssignment()];
          dataModelRoleAssignments[0].groupUserName = "";
          dataModelRoleAssignments[0].dataModelRoles = ["""00000000-0000-0000-0000-000000000000"];

          instance.replacePowerBIReportDataModelRoleAssignments(id, dataModelRoleAssignments, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setPowerBIReportPolicies', function() {
        it('should call setPowerBIReportPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for setPowerBIReportPolicies call
          /*
          var id = "id_example";
          var itemPolicies = [new PowerBiReportServerRestApi.ItemPolicy()];
          itemPolicies[0].inheritParentPolicy = false;
          itemPolicies[0].policies = [new PowerBiReportServerRestApi.Policy()];
          itemPolicies[0].policies[0].groupUserName = "";
          itemPolicies[0].policies[0].roles = [new PowerBiReportServerRestApi.Role()];
          itemPolicies[0].policies[0].roles[0].name = "";
          itemPolicies[0].policies[0].roles[0].description = "";

          instance.setPowerBIReportPolicies(id, itemPolicies, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePowerBIReport', function() {
        it('should call updatePowerBIReport successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePowerBIReport call and complete the assertions
          /*
          var id = "id_example";
          var powerBIReport = new PowerBiReportServerRestApi.PowerBIReport();
          powerBIReport.id = "01234567-89ab-cdef-0123-456789abcdef";
          powerBIReport.name = "";
          powerBIReport.description = "";
          powerBIReport.path = "";
          powerBIReport.type = new PowerBiReportServerRestApi.CatalogItemType();
          powerBIReport.hidden = false;
          powerBIReport.size = "0";
          powerBIReport.modifiedBy = "";
          powerBIReport.modifiedDate = 2017-04-13T15:51:04Z;
          powerBIReport.createdBy = "";
          powerBIReport.createdDate = 2017-04-13T15:51:04Z;
          powerBIReport.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          powerBIReport.contentType = "";
          powerBIReport.content = "";
          powerBIReport.isFavorite = false;
          powerBIReport.hasDataSources = false;

          instance.updatePowerBIReport(id, powerBIReport, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.PowerBIReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasDataSources).to.be.a('boolean');
            expect(data.hasDataSources).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePowerBIReportComment', function() {
        it('should call updatePowerBIReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePowerBIReportComment call
          /*
          var id = "id_example";
          var commentId = "commentId_example";
          var comment = new PowerBiReportServerRestApi.Comment();
          comment.id = """00000000-0000-0000-0000-000000000000";
          comment.itemId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.userName = "";
          comment.threadId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.attachmentPath = "";
          comment.text = "";
          comment.createdDate = 2017-04-13T15:51:04Z;
          comment.modifiedDate = 2017-04-13T15:51:04Z;

          instance.updatePowerBIReportComment(id, commentId, comment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePowerBIReportDataSource', function() {
        it('should call updatePowerBIReportDataSource successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePowerBIReportDataSource call
          /*
          var id = "id_example";
          var dataSources = [new PowerBiReportServerRestApi.DataSource()];
          dataSources[0].id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSources[0].name = "";
          dataSources[0].description = "";
          dataSources[0].path = "";
          dataSources[0].type = new PowerBiReportServerRestApi.CatalogItemType();
          dataSources[0].hidden = false;
          dataSources[0].size = "0";
          dataSources[0].modifiedBy = "";
          dataSources[0].modifiedDate = 2017-04-13T15:51:04Z;
          dataSources[0].createdBy = "";
          dataSources[0].createdDate = 2017-04-13T15:51:04Z;
          dataSources[0].parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSources[0].contentType = "";
          dataSources[0].content = "";
          dataSources[0].isFavorite = false;
          dataSources[0].isEnabled = false;
          dataSources[0].connectionString = "";
          dataSources[0].dataModelDataSource = new PowerBiReportServerRestApi.DataModelDataSource();
          dataSources[0].dataModelDataSource.authType = new PowerBiReportServerRestApi.DataModelDataSourceAuthType();
          dataSources[0].dataModelDataSource.supportedAuthTypes = [new PowerBiReportServerRestApi.DataModelDataSourceAuthType()];
          dataSources[0].dataModelDataSource.kind = new PowerBiReportServerRestApi.DataModelDataSourceKind();
          dataSources[0].dataModelDataSource.modelConnectionName = "";
          dataSources[0].dataModelDataSource.secret = "";
          dataSources[0].dataModelDataSource.type = new PowerBiReportServerRestApi.DataModelDataSourceType();
          dataSources[0].dataModelDataSource.username = "";
          dataSources[0].dataSourceSubType = "";
          dataSources[0].dataSourceType = "";
          dataSources[0].isOriginalConnectionStringExpressionBased = false;
          dataSources[0].isConnectionStringOverridden = false;
          dataSources[0].credentialsByUser = new PowerBiReportServerRestApi.CredentialsSuppliedByUser();
          dataSources[0].credentialsByUser.displayText = "";
          dataSources[0].credentialsByUser.useAsWindowsCredentials = false;
          dataSources[0].credentialsInServer = new PowerBiReportServerRestApi.CredentialsStoredInServer();
          dataSources[0].credentialsInServer.userName = "";
          dataSources[0].credentialsInServer.password = "";
          dataSources[0].credentialsInServer.useAsWindowsCredentials = false;
          dataSources[0].credentialsInServer.impersonateAuthenticatedUser = false;
          dataSources[0].isReference = false;
          dataSources[0].subscriptions = new PowerBiReportServerRestApi.Subscription();
          dataSources[0].subscriptions.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSources[0].subscriptions.owner = "";
          dataSources[0].subscriptions.isDataDriven = false;
          dataSources[0].subscriptions.description = "";
          dataSources[0].subscriptions.report = "";
          dataSources[0].subscriptions.isActive = false;
          dataSources[0].subscriptions.eventType = "";
          dataSources[0].subscriptions.scheduleDescription = "";
          dataSources[0].subscriptions.lastRunTime = 2017-04-13T15:51:04Z;
          dataSources[0].subscriptions.lastStatus = "";
          dataSources[0].subscriptions.extensionSettings = new PowerBiReportServerRestApi.ExtensionSettings();
          dataSources[0].subscriptions.extensionSettings.extension = "";
          dataSources[0].subscriptions.extensionSettings.parameterValues = new PowerBiReportServerRestApi.ParameterValue();
          dataSources[0].subscriptions.extensionSettings.parameterValues.name = "";
          dataSources[0].subscriptions.extensionSettings.parameterValues.value = "";
          dataSources[0].subscriptions.extensionSettings.parameterValues.isValueFieldReference = false;
          dataSources[0].subscriptions.deliveryExtension = "";
          dataSources[0].subscriptions.localizedDeliveryExtensionName = "";
          dataSources[0].subscriptions.modifiedBy = "";
          dataSources[0].subscriptions.modifiedDate = 2017-04-13T15:51:04Z;
          dataSources[0].subscriptions.parameterValues = [new PowerBiReportServerRestApi.ParameterValue()];
          dataSources[0].subscriptions.parameterValues[0].name = "";
          dataSources[0].subscriptions.parameterValues[0].value = "";
          dataSources[0].subscriptions.parameterValues[0].isValueFieldReference = false;

          instance.updatePowerBIReportDataSource(id, dataSources, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePowerBIReportProperties', function() {
        it('should call updatePowerBIReportProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePowerBIReportProperties call
          /*
          var id = "id_example";
          var properties = [new PowerBiReportServerRestApi.Property()];
          properties[0].name = "";
          properties[0].value = "";

          instance.updatePowerBIReportProperties(id, properties, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadPowerBIReport', function() {
        it('should call uploadPowerBIReport successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadPowerBIReport call and complete the assertions
          /*
          var id = "id_example";
          var file = "/path/to/file.txt";

          instance.uploadPowerBIReport(id, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.PowerBIReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasDataSources).to.be.a('boolean');
            expect(data.hasDataSources).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
