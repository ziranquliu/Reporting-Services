/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerBiReportServerRestApi);
  }
}(this, function(expect, PowerBiReportServerRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowerBiReportServerRestApi.CacheRefreshPlansApi();
  });

  describe('(package)', function() {
    describe('CacheRefreshPlansApi', function() {
      describe('addCacheRefreshPlan', function() {
        it('should call addCacheRefreshPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for addCacheRefreshPlan call and complete the assertions
          /*
          var cacheRefreshPlan = new PowerBiReportServerRestApi.CacheRefreshPlan();
          cacheRefreshPlan.id = "01234567-89ab-cdef-0123-456789abcdef";
          cacheRefreshPlan.owner = "";
          cacheRefreshPlan.description = "";
          cacheRefreshPlan.catalogItemPath = "";
          cacheRefreshPlan.eventType = "";
          cacheRefreshPlan.schedule = new PowerBiReportServerRestApi.ScheduleReference();
          cacheRefreshPlan.schedule.scheduleId = """00000000-0000-0000-0000-000000000000";
          cacheRefreshPlan.schedule.definition = new PowerBiReportServerRestApi.ScheduleDefinition();
          cacheRefreshPlan.schedule.definition.startDateTime = 2017-04-13T15:51:04Z;
          cacheRefreshPlan.schedule.definition.endDate = 2017-04-13T15:51:04Z;
          cacheRefreshPlan.schedule.definition.endDateSpecified = false;
          cacheRefreshPlan.schedule.definition.recurrence = new PowerBiReportServerRestApi.ScheduleRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.minuteRecurrence = new PowerBiReportServerRestApi.MinuteRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.minuteRecurrence.minutesInterval = 0;
          cacheRefreshPlan.schedule.definition.recurrence.dailyRecurrence = new PowerBiReportServerRestApi.DailyRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.dailyRecurrence.daysInterval = 0;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence = new PowerBiReportServerRestApi.WeeklyRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.weeksInterval = 0;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek = new PowerBiReportServerRestApi.DaysOfWeekSelector();
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence = new PowerBiReportServerRestApi.MonthlyRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.days = "";
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear = new PowerBiReportServerRestApi.MonthsOfYearSelector();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence = new PowerBiReportServerRestApi.MonthlyDOWRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek = new PowerBiReportServerRestApi.WeekNumberEnum();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek = new PowerBiReportServerRestApi.DaysOfWeekSelector();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear = new PowerBiReportServerRestApi.MonthsOfYearSelector();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december = false;
          cacheRefreshPlan.lastRunTime = 2017-04-13T15:51:04Z;
          cacheRefreshPlan.lastStatus = "";
          cacheRefreshPlan.modifiedBy = "";
          cacheRefreshPlan.modifiedDate = 2017-04-13T15:51:04Z;
          cacheRefreshPlan.parameterValues = [new PowerBiReportServerRestApi.ParameterValue()];
          cacheRefreshPlan.parameterValues[0].name = "";
          cacheRefreshPlan.parameterValues[0].value = "";
          cacheRefreshPlan.parameterValues[0].isValueFieldReference = false;

          instance.addCacheRefreshPlan(cacheRefreshPlan, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.CacheRefreshPlan);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.catalogItemPath).to.be.a('string');
            expect(data.catalogItemPath).to.be("");
            expect(data.eventType).to.be.a('string');
            expect(data.eventType).to.be("");
            expect(data.schedule).to.be.a(PowerBiReportServerRestApi.ScheduleReference);
                  expect(data.schedule.scheduleId).to.be.a('string');
              expect(data.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.schedule.definition).to.be.a(PowerBiReportServerRestApi.ScheduleDefinition);
                    expect(data.schedule.definition.startDateTime).to.be.a(Date);
                expect(data.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                expect(data.schedule.definition.endDate).to.be.a(Date);
                expect(data.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                expect(data.schedule.definition.endDateSpecified).to.be.a('boolean');
                expect(data.schedule.definition.endDateSpecified).to.be(false);
                expect(data.schedule.definition.recurrence).to.be.a(PowerBiReportServerRestApi.ScheduleRecurrence);
                      expect(data.schedule.definition.recurrence.minuteRecurrence).to.be.a(PowerBiReportServerRestApi.MinuteRecurrence);
                        expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                  expect(data.schedule.definition.recurrence.dailyRecurrence).to.be.a(PowerBiReportServerRestApi.DailyRecurrence);
                        expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                  expect(data.schedule.definition.recurrence.weeklyRecurrence).to.be.a(PowerBiReportServerRestApi.WeeklyRecurrence);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                  expect(data.schedule.definition.recurrence.monthlyRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyRecurrence);
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                    expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                    expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                  expect(data.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyDOWRecurrence);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(PowerBiReportServerRestApi.WeekNumberEnum);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);
            expect(data.lastRunTime).to.be.a(Date);
            expect(data.lastRunTime).to.be(2017-04-13T15:51:04Z);
            expect(data.lastStatus).to.be.a('string');
            expect(data.lastStatus).to.be("");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            {
              let dataCtr = data.parameterValues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.isValueFieldReference).to.be.a('boolean');
                expect(data.isValueFieldReference).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteCacheRefreshPlan', function() {
        it('should call deleteCacheRefreshPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCacheRefreshPlan call
          /*
          var id = "id_example";

          instance.deleteCacheRefreshPlan(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executeCacheRefreshPlan', function() {
        it('should call executeCacheRefreshPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for executeCacheRefreshPlan call
          /*
          var id = "id_example";

          instance.executeCacheRefreshPlan(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCacheRefreshPlan', function() {
        it('should call getCacheRefreshPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for getCacheRefreshPlan call and complete the assertions
          /*
          var id = "id_example";

          instance.getCacheRefreshPlan(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.CacheRefreshPlan);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.catalogItemPath).to.be.a('string');
            expect(data.catalogItemPath).to.be("");
            expect(data.eventType).to.be.a('string');
            expect(data.eventType).to.be("");
            expect(data.schedule).to.be.a(PowerBiReportServerRestApi.ScheduleReference);
                  expect(data.schedule.scheduleId).to.be.a('string');
              expect(data.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.schedule.definition).to.be.a(PowerBiReportServerRestApi.ScheduleDefinition);
                    expect(data.schedule.definition.startDateTime).to.be.a(Date);
                expect(data.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                expect(data.schedule.definition.endDate).to.be.a(Date);
                expect(data.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                expect(data.schedule.definition.endDateSpecified).to.be.a('boolean');
                expect(data.schedule.definition.endDateSpecified).to.be(false);
                expect(data.schedule.definition.recurrence).to.be.a(PowerBiReportServerRestApi.ScheduleRecurrence);
                      expect(data.schedule.definition.recurrence.minuteRecurrence).to.be.a(PowerBiReportServerRestApi.MinuteRecurrence);
                        expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                  expect(data.schedule.definition.recurrence.dailyRecurrence).to.be.a(PowerBiReportServerRestApi.DailyRecurrence);
                        expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                  expect(data.schedule.definition.recurrence.weeklyRecurrence).to.be.a(PowerBiReportServerRestApi.WeeklyRecurrence);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                  expect(data.schedule.definition.recurrence.monthlyRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyRecurrence);
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                    expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                    expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                  expect(data.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyDOWRecurrence);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(PowerBiReportServerRestApi.WeekNumberEnum);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);
            expect(data.lastRunTime).to.be.a(Date);
            expect(data.lastRunTime).to.be(2017-04-13T15:51:04Z);
            expect(data.lastStatus).to.be.a('string');
            expect(data.lastStatus).to.be("");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            {
              let dataCtr = data.parameterValues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.isValueFieldReference).to.be.a('boolean');
                expect(data.isValueFieldReference).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCacheRefreshPlanHistory', function() {
        it('should call getCacheRefreshPlanHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCacheRefreshPlanHistory call and complete the assertions
          /*
          var id = "id_example";

          instance.getCacheRefreshPlanHistory(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataSubscriptionHistory);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.SubscriptionHistory);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.subscriptionID).to.be.a('string');
                expect(data.subscriptionID).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("Scheduled");
                expect(data.startTime).to.be.a(Date);
                expect(data.startTime).to.be(2017-04-13T15:51:04Z);
                expect(data.endTime).to.be.a(Date);
                expect(data.endTime).to.be(2017-04-13T15:51:04Z);
                expect(data.subscriptionStatus).to.be.a('string');
                expect(data.subscriptionStatus).to.be("Completed");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.details).to.be.a('string');
                expect(data.details).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setCacheRefreshPlan', function() {
        it('should call setCacheRefreshPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for setCacheRefreshPlan call and complete the assertions
          /*
          var id = "id_example";
          var cacheRefreshPlan = new PowerBiReportServerRestApi.CacheRefreshPlan();
          cacheRefreshPlan.id = "01234567-89ab-cdef-0123-456789abcdef";
          cacheRefreshPlan.owner = "";
          cacheRefreshPlan.description = "";
          cacheRefreshPlan.catalogItemPath = "";
          cacheRefreshPlan.eventType = "";
          cacheRefreshPlan.schedule = new PowerBiReportServerRestApi.ScheduleReference();
          cacheRefreshPlan.schedule.scheduleId = """00000000-0000-0000-0000-000000000000";
          cacheRefreshPlan.schedule.definition = new PowerBiReportServerRestApi.ScheduleDefinition();
          cacheRefreshPlan.schedule.definition.startDateTime = 2017-04-13T15:51:04Z;
          cacheRefreshPlan.schedule.definition.endDate = 2017-04-13T15:51:04Z;
          cacheRefreshPlan.schedule.definition.endDateSpecified = false;
          cacheRefreshPlan.schedule.definition.recurrence = new PowerBiReportServerRestApi.ScheduleRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.minuteRecurrence = new PowerBiReportServerRestApi.MinuteRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.minuteRecurrence.minutesInterval = 0;
          cacheRefreshPlan.schedule.definition.recurrence.dailyRecurrence = new PowerBiReportServerRestApi.DailyRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.dailyRecurrence.daysInterval = 0;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence = new PowerBiReportServerRestApi.WeeklyRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.weeksInterval = 0;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek = new PowerBiReportServerRestApi.DaysOfWeekSelector();
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday = false;
          cacheRefreshPlan.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence = new PowerBiReportServerRestApi.MonthlyRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.days = "";
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear = new PowerBiReportServerRestApi.MonthsOfYearSelector();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence = new PowerBiReportServerRestApi.MonthlyDOWRecurrence();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek = new PowerBiReportServerRestApi.WeekNumberEnum();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek = new PowerBiReportServerRestApi.DaysOfWeekSelector();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear = new PowerBiReportServerRestApi.MonthsOfYearSelector();
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november = false;
          cacheRefreshPlan.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december = false;
          cacheRefreshPlan.lastRunTime = 2017-04-13T15:51:04Z;
          cacheRefreshPlan.lastStatus = "";
          cacheRefreshPlan.modifiedBy = "";
          cacheRefreshPlan.modifiedDate = 2017-04-13T15:51:04Z;
          cacheRefreshPlan.parameterValues = [new PowerBiReportServerRestApi.ParameterValue()];
          cacheRefreshPlan.parameterValues[0].name = "";
          cacheRefreshPlan.parameterValues[0].value = "";
          cacheRefreshPlan.parameterValues[0].isValueFieldReference = false;

          instance.setCacheRefreshPlan(id, cacheRefreshPlan, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.CacheRefreshPlan);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.catalogItemPath).to.be.a('string');
            expect(data.catalogItemPath).to.be("");
            expect(data.eventType).to.be.a('string');
            expect(data.eventType).to.be("");
            expect(data.schedule).to.be.a(PowerBiReportServerRestApi.ScheduleReference);
                  expect(data.schedule.scheduleId).to.be.a('string');
              expect(data.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.schedule.definition).to.be.a(PowerBiReportServerRestApi.ScheduleDefinition);
                    expect(data.schedule.definition.startDateTime).to.be.a(Date);
                expect(data.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                expect(data.schedule.definition.endDate).to.be.a(Date);
                expect(data.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                expect(data.schedule.definition.endDateSpecified).to.be.a('boolean');
                expect(data.schedule.definition.endDateSpecified).to.be(false);
                expect(data.schedule.definition.recurrence).to.be.a(PowerBiReportServerRestApi.ScheduleRecurrence);
                      expect(data.schedule.definition.recurrence.minuteRecurrence).to.be.a(PowerBiReportServerRestApi.MinuteRecurrence);
                        expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                  expect(data.schedule.definition.recurrence.dailyRecurrence).to.be.a(PowerBiReportServerRestApi.DailyRecurrence);
                        expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                  expect(data.schedule.definition.recurrence.weeklyRecurrence).to.be.a(PowerBiReportServerRestApi.WeeklyRecurrence);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                  expect(data.schedule.definition.recurrence.monthlyRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyRecurrence);
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                    expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                    expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                  expect(data.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyDOWRecurrence);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(PowerBiReportServerRestApi.WeekNumberEnum);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                    expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);
            expect(data.lastRunTime).to.be.a(Date);
            expect(data.lastRunTime).to.be(2017-04-13T15:51:04Z);
            expect(data.lastStatus).to.be.a('string');
            expect(data.lastStatus).to.be("");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            {
              let dataCtr = data.parameterValues;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.isValueFieldReference).to.be.a('boolean');
                expect(data.isValueFieldReference).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
