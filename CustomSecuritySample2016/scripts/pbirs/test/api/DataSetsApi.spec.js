/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerBiReportServerRestApi);
  }
}(this, function(expect, PowerBiReportServerRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowerBiReportServerRestApi.DataSetsApi();
  });

  describe('(package)', function() {
    describe('DataSetsApi', function() {
      describe('addDataSet', function() {
        it('should call addDataSet successfully', function(done) {
          // TODO: uncomment, update parameter values for addDataSet call and complete the assertions
          /*
          var dataSet = new PowerBiReportServerRestApi.DataSet();
          dataSet.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSet.name = "";
          dataSet.description = "";
          dataSet.path = "";
          dataSet.type = new PowerBiReportServerRestApi.CatalogItemType();
          dataSet.hidden = false;
          dataSet.size = "0";
          dataSet.modifiedBy = "";
          dataSet.modifiedDate = 2017-04-13T15:51:04Z;
          dataSet.createdBy = "";
          dataSet.createdDate = 2017-04-13T15:51:04Z;
          dataSet.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSet.contentType = "";
          dataSet.content = "";
          dataSet.isFavorite = false;
          dataSet.hasParameters = false;
          dataSet.queryExecutionTimeOut = 0;

          instance.addDataSet(dataSet, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.DataSet);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasParameters).to.be.a('boolean');
            expect(data.hasParameters).to.be(false);
            expect(data.queryExecutionTimeOut).to.be.a('number');
            expect(data.queryExecutionTimeOut).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDataSet', function() {
        it('should call deleteDataSet successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDataSet call
          /*
          var id = "id_example";

          instance.deleteDataSet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSet', function() {
        it('should call getDataSet successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSet call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.DataSet);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasParameters).to.be.a('boolean');
            expect(data.hasParameters).to.be(false);
            expect(data.queryExecutionTimeOut).to.be.a('number');
            expect(data.queryExecutionTimeOut).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetAggregatedValue', function() {
        it('should call getDataSetAggregatedValue successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetAggregatedValue call and complete the assertions
          /*
          var id = "id_example";
          var columnName = "columnName_example";
          var aggregation = "aggregation_example";
          var opts = {};
          opts.parameters = new PowerBiReportServerRestApi.DataSetAggregateValueParameters();
          opts.parameters.parameters = [new PowerBiReportServerRestApi.DataSetParameter()];
          opts.parameters.parameters[0].name = "";
          opts.parameters.parameters[0].value = "";

          instance.getDataSetAggregatedValue(id, columnName, aggregation, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetAllowedActions', function() {
        it('should call getDataSetAllowedActions successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetAllowedActions call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetAllowedActions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataAllowedActions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.AllowedAction);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetCacheOptions', function() {
        it('should call getDataSetCacheOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetCacheOptions call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetCacheOptions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.CacheOptions);
            expect(data.executionType).to.be.a(PowerBiReportServerRestApi.ItemExecutionType);
                expect(data.expiration).to.be.a(PowerBiReportServerRestApi.ExpirationReference);
                  expect(data.expiration.minutes).to.be.a('number');
              expect(data.expiration.minutes).to.be(0);
              expect(data.expiration.schedule).to.be.a(PowerBiReportServerRestApi.ScheduleReference);
                    expect(data.expiration.schedule.scheduleId).to.be.a('string');
                expect(data.expiration.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.expiration.schedule.definition).to.be.a(PowerBiReportServerRestApi.ScheduleDefinition);
                      expect(data.expiration.schedule.definition.startDateTime).to.be.a(Date);
                  expect(data.expiration.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                  expect(data.expiration.schedule.definition.endDate).to.be.a(Date);
                  expect(data.expiration.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                  expect(data.expiration.schedule.definition.endDateSpecified).to.be.a('boolean');
                  expect(data.expiration.schedule.definition.endDateSpecified).to.be(false);
                  expect(data.expiration.schedule.definition.recurrence).to.be.a(PowerBiReportServerRestApi.ScheduleRecurrence);
                        expect(data.expiration.schedule.definition.recurrence.minuteRecurrence).to.be.a(PowerBiReportServerRestApi.MinuteRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                    expect(data.expiration.schedule.definition.recurrence.dailyRecurrence).to.be.a(PowerBiReportServerRestApi.DailyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                    expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence).to.be.a(PowerBiReportServerRestApi.WeeklyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                            expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                    expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                      expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                      expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                    expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyDOWRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(PowerBiReportServerRestApi.WeekNumberEnum);
                          expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetCacheRefreshPlans', function() {
        it('should call getDataSetCacheRefreshPlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetCacheRefreshPlans call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetCacheRefreshPlans(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataCacheRefreshPlans);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.CacheRefreshPlan);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.catalogItemPath).to.be.a('string');
                expect(data.catalogItemPath).to.be("");
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("");
                expect(data.schedule).to.be.a(PowerBiReportServerRestApi.ScheduleReference);
                      expect(data.schedule.scheduleId).to.be.a('string');
                  expect(data.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.schedule.definition).to.be.a(PowerBiReportServerRestApi.ScheduleDefinition);
                        expect(data.schedule.definition.startDateTime).to.be.a(Date);
                    expect(data.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                    expect(data.schedule.definition.endDate).to.be.a(Date);
                    expect(data.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                    expect(data.schedule.definition.endDateSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.endDateSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence).to.be.a(PowerBiReportServerRestApi.ScheduleRecurrence);
                          expect(data.schedule.definition.recurrence.minuteRecurrence).to.be.a(PowerBiReportServerRestApi.MinuteRecurrence);
                            expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                      expect(data.schedule.definition.recurrence.dailyRecurrence).to.be.a(PowerBiReportServerRestApi.DailyRecurrence);
                            expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence).to.be.a(PowerBiReportServerRestApi.WeeklyRecurrence);
                            expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                              expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyRecurrence);
                            expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                              expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(PowerBiReportServerRestApi.MonthlyDOWRecurrence);
                            expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(PowerBiReportServerRestApi.WeekNumberEnum);
                            expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(PowerBiReportServerRestApi.DaysOfWeekSelector);
                              expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(PowerBiReportServerRestApi.MonthsOfYearSelector);
                              expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);
                expect(data.lastRunTime).to.be.a(Date);
                expect(data.lastRunTime).to.be(2017-04-13T15:51:04Z);
                expect(data.lastStatus).to.be.a('string');
                expect(data.lastStatus).to.be("");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                {
                  let dataCtr = data.parameterValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.isValueFieldReference).to.be.a('boolean');
                    expect(data.isValueFieldReference).to.be(false);
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetContent', function() {
        it('should call getDataSetContent successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetContent call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetData', function() {
        it('should call getDataSetData successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetData call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.maxRows = 8.14;
          opts.parameters = new PowerBiReportServerRestApi.DataSetDataParameters();
          opts.parameters.parameters = [new PowerBiReportServerRestApi.DataSetParameter()];
          opts.parameters.parameters[0].name = "";
          opts.parameters.parameters[0].value = "";

          instance.getDataSetData(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.DataSetData);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            {
              let dataCtr = data.rows;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Array);
                expect(data).to.be([""]);
              }
            }
            {
              let dataCtr = data.columns;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.DataSetColumns);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetDataSource', function() {
        it('should call getDataSetDataSource successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetDataSource call and complete the assertions
          /*
          var id = "id_example";
          var dataSourceId = "dataSourceId_example";

          instance.getDataSetDataSource(id, dataSourceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.DataSource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.connectionString).to.be.a('string');
            expect(data.connectionString).to.be("");
            expect(data.dataModelDataSource).to.be.a(PowerBiReportServerRestApi.DataModelDataSource);
                  expect(data.dataModelDataSource.authType).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceAuthType);
                  {
                let dataCtr = data.dataModelDataSource.supportedAuthTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceAuthType);
                }
              }
              expect(data.dataModelDataSource.kind).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceKind);
                  expect(data.dataModelDataSource.modelConnectionName).to.be.a('string');
              expect(data.dataModelDataSource.modelConnectionName).to.be("");
              expect(data.dataModelDataSource.secret).to.be.a('string');
              expect(data.dataModelDataSource.secret).to.be("");
              expect(data.dataModelDataSource.type).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceType);
                  expect(data.dataModelDataSource.username).to.be.a('string');
              expect(data.dataModelDataSource.username).to.be("");
            expect(data.dataSourceSubType).to.be.a('string');
            expect(data.dataSourceSubType).to.be("");
            expect(data.dataSourceType).to.be.a('string');
            expect(data.dataSourceType).to.be("");
            expect(data.isOriginalConnectionStringExpressionBased).to.be.a('boolean');
            expect(data.isOriginalConnectionStringExpressionBased).to.be(false);
            expect(data.isConnectionStringOverridden).to.be.a('boolean');
            expect(data.isConnectionStringOverridden).to.be(false);
            expect(data.credentialsByUser).to.be.a(PowerBiReportServerRestApi.CredentialsSuppliedByUser);
                  expect(data.credentialsByUser.displayText).to.be.a('string');
              expect(data.credentialsByUser.displayText).to.be("");
              expect(data.credentialsByUser.useAsWindowsCredentials).to.be.a('boolean');
              expect(data.credentialsByUser.useAsWindowsCredentials).to.be(false);
            expect(data.credentialsInServer).to.be.a(PowerBiReportServerRestApi.CredentialsStoredInServer);
                  expect(data.credentialsInServer.userName).to.be.a('string');
              expect(data.credentialsInServer.userName).to.be("");
              expect(data.credentialsInServer.password).to.be.a('string');
              expect(data.credentialsInServer.password).to.be("");
              expect(data.credentialsInServer.useAsWindowsCredentials).to.be.a('boolean');
              expect(data.credentialsInServer.useAsWindowsCredentials).to.be(false);
              expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be.a('boolean');
              expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be(false);
            expect(data.isReference).to.be.a('boolean');
            expect(data.isReference).to.be(false);
            expect(data.subscriptions).to.be.a(PowerBiReportServerRestApi.Subscription);
                  expect(data.subscriptions.id).to.be.a('string');
              expect(data.subscriptions.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.subscriptions.owner).to.be.a('string');
              expect(data.subscriptions.owner).to.be("");
              expect(data.subscriptions.isDataDriven).to.be.a('boolean');
              expect(data.subscriptions.isDataDriven).to.be(false);
              expect(data.subscriptions.description).to.be.a('string');
              expect(data.subscriptions.description).to.be("");
              expect(data.subscriptions.report).to.be.a('string');
              expect(data.subscriptions.report).to.be("");
              expect(data.subscriptions.isActive).to.be.a('boolean');
              expect(data.subscriptions.isActive).to.be(false);
              expect(data.subscriptions.eventType).to.be.a('string');
              expect(data.subscriptions.eventType).to.be("");
              expect(data.subscriptions.scheduleDescription).to.be.a('string');
              expect(data.subscriptions.scheduleDescription).to.be("");
              expect(data.subscriptions.lastRunTime).to.be.a(Date);
              expect(data.subscriptions.lastRunTime).to.be(2017-04-13T15:51:04Z);
              expect(data.subscriptions.lastStatus).to.be.a('string');
              expect(data.subscriptions.lastStatus).to.be("");
              expect(data.subscriptions.extensionSettings).to.be.a(PowerBiReportServerRestApi.ExtensionSettings);
                    expect(data.subscriptions.extensionSettings.extension).to.be.a('string');
                expect(data.subscriptions.extensionSettings.extension).to.be("");
                expect(data.subscriptions.extensionSettings.parameterValues).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                      expect(data.subscriptions.extensionSettings.parameterValues.name).to.be.a('string');
                  expect(data.subscriptions.extensionSettings.parameterValues.name).to.be("");
                  expect(data.subscriptions.extensionSettings.parameterValues.value).to.be.a('string');
                  expect(data.subscriptions.extensionSettings.parameterValues.value).to.be("");
                  expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be.a('boolean');
                  expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be(false);
              expect(data.subscriptions.deliveryExtension).to.be.a('string');
              expect(data.subscriptions.deliveryExtension).to.be("");
              expect(data.subscriptions.localizedDeliveryExtensionName).to.be.a('string');
              expect(data.subscriptions.localizedDeliveryExtensionName).to.be("");
              expect(data.subscriptions.modifiedBy).to.be.a('string');
              expect(data.subscriptions.modifiedBy).to.be("");
              expect(data.subscriptions.modifiedDate).to.be.a(Date);
              expect(data.subscriptions.modifiedDate).to.be(2017-04-13T15:51:04Z);
              {
                let dataCtr = data.subscriptions.parameterValues;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                  expect(data.isValueFieldReference).to.be.a('boolean');
                  expect(data.isValueFieldReference).to.be(false);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetDataSources', function() {
        it('should call getDataSetDataSources successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetDataSources call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetDataSources(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PowerBiReportServerRestApi.DataSource);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.path).to.be.a('string');
              expect(data.path).to.be("");
              expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                  expect(data.hidden).to.be.a('boolean');
              expect(data.hidden).to.be(false);
              expect(data.size).to.be.a('number');
              expect(data.size).to.be("0");
              expect(data.modifiedBy).to.be.a('string');
              expect(data.modifiedBy).to.be("");
              expect(data.modifiedDate).to.be.a(Date);
              expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.createdDate).to.be.a(Date);
              expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
              expect(data.parentFolderId).to.be.a('string');
              expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.contentType).to.be.a('string');
              expect(data.contentType).to.be("");
              expect(data.content).to.be.a('string');
              expect(data.content).to.be("");
              expect(data.isFavorite).to.be.a('boolean');
              expect(data.isFavorite).to.be(false);
              expect(data.isEnabled).to.be.a('boolean');
              expect(data.isEnabled).to.be(false);
              expect(data.connectionString).to.be.a('string');
              expect(data.connectionString).to.be("");
              expect(data.dataModelDataSource).to.be.a(PowerBiReportServerRestApi.DataModelDataSource);
                    expect(data.dataModelDataSource.authType).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceAuthType);
                    {
                  let dataCtr = data.dataModelDataSource.supportedAuthTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceAuthType);
                  }
                }
                expect(data.dataModelDataSource.kind).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceKind);
                    expect(data.dataModelDataSource.modelConnectionName).to.be.a('string');
                expect(data.dataModelDataSource.modelConnectionName).to.be("");
                expect(data.dataModelDataSource.secret).to.be.a('string');
                expect(data.dataModelDataSource.secret).to.be("");
                expect(data.dataModelDataSource.type).to.be.a(PowerBiReportServerRestApi.DataModelDataSourceType);
                    expect(data.dataModelDataSource.username).to.be.a('string');
                expect(data.dataModelDataSource.username).to.be("");
              expect(data.dataSourceSubType).to.be.a('string');
              expect(data.dataSourceSubType).to.be("");
              expect(data.dataSourceType).to.be.a('string');
              expect(data.dataSourceType).to.be("");
              expect(data.isOriginalConnectionStringExpressionBased).to.be.a('boolean');
              expect(data.isOriginalConnectionStringExpressionBased).to.be(false);
              expect(data.isConnectionStringOverridden).to.be.a('boolean');
              expect(data.isConnectionStringOverridden).to.be(false);
              expect(data.credentialsByUser).to.be.a(PowerBiReportServerRestApi.CredentialsSuppliedByUser);
                    expect(data.credentialsByUser.displayText).to.be.a('string');
                expect(data.credentialsByUser.displayText).to.be("");
                expect(data.credentialsByUser.useAsWindowsCredentials).to.be.a('boolean');
                expect(data.credentialsByUser.useAsWindowsCredentials).to.be(false);
              expect(data.credentialsInServer).to.be.a(PowerBiReportServerRestApi.CredentialsStoredInServer);
                    expect(data.credentialsInServer.userName).to.be.a('string');
                expect(data.credentialsInServer.userName).to.be("");
                expect(data.credentialsInServer.password).to.be.a('string');
                expect(data.credentialsInServer.password).to.be("");
                expect(data.credentialsInServer.useAsWindowsCredentials).to.be.a('boolean');
                expect(data.credentialsInServer.useAsWindowsCredentials).to.be(false);
                expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be.a('boolean');
                expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be(false);
              expect(data.isReference).to.be.a('boolean');
              expect(data.isReference).to.be(false);
              expect(data.subscriptions).to.be.a(PowerBiReportServerRestApi.Subscription);
                    expect(data.subscriptions.id).to.be.a('string');
                expect(data.subscriptions.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.subscriptions.owner).to.be.a('string');
                expect(data.subscriptions.owner).to.be("");
                expect(data.subscriptions.isDataDriven).to.be.a('boolean');
                expect(data.subscriptions.isDataDriven).to.be(false);
                expect(data.subscriptions.description).to.be.a('string');
                expect(data.subscriptions.description).to.be("");
                expect(data.subscriptions.report).to.be.a('string');
                expect(data.subscriptions.report).to.be("");
                expect(data.subscriptions.isActive).to.be.a('boolean');
                expect(data.subscriptions.isActive).to.be(false);
                expect(data.subscriptions.eventType).to.be.a('string');
                expect(data.subscriptions.eventType).to.be("");
                expect(data.subscriptions.scheduleDescription).to.be.a('string');
                expect(data.subscriptions.scheduleDescription).to.be("");
                expect(data.subscriptions.lastRunTime).to.be.a(Date);
                expect(data.subscriptions.lastRunTime).to.be(2017-04-13T15:51:04Z);
                expect(data.subscriptions.lastStatus).to.be.a('string');
                expect(data.subscriptions.lastStatus).to.be("");
                expect(data.subscriptions.extensionSettings).to.be.a(PowerBiReportServerRestApi.ExtensionSettings);
                      expect(data.subscriptions.extensionSettings.extension).to.be.a('string');
                  expect(data.subscriptions.extensionSettings.extension).to.be("");
                  expect(data.subscriptions.extensionSettings.parameterValues).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                        expect(data.subscriptions.extensionSettings.parameterValues.name).to.be.a('string');
                    expect(data.subscriptions.extensionSettings.parameterValues.name).to.be("");
                    expect(data.subscriptions.extensionSettings.parameterValues.value).to.be.a('string');
                    expect(data.subscriptions.extensionSettings.parameterValues.value).to.be("");
                    expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be.a('boolean');
                    expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be(false);
                expect(data.subscriptions.deliveryExtension).to.be.a('string');
                expect(data.subscriptions.deliveryExtension).to.be("");
                expect(data.subscriptions.localizedDeliveryExtensionName).to.be.a('string');
                expect(data.subscriptions.localizedDeliveryExtensionName).to.be("");
                expect(data.subscriptions.modifiedBy).to.be.a('string');
                expect(data.subscriptions.modifiedBy).to.be("");
                expect(data.subscriptions.modifiedDate).to.be.a(Date);
                expect(data.subscriptions.modifiedDate).to.be(2017-04-13T15:51:04Z);
                {
                  let dataCtr = data.subscriptions.parameterValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PowerBiReportServerRestApi.ParameterValue);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.isValueFieldReference).to.be.a('boolean');
                    expect(data.isValueFieldReference).to.be(false);
                  }
                }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetDependentItems', function() {
        it('should call getDataSetDependentItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetDependentItems call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetDependentItems(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataDependentItems);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.CatalogItem);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetODataFeed', function() {
        it('should call getDataSetODataFeed successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetODataFeed call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetODataFeed(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataDataSetRows);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.DataSetRow);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetParameterDefinitions', function() {
        it('should call getDataSetParameterDefinitions successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetParameterDefinitions call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetParameterDefinitions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataReportParameterDefinitions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.ReportParameterDefinition);
                expect(data.allowBlank).to.be.a('boolean');
                expect(data.allowBlank).to.be(false);
                {
                  let dataCtr = data.defaultValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.defaultValuesIsNull).to.be.a('boolean');
                expect(data.defaultValuesIsNull).to.be(false);
                expect(data.defaultValuesQueryBased).to.be.a('boolean');
                expect(data.defaultValuesQueryBased).to.be(false);
                {
                  let dataCtr = data.dependencies;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.errorMessage).to.be.a('string');
                expect(data.errorMessage).to.be("");
                expect(data.multiValue).to.be.a('boolean');
                expect(data.multiValue).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.nullable).to.be.a('boolean');
                expect(data.nullable).to.be(false);
                expect(data.parameterState).to.be.a(PowerBiReportServerRestApi.ReportParameterState);
                    expect(data.parameterType).to.be.a(PowerBiReportServerRestApi.ReportParameterType);
                    expect(data.parameterVisibility).to.be.a(PowerBiReportServerRestApi.ReportParameterVisibility);
                    expect(data.prompt).to.be.a('string');
                expect(data.prompt).to.be("");
                expect(data.promptUser).to.be.a('boolean');
                expect(data.promptUser).to.be(false);
                expect(data.queryParameter).to.be.a('boolean');
                expect(data.queryParameter).to.be(false);
                {
                  let dataCtr = data.validValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PowerBiReportServerRestApi.ValidValue);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
                expect(data.validValuesIsNull).to.be.a('boolean');
                expect(data.validValuesIsNull).to.be(false);
                expect(data.validValuesQueryBased).to.be.a('boolean');
                expect(data.validValuesQueryBased).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetPolicies', function() {
        it('should call getDataSetPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetPolicies call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetPolicies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PowerBiReportServerRestApi.ItemPolicy);
              expect(data.inheritParentPolicy).to.be.a('boolean');
              expect(data.inheritParentPolicy).to.be(false);
              {
                let dataCtr = data.policies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PowerBiReportServerRestApi.Policy);
                  expect(data.groupUserName).to.be.a('string');
                  expect(data.groupUserName).to.be("");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PowerBiReportServerRestApi.Role);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSetSchema', function() {
        it('should call getDataSetSchema successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSetSchema call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSetSchema(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.DataSetSchema);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            {
              let dataCtr = data.fields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.DataSetField);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.dataType).to.be.a(PowerBiReportServerRestApi.ReportParameterType);
        
              }
            }
            {
              let dataCtr = data.parameters;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.DataSetParameterInfo);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.defaultValue).to.be.a('string');
                expect(data.defaultValue).to.be("");
                expect(data.nullable).to.be.a('boolean');
                expect(data.nullable).to.be(false);
                expect(data.dataType).to.be.a(PowerBiReportServerRestApi.ReportParameterType);
                    expect(data.isExpression).to.be.a('boolean');
                expect(data.isExpression).to.be(false);
                expect(data.isMultiValued).to.be.a('boolean');
                expect(data.isMultiValued).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSets', function() {
        it('should call getDataSets successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSets call and complete the assertions
          /*
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";
          opts.orderBy = "orderBy_example";
          opts.select = "select_example";

          instance.getDataSets(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataDataSets);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.DataSet);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
                expect(data.hasParameters).to.be.a('boolean');
                expect(data.hasParameters).to.be(false);
                expect(data.queryExecutionTimeOut).to.be.a('number');
                expect(data.queryExecutionTimeOut).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDatasetProperties', function() {
        it('should call getDatasetProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getDatasetProperties call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.properties = ["properties_example"];

          instance.getDatasetProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataProperties);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.Property);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setDataSetCacheOptions', function() {
        it('should call setDataSetCacheOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for setDataSetCacheOptions call
          /*
          var id = "id_example";
          var cacheOptions = new PowerBiReportServerRestApi.CacheOptions();
          cacheOptions.executionType = new PowerBiReportServerRestApi.ItemExecutionType();
          cacheOptions.expiration = new PowerBiReportServerRestApi.ExpirationReference();
          cacheOptions.expiration.minutes = 0;
          cacheOptions.expiration.schedule = new PowerBiReportServerRestApi.ScheduleReference();
          cacheOptions.expiration.schedule.scheduleId = """00000000-0000-0000-0000-000000000000";
          cacheOptions.expiration.schedule.definition = new PowerBiReportServerRestApi.ScheduleDefinition();
          cacheOptions.expiration.schedule.definition.startDateTime = 2017-04-13T15:51:04Z;
          cacheOptions.expiration.schedule.definition.endDate = 2017-04-13T15:51:04Z;
          cacheOptions.expiration.schedule.definition.endDateSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence = new PowerBiReportServerRestApi.ScheduleRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.minuteRecurrence = new PowerBiReportServerRestApi.MinuteRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.dailyRecurrence = new PowerBiReportServerRestApi.DailyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence = new PowerBiReportServerRestApi.WeeklyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek = new PowerBiReportServerRestApi.DaysOfWeekSelector();
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence = new PowerBiReportServerRestApi.MonthlyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.days = "";
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear = new PowerBiReportServerRestApi.MonthsOfYearSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence = new PowerBiReportServerRestApi.MonthlyDOWRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek = new PowerBiReportServerRestApi.WeekNumberEnum();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek = new PowerBiReportServerRestApi.DaysOfWeekSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear = new PowerBiReportServerRestApi.MonthsOfYearSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december = false;

          instance.setDataSetCacheOptions(id, cacheOptions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setDataSetDataSource', function() {
        it('should call setDataSetDataSource successfully', function(done) {
          // TODO: uncomment, update parameter values for setDataSetDataSource call
          /*
          var id = "id_example";
          var dataSourceId = "dataSourceId_example";
          var dataSource = new PowerBiReportServerRestApi.DataSource();
          dataSource.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.name = "";
          dataSource.description = "";
          dataSource.path = "";
          dataSource.type = new PowerBiReportServerRestApi.CatalogItemType();
          dataSource.hidden = false;
          dataSource.size = "0";
          dataSource.modifiedBy = "";
          dataSource.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.createdBy = "";
          dataSource.createdDate = 2017-04-13T15:51:04Z;
          dataSource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.contentType = "";
          dataSource.content = "";
          dataSource.isFavorite = false;
          dataSource.isEnabled = false;
          dataSource.connectionString = "";
          dataSource.dataModelDataSource = new PowerBiReportServerRestApi.DataModelDataSource();
          dataSource.dataModelDataSource.authType = new PowerBiReportServerRestApi.DataModelDataSourceAuthType();
          dataSource.dataModelDataSource.supportedAuthTypes = [new PowerBiReportServerRestApi.DataModelDataSourceAuthType()];
          dataSource.dataModelDataSource.kind = new PowerBiReportServerRestApi.DataModelDataSourceKind();
          dataSource.dataModelDataSource.modelConnectionName = "";
          dataSource.dataModelDataSource.secret = "";
          dataSource.dataModelDataSource.type = new PowerBiReportServerRestApi.DataModelDataSourceType();
          dataSource.dataModelDataSource.username = "";
          dataSource.dataSourceSubType = "";
          dataSource.dataSourceType = "";
          dataSource.isOriginalConnectionStringExpressionBased = false;
          dataSource.isConnectionStringOverridden = false;
          dataSource.credentialsByUser = new PowerBiReportServerRestApi.CredentialsSuppliedByUser();
          dataSource.credentialsByUser.displayText = "";
          dataSource.credentialsByUser.useAsWindowsCredentials = false;
          dataSource.credentialsInServer = new PowerBiReportServerRestApi.CredentialsStoredInServer();
          dataSource.credentialsInServer.userName = "";
          dataSource.credentialsInServer.password = "";
          dataSource.credentialsInServer.useAsWindowsCredentials = false;
          dataSource.credentialsInServer.impersonateAuthenticatedUser = false;
          dataSource.isReference = false;
          dataSource.subscriptions = new PowerBiReportServerRestApi.Subscription();
          dataSource.subscriptions.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.subscriptions.owner = "";
          dataSource.subscriptions.isDataDriven = false;
          dataSource.subscriptions.description = "";
          dataSource.subscriptions.report = "";
          dataSource.subscriptions.isActive = false;
          dataSource.subscriptions.eventType = "";
          dataSource.subscriptions.scheduleDescription = "";
          dataSource.subscriptions.lastRunTime = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.lastStatus = "";
          dataSource.subscriptions.extensionSettings = new PowerBiReportServerRestApi.ExtensionSettings();
          dataSource.subscriptions.extensionSettings.extension = "";
          dataSource.subscriptions.extensionSettings.parameterValues = new PowerBiReportServerRestApi.ParameterValue();
          dataSource.subscriptions.extensionSettings.parameterValues.name = "";
          dataSource.subscriptions.extensionSettings.parameterValues.value = "";
          dataSource.subscriptions.extensionSettings.parameterValues.isValueFieldReference = false;
          dataSource.subscriptions.deliveryExtension = "";
          dataSource.subscriptions.localizedDeliveryExtensionName = "";
          dataSource.subscriptions.modifiedBy = "";
          dataSource.subscriptions.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.parameterValues = [new PowerBiReportServerRestApi.ParameterValue()];
          dataSource.subscriptions.parameterValues[0].name = "";
          dataSource.subscriptions.parameterValues[0].value = "";
          dataSource.subscriptions.parameterValues[0].isValueFieldReference = false;

          instance.setDataSetDataSource(id, dataSourceId, dataSource, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setDataSetDataSources', function() {
        it('should call setDataSetDataSources successfully', function(done) {
          // TODO: uncomment, update parameter values for setDataSetDataSources call
          /*
          var id = "id_example";
          var dataSource = new PowerBiReportServerRestApi.DataSource();
          dataSource.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.name = "";
          dataSource.description = "";
          dataSource.path = "";
          dataSource.type = new PowerBiReportServerRestApi.CatalogItemType();
          dataSource.hidden = false;
          dataSource.size = "0";
          dataSource.modifiedBy = "";
          dataSource.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.createdBy = "";
          dataSource.createdDate = 2017-04-13T15:51:04Z;
          dataSource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.contentType = "";
          dataSource.content = "";
          dataSource.isFavorite = false;
          dataSource.isEnabled = false;
          dataSource.connectionString = "";
          dataSource.dataModelDataSource = new PowerBiReportServerRestApi.DataModelDataSource();
          dataSource.dataModelDataSource.authType = new PowerBiReportServerRestApi.DataModelDataSourceAuthType();
          dataSource.dataModelDataSource.supportedAuthTypes = [new PowerBiReportServerRestApi.DataModelDataSourceAuthType()];
          dataSource.dataModelDataSource.kind = new PowerBiReportServerRestApi.DataModelDataSourceKind();
          dataSource.dataModelDataSource.modelConnectionName = "";
          dataSource.dataModelDataSource.secret = "";
          dataSource.dataModelDataSource.type = new PowerBiReportServerRestApi.DataModelDataSourceType();
          dataSource.dataModelDataSource.username = "";
          dataSource.dataSourceSubType = "";
          dataSource.dataSourceType = "";
          dataSource.isOriginalConnectionStringExpressionBased = false;
          dataSource.isConnectionStringOverridden = false;
          dataSource.credentialsByUser = new PowerBiReportServerRestApi.CredentialsSuppliedByUser();
          dataSource.credentialsByUser.displayText = "";
          dataSource.credentialsByUser.useAsWindowsCredentials = false;
          dataSource.credentialsInServer = new PowerBiReportServerRestApi.CredentialsStoredInServer();
          dataSource.credentialsInServer.userName = "";
          dataSource.credentialsInServer.password = "";
          dataSource.credentialsInServer.useAsWindowsCredentials = false;
          dataSource.credentialsInServer.impersonateAuthenticatedUser = false;
          dataSource.isReference = false;
          dataSource.subscriptions = new PowerBiReportServerRestApi.Subscription();
          dataSource.subscriptions.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.subscriptions.owner = "";
          dataSource.subscriptions.isDataDriven = false;
          dataSource.subscriptions.description = "";
          dataSource.subscriptions.report = "";
          dataSource.subscriptions.isActive = false;
          dataSource.subscriptions.eventType = "";
          dataSource.subscriptions.scheduleDescription = "";
          dataSource.subscriptions.lastRunTime = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.lastStatus = "";
          dataSource.subscriptions.extensionSettings = new PowerBiReportServerRestApi.ExtensionSettings();
          dataSource.subscriptions.extensionSettings.extension = "";
          dataSource.subscriptions.extensionSettings.parameterValues = new PowerBiReportServerRestApi.ParameterValue();
          dataSource.subscriptions.extensionSettings.parameterValues.name = "";
          dataSource.subscriptions.extensionSettings.parameterValues.value = "";
          dataSource.subscriptions.extensionSettings.parameterValues.isValueFieldReference = false;
          dataSource.subscriptions.deliveryExtension = "";
          dataSource.subscriptions.localizedDeliveryExtensionName = "";
          dataSource.subscriptions.modifiedBy = "";
          dataSource.subscriptions.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.parameterValues = [new PowerBiReportServerRestApi.ParameterValue()];
          dataSource.subscriptions.parameterValues[0].name = "";
          dataSource.subscriptions.parameterValues[0].value = "";
          dataSource.subscriptions.parameterValues[0].isValueFieldReference = false;

          instance.setDataSetDataSources(id, dataSource, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setDataSetPolicies', function() {
        it('should call setDataSetPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for setDataSetPolicies call
          /*
          var id = "id_example";
          var itemPolicy = [new PowerBiReportServerRestApi.ItemPolicy()];
          itemPolicy[0].inheritParentPolicy = false;
          itemPolicy[0].policies = [new PowerBiReportServerRestApi.Policy()];
          itemPolicy[0].policies[0].groupUserName = "";
          itemPolicy[0].policies[0].roles = [new PowerBiReportServerRestApi.Role()];
          itemPolicy[0].policies[0].roles[0].name = "";
          itemPolicy[0].policies[0].roles[0].description = "";

          instance.setDataSetPolicies(id, itemPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDataSet', function() {
        it('should call updateDataSet successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDataSet call
          /*
          var id = "id_example";
          var dataSet = new PowerBiReportServerRestApi.DataSet();
          dataSet.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSet.name = "";
          dataSet.description = "";
          dataSet.path = "";
          dataSet.type = new PowerBiReportServerRestApi.CatalogItemType();
          dataSet.hidden = false;
          dataSet.size = "0";
          dataSet.modifiedBy = "";
          dataSet.modifiedDate = 2017-04-13T15:51:04Z;
          dataSet.createdBy = "";
          dataSet.createdDate = 2017-04-13T15:51:04Z;
          dataSet.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSet.contentType = "";
          dataSet.content = "";
          dataSet.isFavorite = false;
          dataSet.hasParameters = false;
          dataSet.queryExecutionTimeOut = 0;

          instance.updateDataSet(id, dataSet, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDataSetParameterDefinitions', function() {
        it('should call updateDataSetParameterDefinitions successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDataSetParameterDefinitions call
          /*
          var id = "id_example";
          var parameterDefinitions = [new PowerBiReportServerRestApi.ReportParameterDefinitionPatch()];
          parameterDefinitions[0].name = "";
          parameterDefinitions[0].defaultValues = [""];
          parameterDefinitions[0].prompt = "";
          parameterDefinitions[0].parameterVisibility = new PowerBiReportServerRestApi.ReportParameterVisibility();

          instance.updateDataSetParameterDefinitions(id, parameterDefinitions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDatasetProperties', function() {
        it('should call updateDatasetProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDatasetProperties call
          /*
          var id = "id_example";
          var properties = [new PowerBiReportServerRestApi.Property()];
          properties[0].name = "";
          properties[0].value = "";

          instance.updateDatasetProperties(id, properties, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadDataSet', function() {
        it('should call uploadDataSet successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadDataSet call and complete the assertions
          /*
          var id = "id_example";
          var file = "/path/to/file.txt";

          instance.uploadDataSet(id, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.DataSet);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasParameters).to.be.a('boolean');
            expect(data.hasParameters).to.be(false);
            expect(data.queryExecutionTimeOut).to.be.a('number');
            expect(data.queryExecutionTimeOut).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
