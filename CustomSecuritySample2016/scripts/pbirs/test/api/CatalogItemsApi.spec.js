/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerBiReportServerRestApi);
  }
}(this, function(expect, PowerBiReportServerRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowerBiReportServerRestApi.CatalogItemsApi();
  });

  describe('(package)', function() {
    describe('CatalogItemsApi', function() {
      describe('addCatalogItem', function() {
        it('should call addCatalogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for addCatalogItem call and complete the assertions
          /*
          var catalogItem = new PowerBiReportServerRestApi.CatalogItem();
          catalogItem.id = "01234567-89ab-cdef-0123-456789abcdef";
          catalogItem.name = "";
          catalogItem.description = "";
          catalogItem.path = "";
          catalogItem.type = new PowerBiReportServerRestApi.CatalogItemType();
          catalogItem.hidden = false;
          catalogItem.size = "0";
          catalogItem.modifiedBy = "";
          catalogItem.modifiedDate = 2017-04-13T15:51:04Z;
          catalogItem.createdBy = "";
          catalogItem.createdDate = 2017-04-13T15:51:04Z;
          catalogItem.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          catalogItem.contentType = "";
          catalogItem.content = "";
          catalogItem.isFavorite = false;

          instance.addCatalogItem(catalogItem, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.CatalogItem);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteCatalogItem', function() {
        it('should call deleteCatalogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCatalogItem call
          /*
          var id = "id_example";

          instance.deleteCatalogItem(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteCatalogItems', function() {
        it('should call deleteCatalogItems successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCatalogItems call and complete the assertions
          /*
          var deleteItemsRequest = new PowerBiReportServerRestApi.DeleteItemsRequest();
          deleteItemsRequest.catalogItemPaths = [""];

          instance.deleteCatalogItems(deleteItemsRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.BulkOperationsResult);
            {
              let dataCtr = data.failedOperations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.hasErrors).to.be.a('boolean');
            expect(data.hasErrors).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCatalogItem', function() {
        it('should call getCatalogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for getCatalogItem call and complete the assertions
          /*
          var id = "id_example";

          instance.getCatalogItem(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.CatalogItem);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCatalogItemContent', function() {
        it('should call getCatalogItemContent successfully', function(done) {
          // TODO: uncomment, update parameter values for getCatalogItemContent call and complete the assertions
          /*
          var id = "id_example";

          instance.getCatalogItemContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCatalogItemPolicies', function() {
        it('should call getCatalogItemPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getCatalogItemPolicies call and complete the assertions
          /*
          var id = "id_example";

          instance.getCatalogItemPolicies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(PowerBiReportServerRestApi.ItemPolicy);
              expect(data.inheritParentPolicy).to.be.a('boolean');
              expect(data.inheritParentPolicy).to.be(false);
              {
                let dataCtr = data.policies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PowerBiReportServerRestApi.Policy);
                  expect(data.groupUserName).to.be.a('string');
                  expect(data.groupUserName).to.be("");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PowerBiReportServerRestApi.Role);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCatalogItemProperties', function() {
        it('should call getCatalogItemProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getCatalogItemProperties call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.properties = ["properties_example"];

          instance.getCatalogItemProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataProperties);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.Property);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCatalogItemRoles', function() {
        it('should call getCatalogItemRoles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCatalogItemRoles call and complete the assertions
          /*
          var id = "id_example";

          instance.getCatalogItemRoles(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataProperties1);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.Role);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCatalogItems', function() {
        it('should call getCatalogItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getCatalogItems call and complete the assertions
          /*
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";
          opts.orderBy = "orderBy_example";
          opts.select = "select_example";

          instance.getCatalogItems(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.ODataCatalogItems);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PowerBiReportServerRestApi.CatalogItem);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(PowerBiReportServerRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('moveCatalogItems', function() {
        it('should call moveCatalogItems successfully', function(done) {
          // TODO: uncomment, update parameter values for moveCatalogItems call and complete the assertions
          /*
          var moveItemsRequest = new PowerBiReportServerRestApi.MoveItemsRequest();
          moveItemsRequest.catalogItemPaths = [""];
          moveItemsRequest.targetPath = "";

          instance.moveCatalogItems(moveItemsRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PowerBiReportServerRestApi.BulkOperationsResult);
            {
              let dataCtr = data.failedOperations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.hasErrors).to.be.a('boolean');
            expect(data.hasErrors).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setCatalogItemPolicies', function() {
        it('should call setCatalogItemPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for setCatalogItemPolicies call
          /*
          var id = "id_example";
          var catalogItem = [new PowerBiReportServerRestApi.ItemPolicy()];
          catalogItem[0].inheritParentPolicy = false;
          catalogItem[0].policies = [new PowerBiReportServerRestApi.Policy()];
          catalogItem[0].policies[0].groupUserName = "";
          catalogItem[0].policies[0].roles = [new PowerBiReportServerRestApi.Role()];
          catalogItem[0].policies[0].roles[0].name = "";
          catalogItem[0].policies[0].roles[0].description = "";

          instance.setCatalogItemPolicies(id, catalogItem, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCatalogItem', function() {
        it('should call updateCatalogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCatalogItem call
          /*
          var id = "id_example";
          var catalogItem = new PowerBiReportServerRestApi.CatalogItem();
          catalogItem.id = "01234567-89ab-cdef-0123-456789abcdef";
          catalogItem.name = "";
          catalogItem.description = "";
          catalogItem.path = "";
          catalogItem.type = new PowerBiReportServerRestApi.CatalogItemType();
          catalogItem.hidden = false;
          catalogItem.size = "0";
          catalogItem.modifiedBy = "";
          catalogItem.modifiedDate = 2017-04-13T15:51:04Z;
          catalogItem.createdBy = "";
          catalogItem.createdDate = 2017-04-13T15:51:04Z;
          catalogItem.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          catalogItem.contentType = "";
          catalogItem.content = "";
          catalogItem.isFavorite = false;

          instance.updateCatalogItem(id, catalogItem, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCatalogItemProperties', function() {
        it('should call updateCatalogItemProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCatalogItemProperties call
          /*
          var id = "id_example";
          var properties = [new PowerBiReportServerRestApi.Property()];
          properties[0].name = "";
          properties[0].value = "";

          instance.updateCatalogItemProperties(id, properties, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
