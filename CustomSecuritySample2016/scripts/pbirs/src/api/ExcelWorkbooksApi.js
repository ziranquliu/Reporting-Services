/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Comment', 'model/ExcelWorkbook', 'model/ItemPolicy', 'model/ODataAllowedActions', 'model/ODataComments', 'model/ODataExcelWorkbooks', 'model/ODataProperties', 'model/OdataError', 'model/Property'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Comment'), require('../model/ExcelWorkbook'), require('../model/ItemPolicy'), require('../model/ODataAllowedActions'), require('../model/ODataComments'), require('../model/ODataExcelWorkbooks'), require('../model/ODataProperties'), require('../model/OdataError'), require('../model/Property'));
  } else {
    // Browser globals (root is window)
    if (!root.PowerBiReportServerRestApi) {
      root.PowerBiReportServerRestApi = {};
    }
    root.PowerBiReportServerRestApi.ExcelWorkbooksApi = factory(root.PowerBiReportServerRestApi.ApiClient, root.PowerBiReportServerRestApi.Comment, root.PowerBiReportServerRestApi.ExcelWorkbook, root.PowerBiReportServerRestApi.ItemPolicy, root.PowerBiReportServerRestApi.ODataAllowedActions, root.PowerBiReportServerRestApi.ODataComments, root.PowerBiReportServerRestApi.ODataExcelWorkbooks, root.PowerBiReportServerRestApi.ODataProperties, root.PowerBiReportServerRestApi.OdataError, root.PowerBiReportServerRestApi.Property);
  }
}(this, function(ApiClient, Comment, ExcelWorkbook, ItemPolicy, ODataAllowedActions, ODataComments, ODataExcelWorkbooks, ODataProperties, OdataError, Property) {
  'use strict';

  /**
   * ExcelWorkbooks service.
   * @module api/ExcelWorkbooksApi
   * @version 2.0
   */

  /**
   * Constructs a new ExcelWorkbooksApi. 
   * @alias module:api/ExcelWorkbooksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addExcelWorkbook operation.
     * @callback module:api/ExcelWorkbooksApi~addExcelWorkbookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExcelWorkbook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new ExcelWorkbook CatalogItem.
     * @param {module:model/ExcelWorkbook} excelWorkbook The definition of the new ExcelWorkbook CatalogItem.
     * @param {module:api/ExcelWorkbooksApi~addExcelWorkbookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExcelWorkbook}
     */
    this.addExcelWorkbook = function(excelWorkbook, callback) {
      var postBody = excelWorkbook;

      // verify the required parameter 'excelWorkbook' is set
      if (excelWorkbook === undefined || excelWorkbook === null) {
        throw new Error("Missing the required parameter 'excelWorkbook' when calling addExcelWorkbook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExcelWorkbook;

      return this.apiClient.callApi(
        '/ExcelWorkbooks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addExcelWorkbookComment operation.
     * @callback module:api/ExcelWorkbooksApi~addExcelWorkbookCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Comment associated to the specified ExcelWorkbook.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/Comment} comment The Comment to be created
     * @param {module:api/ExcelWorkbooksApi~addExcelWorkbookCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addExcelWorkbookComment = function(id, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addExcelWorkbookComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling addExcelWorkbookComment");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExcelWorkbook operation.
     * @callback module:api/ExcelWorkbooksApi~deleteExcelWorkbookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified ExcelWorkbook.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ExcelWorkbooksApi~deleteExcelWorkbookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteExcelWorkbook = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExcelWorkbook");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExcelWorkbookComment operation.
     * @callback module:api/ExcelWorkbooksApi~deleteExcelWorkbookCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Comment associated to the ExcelWorkbook.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:api/ExcelWorkbooksApi~deleteExcelWorkbookCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteExcelWorkbookComment = function(id, commentId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExcelWorkbookComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteExcelWorkbookComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Comments({CommentId})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExcelWorkbook operation.
     * @callback module:api/ExcelWorkbooksApi~getExcelWorkbookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExcelWorkbook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the ExcelWorkbook CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ExcelWorkbooksApi~getExcelWorkbookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExcelWorkbook}
     */
    this.getExcelWorkbook = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExcelWorkbook");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExcelWorkbook;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExcelWorkbookAllowedActions operation.
     * @callback module:api/ExcelWorkbooksApi~getExcelWorkbookAllowedActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataAllowedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of actions allowed in the current session, user permissions and product edition capabilities are considered when querying.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ExcelWorkbooksApi~getExcelWorkbookAllowedActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataAllowedActions}
     */
    this.getExcelWorkbookAllowedActions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExcelWorkbookAllowedActions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataAllowedActions;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/AllowedActions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExcelWorkbookComments operation.
     * @callback module:api/ExcelWorkbooksApi~getExcelWorkbookCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataComments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Comments for a ExcelWorkbook specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ExcelWorkbooksApi~getExcelWorkbookCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataComments}
     */
    this.getExcelWorkbookComments = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExcelWorkbookComments");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataComments;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExcelWorkbookContent operation.
     * @callback module:api/ExcelWorkbooksApi~getExcelWorkbookContentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content of the specified ExcelWorkbook CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ExcelWorkbooksApi~getExcelWorkbookContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getExcelWorkbookContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExcelWorkbookContent");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = File;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Content/$value', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExcelWorkbookPolicies operation.
     * @callback module:api/ExcelWorkbooksApi~getExcelWorkbookPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets policies associated with the specified ExcelWorkbook CatalogItem.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ExcelWorkbooksApi~getExcelWorkbookPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemPolicy>}
     */
    this.getExcelWorkbookPolicies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExcelWorkbookPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ItemPolicy];

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExcelWorkbookProperties operation.
     * @callback module:api/ExcelWorkbooksApi~getExcelWorkbookPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ExcelWorkbook properties (takes list of property names to retrieve the values)
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.properties Names for the properties to be returned.
     * @param {module:api/ExcelWorkbooksApi~getExcelWorkbookPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataProperties}
     */
    this.getExcelWorkbookProperties = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExcelWorkbookProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'properties': {
          value: opts['properties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataProperties;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExcelWorkbooks operation.
     * @callback module:api/ExcelWorkbooksApi~getExcelWorkbooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataExcelWorkbooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of ExcelWorkbook CatalogItems.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {Number} opts.skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {String} opts.filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {String} opts.count Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {String} opts.orderBy Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {String} opts.select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {module:api/ExcelWorkbooksApi~getExcelWorkbooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataExcelWorkbooks}
     */
    this.getExcelWorkbooks = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$count': opts['count'],
        '$orderBy': opts['orderBy'],
        '$select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataExcelWorkbooks;

      return this.apiClient.callApi(
        '/ExcelWorkbooks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setExcelWorkbookPolicies operation.
     * @callback module:api/ExcelWorkbooksApi~setExcelWorkbookPoliciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces ItemPolicies associated with the specified ExcelWorkbook item.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ItemPolicy>} itemPolicy The ItemPolicy definitions that will be replaced.
     * @param {module:api/ExcelWorkbooksApi~setExcelWorkbookPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setExcelWorkbookPolicies = function(id, itemPolicy, callback) {
      var postBody = itemPolicy;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setExcelWorkbookPolicies");
      }

      // verify the required parameter 'itemPolicy' is set
      if (itemPolicy === undefined || itemPolicy === null) {
        throw new Error("Missing the required parameter 'itemPolicy' when calling setExcelWorkbookPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Policies', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExcelWorkbook operation.
     * @callback module:api/ExcelWorkbooksApi~updateExcelWorkbookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified ExcelWorkbook CatalogItem using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/ExcelWorkbook} excelWorkbook Definition of the ExcelWorkbook item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {module:api/ExcelWorkbooksApi~updateExcelWorkbookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateExcelWorkbook = function(id, excelWorkbook, callback) {
      var postBody = excelWorkbook;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExcelWorkbook");
      }

      // verify the required parameter 'excelWorkbook' is set
      if (excelWorkbook === undefined || excelWorkbook === null) {
        throw new Error("Missing the required parameter 'excelWorkbook' when calling updateExcelWorkbook");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExcelWorkbookComment operation.
     * @callback module:api/ExcelWorkbooksApi~updateExcelWorkbookCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Comment specified by CommentId in the associated ExcelWorkbook.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:model/Comment} comment The Comment to be updated
     * @param {module:api/ExcelWorkbooksApi~updateExcelWorkbookCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateExcelWorkbookComment = function(id, commentId, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExcelWorkbookComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updateExcelWorkbookComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateExcelWorkbookComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Comments({CommentId})', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExcelWorkbookProperties operation.
     * @callback module:api/ExcelWorkbooksApi~updateExcelWorkbookPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the ExcelWorkbook properties included in the given list.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/Property>} properties The properties that will be updated.
     * @param {module:api/ExcelWorkbooksApi~updateExcelWorkbookPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateExcelWorkbookProperties = function(id, properties, callback) {
      var postBody = properties;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExcelWorkbookProperties");
      }

      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling updateExcelWorkbookProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Properties', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadExcelWorkbook operation.
     * @callback module:api/ExcelWorkbooksApi~uploadExcelWorkbookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExcelWorkbook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new ExcelWorkbook CatalogItem from a multipart/form-data request. Use of this API is recommended for files larger than 25 MB in size.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {File} file The file contents.
     * @param {module:api/ExcelWorkbooksApi~uploadExcelWorkbookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExcelWorkbook}
     */
    this.uploadExcelWorkbook = function(id, file, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadExcelWorkbook");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadExcelWorkbook");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ExcelWorkbook;

      return this.apiClient.callApi(
        '/ExcelWorkbooks({Id})/Model.Upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
