/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataSource', 'model/DataSourceCheckResult', 'model/ItemPolicy', 'model/ODataAllowedActions', 'model/ODataDataSources', 'model/ODataDependentItems', 'model/ODataProperties', 'model/ODataQueryFields', 'model/OdataError', 'model/Property', 'model/QueryFieldsRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataSource'), require('../model/DataSourceCheckResult'), require('../model/ItemPolicy'), require('../model/ODataAllowedActions'), require('../model/ODataDataSources'), require('../model/ODataDependentItems'), require('../model/ODataProperties'), require('../model/ODataQueryFields'), require('../model/OdataError'), require('../model/Property'), require('../model/QueryFieldsRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.PowerBiReportServerRestApi) {
      root.PowerBiReportServerRestApi = {};
    }
    root.PowerBiReportServerRestApi.DataSourcesApi = factory(root.PowerBiReportServerRestApi.ApiClient, root.PowerBiReportServerRestApi.DataSource, root.PowerBiReportServerRestApi.DataSourceCheckResult, root.PowerBiReportServerRestApi.ItemPolicy, root.PowerBiReportServerRestApi.ODataAllowedActions, root.PowerBiReportServerRestApi.ODataDataSources, root.PowerBiReportServerRestApi.ODataDependentItems, root.PowerBiReportServerRestApi.ODataProperties, root.PowerBiReportServerRestApi.ODataQueryFields, root.PowerBiReportServerRestApi.OdataError, root.PowerBiReportServerRestApi.Property, root.PowerBiReportServerRestApi.QueryFieldsRequest);
  }
}(this, function(ApiClient, DataSource, DataSourceCheckResult, ItemPolicy, ODataAllowedActions, ODataDataSources, ODataDependentItems, ODataProperties, ODataQueryFields, OdataError, Property, QueryFieldsRequest) {
  'use strict';

  /**
   * DataSources service.
   * @module api/DataSourcesApi
   * @version 2.0
   */

  /**
   * Constructs a new DataSourcesApi. 
   * @alias module:api/DataSourcesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addDataSource operation.
     * @callback module:api/DataSourcesApi~addDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new DataSource CatalogItem.
     * @param {module:model/DataSource} dataSource The definition of the new DataSource CatalogItem.
     * @param {module:api/DataSourcesApi~addDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSource}
     */
    this.addDataSource = function(dataSource, callback) {
      var postBody = dataSource;

      // verify the required parameter 'dataSource' is set
      if (dataSource === undefined || dataSource === null) {
        throw new Error("Missing the required parameter 'dataSource' when calling addDataSource");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSource;

      return this.apiClient.callApi(
        '/DataSources', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkExistingDataSourceConnection operation.
     * @callback module:api/DataSourcesApi~checkExistingDataSourceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceCheckResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests the connection for a data source. This method supports the testing of published data sources that are used by reports and shared data sources
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSourcesApi~checkExistingDataSourceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceCheckResult}
     */
    this.checkExistingDataSourceConnection = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling checkExistingDataSourceConnection");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSourceCheckResult;

      return this.apiClient.callApi(
        '/DataSources({Id})/Model.CheckConnection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkNewDataSourceConnection operation.
     * @callback module:api/DataSourcesApi~checkNewDataSourceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceCheckResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests the connection for a data source. This method supports the direct testing of the unsaved data source.
     * @param {module:model/DataSource} dataSource The definition of data source.  Must contain connectionstring, data provider, and credentials to connect to the data source. In case of embedded data sources, Name will be null.
     * @param {module:api/DataSourcesApi~checkNewDataSourceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceCheckResult}
     */
    this.checkNewDataSourceConnection = function(dataSource, callback) {
      var postBody = dataSource;

      // verify the required parameter 'dataSource' is set
      if (dataSource === undefined || dataSource === null) {
        throw new Error("Missing the required parameter 'dataSource' when calling checkNewDataSourceConnection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSourceCheckResult;

      return this.apiClient.callApi(
        '/DataSources/Model.CheckConnection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataSource operation.
     * @callback module:api/DataSourcesApi~deleteDataSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified DataSource.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSourcesApi~deleteDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDataSource = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDataSource");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSources({Id})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSource operation.
     * @callback module:api/DataSourcesApi~getDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a DataSource CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSourcesApi~getDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSource}
     */
    this.getDataSource = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSource");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSource;

      return this.apiClient.callApi(
        '/DataSources({Id})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSourceAllowedActions operation.
     * @callback module:api/DataSourcesApi~getDataSourceAllowedActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataAllowedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSourcesApi~getDataSourceAllowedActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataAllowedActions}
     */
    this.getDataSourceAllowedActions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSourceAllowedActions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataAllowedActions;

      return this.apiClient.callApi(
        '/DataSources({Id})/AllowedActions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSourceContent operation.
     * @callback module:api/DataSourcesApi~getDataSourceContentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content of the DataSource CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSourcesApi~getDataSourceContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getDataSourceContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSourceContent");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = File;

      return this.apiClient.callApi(
        '/DataSources({Id})/Content/$value', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSourceDependentItems operation.
     * @callback module:api/DataSourcesApi~getDataSourceDependentItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDependentItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of CatalogItems that reference the DataSource specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSourcesApi~getDataSourceDependentItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDependentItems}
     */
    this.getDataSourceDependentItems = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSourceDependentItems");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDependentItems;

      return this.apiClient.callApi(
        '/DataSources({Id})/DependentItems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSourcePolicies operation.
     * @callback module:api/DataSourcesApi~getDataSourcePoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ItemPolicies associated with the DataSource specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSourcesApi~getDataSourcePoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemPolicy>}
     */
    this.getDataSourcePolicies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSourcePolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ItemPolicy];

      return this.apiClient.callApi(
        '/DataSources({Id})/Policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSourceQueryFields operation.
     * @callback module:api/DataSourcesApi~getDataSourceQueryFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataQueryFields} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a dataset that contains the fields retrieved by the delivery query for a data-driven subscription.
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryFieldsRequest} opts.queryFieldsRequest 
     * @param {module:api/DataSourcesApi~getDataSourceQueryFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataQueryFields}
     */
    this.getDataSourceQueryFields = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['queryFieldsRequest'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataQueryFields;

      return this.apiClient.callApi(
        '/DataSources/Model.GetQueryFields', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSources operation.
     * @callback module:api/DataSourcesApi~getDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDataSources} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of DataSource CatalogItems.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {Number} opts.skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {String} opts.filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {String} opts.count Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {String} opts.orderBy Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {String} opts.select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {module:api/DataSourcesApi~getDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDataSources}
     */
    this.getDataSources = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$count': opts['count'],
        '$orderBy': opts['orderBy'],
        '$select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDataSources;

      return this.apiClient.callApi(
        '/DataSources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasourceProperties operation.
     * @callback module:api/DataSourcesApi~getDatasourcePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets DataSource Properties (takes list of property names to retrieve the values)
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.properties Names for the Properties to be returned.
     * @param {module:api/DataSourcesApi~getDatasourcePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataProperties}
     */
    this.getDatasourceProperties = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDatasourceProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'properties': {
          value: opts['properties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataProperties;

      return this.apiClient.callApi(
        '/DataSources({Id})/Properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDataSourcePolicies operation.
     * @callback module:api/DataSourcesApi~setDataSourcePoliciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces ItemPolicies associated with the DataSource specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ItemPolicy>} itemPolicy The ItemPolicy definitions that will be replaced.
     * @param {module:api/DataSourcesApi~setDataSourcePoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDataSourcePolicies = function(id, itemPolicy, callback) {
      var postBody = itemPolicy;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setDataSourcePolicies");
      }

      // verify the required parameter 'itemPolicy' is set
      if (itemPolicy === undefined || itemPolicy === null) {
        throw new Error("Missing the required parameter 'itemPolicy' when calling setDataSourcePolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSources({Id})/Policies', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataSource operation.
     * @callback module:api/DataSourcesApi~updateDataSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the DataSource CatalogItem specified by the Id using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/DataSource} dataSource Definition of the DataSource item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {module:api/DataSourcesApi~updateDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDataSource = function(id, dataSource, callback) {
      var postBody = dataSource;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDataSource");
      }

      // verify the required parameter 'dataSource' is set
      if (dataSource === undefined || dataSource === null) {
        throw new Error("Missing the required parameter 'dataSource' when calling updateDataSource");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSources({Id})', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDatasourceProperties operation.
     * @callback module:api/DataSourcesApi~updateDatasourcePropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the DataSource Properties included in the given list.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/Property>} properties The Properties that will be updated.
     * @param {module:api/DataSourcesApi~updateDatasourcePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDatasourceProperties = function(id, properties, callback) {
      var postBody = properties;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDatasourceProperties");
      }

      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling updateDatasourceProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSources({Id})/Properties', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDataSource operation.
     * @callback module:api/DataSourcesApi~uploadDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Does an efficient binary upload of a new or existing DataSource CatalogItem from a multipart/form-data request. Use of this API is recommended for files larger than 25 MB in size.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {File} file The file contents.
     * @param {module:api/DataSourcesApi~uploadDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSource}
     */
    this.uploadDataSource = function(id, file, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadDataSource");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadDataSource");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = DataSource;

      return this.apiClient.callApi(
        '/DataSources({Id})/Model.Upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
