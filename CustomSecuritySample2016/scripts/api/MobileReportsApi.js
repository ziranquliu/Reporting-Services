/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Comment', 'model/ItemPolicy', 'model/MobileReport', 'model/ODataAllowedActions', 'model/ODataComments', 'model/ODataMobileReport', 'model/ODataProperties', 'model/OdataError', 'model/Property'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Comment'), require('../model/ItemPolicy'), require('../model/MobileReport'), require('../model/ODataAllowedActions'), require('../model/ODataComments'), require('../model/ODataMobileReport'), require('../model/ODataProperties'), require('../model/OdataError'), require('../model/Property'));
  } else {
    // Browser globals (root is window)
    if (!root.PowerBiReportServerRestApi) {
      root.PowerBiReportServerRestApi = {};
    }
    root.PowerBiReportServerRestApi.MobileReportsApi = factory(root.PowerBiReportServerRestApi.ApiClient, root.PowerBiReportServerRestApi.Comment, root.PowerBiReportServerRestApi.ItemPolicy, root.PowerBiReportServerRestApi.MobileReport, root.PowerBiReportServerRestApi.ODataAllowedActions, root.PowerBiReportServerRestApi.ODataComments, root.PowerBiReportServerRestApi.ODataMobileReport, root.PowerBiReportServerRestApi.ODataProperties, root.PowerBiReportServerRestApi.OdataError, root.PowerBiReportServerRestApi.Property);
  }
}(this, function(ApiClient, Comment, ItemPolicy, MobileReport, ODataAllowedActions, ODataComments, ODataMobileReport, ODataProperties, OdataError, Property) {
  'use strict';

  /**
   * MobileReports service.
   * @module api/MobileReportsApi
   * @version 2.0
   */

  /**
   * Constructs a new MobileReportsApi. 
   * @alias module:api/MobileReportsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addMobileReport operation.
     * @callback module:api/MobileReportsApi~addMobileReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MobileReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new MobileReport item
     * @param {module:model/MobileReport} body The definition of the new MobileReport item.
     * @param {module:api/MobileReportsApi~addMobileReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MobileReport}
     */
    this.addMobileReport = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addMobileReport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MobileReport;

      return this.apiClient.callApi(
        '/MobileReports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addMobileReportComment operation.
     * @callback module:api/MobileReportsApi~addMobileReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Comment associated to the specified MobileReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/Comment} comment The Comment to be created
     * @param {module:api/MobileReportsApi~addMobileReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addMobileReportComment = function(id, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addMobileReportComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling addMobileReportComment");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMobileReport operation.
     * @callback module:api/MobileReportsApi~deleteMobileReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified MobileReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/MobileReportsApi~deleteMobileReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMobileReport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMobileReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/MobileReports({Id})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMobileReportComment operation.
     * @callback module:api/MobileReportsApi~deleteMobileReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Comment associated to the MobileReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:api/MobileReportsApi~deleteMobileReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMobileReportComment = function(id, commentId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMobileReportComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteMobileReportComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Comments({CommentId})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobileReport operation.
     * @callback module:api/MobileReportsApi~getMobileReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MobileReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch MobileReport item by Id or path property.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/MobileReportsApi~getMobileReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MobileReport}
     */
    this.getMobileReport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMobileReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MobileReport;

      return this.apiClient.callApi(
        '/MobileReports({Id})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobileReportAllowedActions operation.
     * @callback module:api/MobileReportsApi~getMobileReportAllowedActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataAllowedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/MobileReportsApi~getMobileReportAllowedActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataAllowedActions}
     */
    this.getMobileReportAllowedActions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMobileReportAllowedActions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataAllowedActions;

      return this.apiClient.callApi(
        '/MobileReports({Id})/AllowedActions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobileReportComments operation.
     * @callback module:api/MobileReportsApi~getMobileReportCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataComments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Comments for a MobileReport specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/MobileReportsApi~getMobileReportCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataComments}
     */
    this.getMobileReportComments = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMobileReportComments");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataComments;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobileReportContent operation.
     * @callback module:api/MobileReportsApi~getMobileReportContentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content of the specified MobileReport CatalogItem.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/MobileReportsApi~getMobileReportContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getMobileReportContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMobileReportContent");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = File;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Content/$value', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobileReportPolicies operation.
     * @callback module:api/MobileReportsApi~getMobileReportPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ItemPolicies associated with the MobileReport catalog item.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/MobileReportsApi~getMobileReportPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemPolicy>}
     */
    this.getMobileReportPolicies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMobileReportPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ItemPolicy];

      return this.apiClient.callApi(
        '/MobileReports({Id})/Policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobileReportProperties operation.
     * @callback module:api/MobileReportsApi~getMobileReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets MobileReport Properties (takes list of Property names to retrieve the values)
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.properties Names for the Properties to be returned.
     * @param {module:api/MobileReportsApi~getMobileReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataProperties}
     */
    this.getMobileReportProperties = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMobileReportProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'properties': {
          value: opts['properties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataProperties;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobileReports operation.
     * @callback module:api/MobileReportsApi~getMobileReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataMobileReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve array of MobileReport catalog items.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {Number} opts.skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {String} opts.filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {String} opts.count Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {module:api/MobileReportsApi~getMobileReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataMobileReport}
     */
    this.getMobileReports = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$count': opts['count'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataMobileReport;

      return this.apiClient.callApi(
        '/MobileReports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMobileReportPolicies operation.
     * @callback module:api/MobileReportsApi~setMobileReportPoliciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets ItemPolicies on the MobileReport item.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ItemPolicy>} mobileReports Array of ItemPolicies to set on the MobileReport CatalogItem.
     * @param {module:api/MobileReportsApi~setMobileReportPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setMobileReportPolicies = function(id, mobileReports, callback) {
      var postBody = mobileReports;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setMobileReportPolicies");
      }

      // verify the required parameter 'mobileReports' is set
      if (mobileReports === undefined || mobileReports === null) {
        throw new Error("Missing the required parameter 'mobileReports' when calling setMobileReportPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Policies', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMobileReport operation.
     * @callback module:api/MobileReportsApi~updateMobileReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MobileReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified MobileReport CatalogItem using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/MobileReport} body Definition of the MobileReport item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {module:api/MobileReportsApi~updateMobileReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MobileReport}
     */
    this.updateMobileReport = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMobileReport");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMobileReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MobileReport;

      return this.apiClient.callApi(
        '/MobileReports({Id})', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMobileReportComment operation.
     * @callback module:api/MobileReportsApi~updateMobileReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Comment specified by CommentId in the associated MobileReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:model/Comment} comment The Comment to be updated
     * @param {module:api/MobileReportsApi~updateMobileReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateMobileReportComment = function(id, commentId, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMobileReportComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updateMobileReportComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateMobileReportComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Comments({CommentId})', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMobileReportProperties operation.
     * @callback module:api/MobileReportsApi~updateMobileReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the MobileReport properties included in the given list.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/Property>} properties The Properties that will be updated.
     * @param {module:api/MobileReportsApi~updateMobileReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateMobileReportProperties = function(id, properties, callback) {
      var postBody = properties;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMobileReportProperties");
      }

      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling updateMobileReportProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Properties', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMobileReport operation.
     * @callback module:api/MobileReportsApi~uploadMobileReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MobileReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Does an efficient binary upload of a new or existing MobileReport CatalogItem from a multipart/form-data request. Use of this API is recommended for files larger than 25 MB in size.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {File} file The file contents.
     * @param {module:api/MobileReportsApi~uploadMobileReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MobileReport}
     */
    this.uploadMobileReport = function(id, file, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadMobileReport");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadMobileReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = MobileReport;

      return this.apiClient.callApi(
        '/MobileReports({Id})/Model.Upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
