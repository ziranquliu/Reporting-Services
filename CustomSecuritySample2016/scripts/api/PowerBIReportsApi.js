/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Comment', 'model/DataModelRoleAssignment', 'model/DataSource', 'model/DataSourceCheckResult', 'model/ItemPolicy', 'model/ODataAllowedActions', 'model/ODataCacheRefreshPlans', 'model/ODataComments', 'model/ODataDataModelRoleAssignments', 'model/ODataDataModelRoles', 'model/ODataDataSources', 'model/ODataPowerBIReports', 'model/ODataProperties', 'model/OdataError', 'model/PowerBIReport', 'model/Property'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Comment'), require('../model/DataModelRoleAssignment'), require('../model/DataSource'), require('../model/DataSourceCheckResult'), require('../model/ItemPolicy'), require('../model/ODataAllowedActions'), require('../model/ODataCacheRefreshPlans'), require('../model/ODataComments'), require('../model/ODataDataModelRoleAssignments'), require('../model/ODataDataModelRoles'), require('../model/ODataDataSources'), require('../model/ODataPowerBIReports'), require('../model/ODataProperties'), require('../model/OdataError'), require('../model/PowerBIReport'), require('../model/Property'));
  } else {
    // Browser globals (root is window)
    if (!root.PowerBiReportServerRestApi) {
      root.PowerBiReportServerRestApi = {};
    }
    root.PowerBiReportServerRestApi.PowerBIReportsApi = factory(root.PowerBiReportServerRestApi.ApiClient, root.PowerBiReportServerRestApi.Comment, root.PowerBiReportServerRestApi.DataModelRoleAssignment, root.PowerBiReportServerRestApi.DataSource, root.PowerBiReportServerRestApi.DataSourceCheckResult, root.PowerBiReportServerRestApi.ItemPolicy, root.PowerBiReportServerRestApi.ODataAllowedActions, root.PowerBiReportServerRestApi.ODataCacheRefreshPlans, root.PowerBiReportServerRestApi.ODataComments, root.PowerBiReportServerRestApi.ODataDataModelRoleAssignments, root.PowerBiReportServerRestApi.ODataDataModelRoles, root.PowerBiReportServerRestApi.ODataDataSources, root.PowerBiReportServerRestApi.ODataPowerBIReports, root.PowerBiReportServerRestApi.ODataProperties, root.PowerBiReportServerRestApi.OdataError, root.PowerBiReportServerRestApi.PowerBIReport, root.PowerBiReportServerRestApi.Property);
  }
}(this, function(ApiClient, Comment, DataModelRoleAssignment, DataSource, DataSourceCheckResult, ItemPolicy, ODataAllowedActions, ODataCacheRefreshPlans, ODataComments, ODataDataModelRoleAssignments, ODataDataModelRoles, ODataDataSources, ODataPowerBIReports, ODataProperties, OdataError, PowerBIReport, Property) {
  'use strict';

  /**
   * PowerBIReports service.
   * @module api/PowerBIReportsApi
   * @version 2.0
   */

  /**
   * Constructs a new PowerBIReportsApi. 
   * @alias module:api/PowerBIReportsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPowerBIReport operation.
     * @callback module:api/PowerBIReportsApi~addPowerBIReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerBIReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new PowerBIReport CatalogItem.
     * @param {module:model/PowerBIReport} powerBIReport The definition of the new PowerBIReport CatalogItem.
     * @param {module:api/PowerBIReportsApi~addPowerBIReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerBIReport}
     */
    this.addPowerBIReport = function(powerBIReport, callback) {
      var postBody = powerBIReport;

      // verify the required parameter 'powerBIReport' is set
      if (powerBIReport === undefined || powerBIReport === null) {
        throw new Error("Missing the required parameter 'powerBIReport' when calling addPowerBIReport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PowerBIReport;

      return this.apiClient.callApi(
        '/PowerBIReports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPowerBIReportComment operation.
     * @callback module:api/PowerBIReportsApi~addPowerBIReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Comment associated to the specified PowerBIReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/Comment} comment The Comment to be created
     * @param {module:api/PowerBIReportsApi~addPowerBIReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPowerBIReportComment = function(id, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addPowerBIReportComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling addPowerBIReportComment");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkPowerBIReportDataSourceConnection operation.
     * @callback module:api/PowerBIReportsApi~checkPowerBIReportDataSourceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceCheckResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the status of the specified DataSource connection.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} dataSourceName The name of the DataSource to check.
     * @param {module:api/PowerBIReportsApi~checkPowerBIReportDataSourceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceCheckResult}
     */
    this.checkPowerBIReportDataSourceConnection = function(id, dataSourceName, callback) {
      var postBody = dataSourceName;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling checkPowerBIReportDataSourceConnection");
      }

      // verify the required parameter 'dataSourceName' is set
      if (dataSourceName === undefined || dataSourceName === null) {
        throw new Error("Missing the required parameter 'dataSourceName' when calling checkPowerBIReportDataSourceConnection");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSourceCheckResult;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Model.CheckDataSourceConnection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePowerBIReport operation.
     * @callback module:api/PowerBIReportsApi~deletePowerBIReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified PowerBIReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~deletePowerBIReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePowerBIReport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePowerBIReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePowerBIReportComment operation.
     * @callback module:api/PowerBIReportsApi~deletePowerBIReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Comment associated to the PowerBIReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:api/PowerBIReportsApi~deletePowerBIReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePowerBIReportComment = function(id, commentId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePowerBIReportComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deletePowerBIReportComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Comments({CommentId})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBICacheRefreshPlans operation.
     * @callback module:api/PowerBIReportsApi~getPowerBICacheRefreshPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataCacheRefreshPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the CacheRefreshPlans for a given Power BI Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBICacheRefreshPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataCacheRefreshPlans}
     */
    this.getPowerBICacheRefreshPlans = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBICacheRefreshPlans");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataCacheRefreshPlans;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/CacheRefreshPlans', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReport operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerBIReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a PowerBIReport CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerBIReport}
     */
    this.getPowerBIReport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PowerBIReport;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReportAllowedActions operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportAllowedActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataAllowedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportAllowedActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataAllowedActions}
     */
    this.getPowerBIReportAllowedActions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReportAllowedActions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataAllowedActions;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/AllowedActions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReportComments operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataComments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Comments for a PowerBIReport specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataComments}
     */
    this.getPowerBIReportComments = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReportComments");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataComments;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReportContent operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportContentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content of the specified PowerBIReport CatalogItem.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getPowerBIReportContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReportContent");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = File;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Content/$value', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReportDataModelRoleAssignments operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportDataModelRoleAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDataModelRoleAssignments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the data model role assignments that are associated with the specified PowerBIReport.
     * Added in January 2019 Release
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportDataModelRoleAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDataModelRoleAssignments}
     */
    this.getPowerBIReportDataModelRoleAssignments = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReportDataModelRoleAssignments");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDataModelRoleAssignments;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/DataModelRoleAssignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReportDataModelRoles operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportDataModelRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDataModelRoles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the data model roles that are associated with the specified PowerBIReport.
     * Added in January 2019 Release
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportDataModelRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDataModelRoles}
     */
    this.getPowerBIReportDataModelRoles = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReportDataModelRoles");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDataModelRoles;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/DataModelRoles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReportDataSources operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDataSources} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the DataSources that are associated with the specified PowerBIReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDataSources}
     */
    this.getPowerBIReportDataSources = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReportDataSources");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDataSources;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/DataSources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReportPolicies operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ItemPolicies associated with the specified PowerBIReport CatalogItem.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemPolicy>}
     */
    this.getPowerBIReportPolicies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReportPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ItemPolicy];

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReportProperties operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets PowerBIReports Properties (takes list of Property names to retrieve the values)
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.properties Names for the Properties to be returned.
     * @param {module:api/PowerBIReportsApi~getPowerBIReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataProperties}
     */
    this.getPowerBIReportProperties = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPowerBIReportProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'properties': {
          value: opts['properties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataProperties;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPowerBIReports operation.
     * @callback module:api/PowerBIReportsApi~getPowerBIReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataPowerBIReports} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of PowerBIReport CatalogItems.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {Number} opts.skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {String} opts.filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {String} opts.count Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {String} opts.orderBy Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {String} opts.select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {module:api/PowerBIReportsApi~getPowerBIReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataPowerBIReports}
     */
    this.getPowerBIReports = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$count': opts['count'],
        '$orderBy': opts['orderBy'],
        '$select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataPowerBIReports;

      return this.apiClient.callApi(
        '/PowerBIReports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replacePowerBIReportDataModelRoleAssignments operation.
     * @callback module:api/PowerBIReportsApi~replacePowerBIReportDataModelRoleAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the data model role assignments that are associated with the specified PowerBIReport.
     * Added in January 2019 Release
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/DataModelRoleAssignment>} dataModelRoleAssignments Updated data model role assignments associated with the specified PowerBIReport.
     * @param {module:api/PowerBIReportsApi~replacePowerBIReportDataModelRoleAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.replacePowerBIReportDataModelRoleAssignments = function(id, dataModelRoleAssignments, callback) {
      var postBody = dataModelRoleAssignments;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replacePowerBIReportDataModelRoleAssignments");
      }

      // verify the required parameter 'dataModelRoleAssignments' is set
      if (dataModelRoleAssignments === undefined || dataModelRoleAssignments === null) {
        throw new Error("Missing the required parameter 'dataModelRoleAssignments' when calling replacePowerBIReportDataModelRoleAssignments");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/DataModelRoleAssignments', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setPowerBIReportPolicies operation.
     * @callback module:api/PowerBIReportsApi~setPowerBIReportPoliciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces ItemPolicies associated with the specified PowerBIReport item.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ItemPolicy>} itemPolicies The ItemPolicy definitions that will be replaced.
     * @param {module:api/PowerBIReportsApi~setPowerBIReportPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setPowerBIReportPolicies = function(id, itemPolicies, callback) {
      var postBody = itemPolicies;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setPowerBIReportPolicies");
      }

      // verify the required parameter 'itemPolicies' is set
      if (itemPolicies === undefined || itemPolicies === null) {
        throw new Error("Missing the required parameter 'itemPolicies' when calling setPowerBIReportPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Policies', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePowerBIReport operation.
     * @callback module:api/PowerBIReportsApi~updatePowerBIReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerBIReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified PowerBIReport CatalogItem using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/PowerBIReport} powerBIReport Definition of the PowerBIReport item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {module:api/PowerBIReportsApi~updatePowerBIReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerBIReport}
     */
    this.updatePowerBIReport = function(id, powerBIReport, callback) {
      var postBody = powerBIReport;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePowerBIReport");
      }

      // verify the required parameter 'powerBIReport' is set
      if (powerBIReport === undefined || powerBIReport === null) {
        throw new Error("Missing the required parameter 'powerBIReport' when calling updatePowerBIReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PowerBIReport;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePowerBIReportComment operation.
     * @callback module:api/PowerBIReportsApi~updatePowerBIReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Comment specified by CommentId in the associated PowerBIReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:model/Comment} comment The Comment to be updated
     * @param {module:api/PowerBIReportsApi~updatePowerBIReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePowerBIReportComment = function(id, commentId, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePowerBIReportComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updatePowerBIReportComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updatePowerBIReportComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Comments({CommentId})', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePowerBIReportDataSource operation.
     * @callback module:api/PowerBIReportsApi~updatePowerBIReportDataSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the DataSource definition associated with the PowerBIReport specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/DataSource>} dataSources Updated definition for the DataSource associated with the PowerBIReport specified by the Id.
     * @param {module:api/PowerBIReportsApi~updatePowerBIReportDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePowerBIReportDataSource = function(id, dataSources, callback) {
      var postBody = dataSources;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePowerBIReportDataSource");
      }

      // verify the required parameter 'dataSources' is set
      if (dataSources === undefined || dataSources === null) {
        throw new Error("Missing the required parameter 'dataSources' when calling updatePowerBIReportDataSource");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/DataSources', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePowerBIReportProperties operation.
     * @callback module:api/PowerBIReportsApi~updatePowerBIReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the PowerBIReport Properties included in the given list.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/Property>} properties The Properties that will be updated.
     * @param {module:api/PowerBIReportsApi~updatePowerBIReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePowerBIReportProperties = function(id, properties, callback) {
      var postBody = properties;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePowerBIReportProperties");
      }

      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling updatePowerBIReportProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Properties', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadPowerBIReport operation.
     * @callback module:api/PowerBIReportsApi~uploadPowerBIReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerBIReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Does an efficient binary upload of a new or existing PowerBIReport CatalogItem from a multipart/form-data request. Use of this API is recommended for files larger than 25 MB in size.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {File} file The file contents.
     * @param {module:api/PowerBIReportsApi~uploadPowerBIReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerBIReport}
     */
    this.uploadPowerBIReport = function(id, file, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadPowerBIReport");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadPowerBIReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PowerBIReport;

      return this.apiClient.callApi(
        '/PowerBIReports({Id})/Model.Upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
