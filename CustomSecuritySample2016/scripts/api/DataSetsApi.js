/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CacheOptions', 'model/DataSet', 'model/DataSetAggregateValueParameters', 'model/DataSetData', 'model/DataSetDataParameters', 'model/DataSetSchema', 'model/DataSource', 'model/ItemPolicy', 'model/ODataAllowedActions', 'model/ODataCacheRefreshPlans', 'model/ODataDataSetRows', 'model/ODataDataSets', 'model/ODataDependentItems', 'model/ODataProperties', 'model/ODataReportParameterDefinitions', 'model/OdataError', 'model/Property', 'model/ReportParameterDefinitionPatch'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CacheOptions'), require('../model/DataSet'), require('../model/DataSetAggregateValueParameters'), require('../model/DataSetData'), require('../model/DataSetDataParameters'), require('../model/DataSetSchema'), require('../model/DataSource'), require('../model/ItemPolicy'), require('../model/ODataAllowedActions'), require('../model/ODataCacheRefreshPlans'), require('../model/ODataDataSetRows'), require('../model/ODataDataSets'), require('../model/ODataDependentItems'), require('../model/ODataProperties'), require('../model/ODataReportParameterDefinitions'), require('../model/OdataError'), require('../model/Property'), require('../model/ReportParameterDefinitionPatch'));
  } else {
    // Browser globals (root is window)
    if (!root.PowerBiReportServerRestApi) {
      root.PowerBiReportServerRestApi = {};
    }
    root.PowerBiReportServerRestApi.DataSetsApi = factory(root.PowerBiReportServerRestApi.ApiClient, root.PowerBiReportServerRestApi.CacheOptions, root.PowerBiReportServerRestApi.DataSet, root.PowerBiReportServerRestApi.DataSetAggregateValueParameters, root.PowerBiReportServerRestApi.DataSetData, root.PowerBiReportServerRestApi.DataSetDataParameters, root.PowerBiReportServerRestApi.DataSetSchema, root.PowerBiReportServerRestApi.DataSource, root.PowerBiReportServerRestApi.ItemPolicy, root.PowerBiReportServerRestApi.ODataAllowedActions, root.PowerBiReportServerRestApi.ODataCacheRefreshPlans, root.PowerBiReportServerRestApi.ODataDataSetRows, root.PowerBiReportServerRestApi.ODataDataSets, root.PowerBiReportServerRestApi.ODataDependentItems, root.PowerBiReportServerRestApi.ODataProperties, root.PowerBiReportServerRestApi.ODataReportParameterDefinitions, root.PowerBiReportServerRestApi.OdataError, root.PowerBiReportServerRestApi.Property, root.PowerBiReportServerRestApi.ReportParameterDefinitionPatch);
  }
}(this, function(ApiClient, CacheOptions, DataSet, DataSetAggregateValueParameters, DataSetData, DataSetDataParameters, DataSetSchema, DataSource, ItemPolicy, ODataAllowedActions, ODataCacheRefreshPlans, ODataDataSetRows, ODataDataSets, ODataDependentItems, ODataProperties, ODataReportParameterDefinitions, OdataError, Property, ReportParameterDefinitionPatch) {
  'use strict';

  /**
   * DataSets service.
   * @module api/DataSetsApi
   * @version 2.0
   */

  /**
   * Constructs a new DataSetsApi. 
   * @alias module:api/DataSetsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addDataSet operation.
     * @callback module:api/DataSetsApi~addDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new DataSet CatalogItem.
     * @param {module:model/DataSet} dataSet The definition of the new DataSet CatalogItem.
     * @param {module:api/DataSetsApi~addDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSet}
     */
    this.addDataSet = function(dataSet, callback) {
      var postBody = dataSet;

      // verify the required parameter 'dataSet' is set
      if (dataSet === undefined || dataSet === null) {
        throw new Error("Missing the required parameter 'dataSet' when calling addDataSet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSet;

      return this.apiClient.callApi(
        '/DataSets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataSet operation.
     * @callback module:api/DataSetsApi~deleteDataSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~deleteDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDataSet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDataSet");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSets({Id})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSet operation.
     * @callback module:api/DataSetsApi~getDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a DataSet CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSet}
     */
    this.getDataSet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSet");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSet;

      return this.apiClient.callApi(
        '/DataSets({Id})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetAggregatedValue operation.
     * @callback module:api/DataSetsApi~getDataSetAggregatedValueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the value for the specified DataSet column using the given aggregation type.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} columnName The name of the DataSet column to aggregate the value for.
     * @param {String} aggregation The type of aggregation to use on the specified column. Values come from the KpiSharedDataItemAggregation enum.
     * @param {Object} opts Optional parameters
     * @param {module:model/DataSetAggregateValueParameters} opts.parameters An array of DataSet parameters to use when executing the query.
     * @param {module:api/DataSetsApi~getDataSetAggregatedValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getDataSetAggregatedValue = function(id, columnName, aggregation, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameters'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetAggregatedValue");
      }

      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling getDataSetAggregatedValue");
      }

      // verify the required parameter 'aggregation' is set
      if (aggregation === undefined || aggregation === null) {
        throw new Error("Missing the required parameter 'aggregation' when calling getDataSetAggregatedValue");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
        'ColumnName': columnName,
        'Aggregation': aggregation,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/DataSets({Id})/Model.GetAggregatedValue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetAllowedActions operation.
     * @callback module:api/DataSetsApi~getDataSetAllowedActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataAllowedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetAllowedActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataAllowedActions}
     */
    this.getDataSetAllowedActions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetAllowedActions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataAllowedActions;

      return this.apiClient.callApi(
        '/DataSets({Id})/AllowedActions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetCacheOptions operation.
     * @callback module:api/DataSetsApi~getDataSetCacheOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CacheOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the CacheOption's content for a given DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetCacheOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CacheOptions}
     */
    this.getDataSetCacheOptions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetCacheOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CacheOptions;

      return this.apiClient.callApi(
        '/DataSets({Id})/CacheOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetCacheRefreshPlans operation.
     * @callback module:api/DataSetsApi~getDataSetCacheRefreshPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataCacheRefreshPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the CacheRefreshPlans for a given DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetCacheRefreshPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataCacheRefreshPlans}
     */
    this.getDataSetCacheRefreshPlans = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetCacheRefreshPlans");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataCacheRefreshPlans;

      return this.apiClient.callApi(
        '/DataSets({Id})/CacheRefreshPlans', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetContent operation.
     * @callback module:api/DataSetsApi~getDataSetContentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content of the specified DataSet CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getDataSetContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetContent");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = File;

      return this.apiClient.callApi(
        '/DataSets({Id})/Content/$value', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetData operation.
     * @callback module:api/DataSetsApi~getDataSetDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSetData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the query results for the specified DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxRows Specifies the maximum number of rows to return from the query.
     * @param {module:model/DataSetDataParameters} opts.parameters An array of DataSet parameters to use when executing the query.
     * @param {module:api/DataSetsApi~getDataSetDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSetData}
     */
    this.getDataSetData = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['parameters'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetData");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
        'MaxRows': opts['maxRows'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSetData;

      return this.apiClient.callApi(
        '/DataSets({Id})/Model.GetData', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetDataSource operation.
     * @callback module:api/DataSetsApi~getDataSetDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the DataSource specified by the DataSourceId that is associated with the DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} dataSourceId The Id of the DataSource associated with the DataSet.
     * @param {module:api/DataSetsApi~getDataSetDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSource}
     */
    this.getDataSetDataSource = function(id, dataSourceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetDataSource");
      }

      // verify the required parameter 'dataSourceId' is set
      if (dataSourceId === undefined || dataSourceId === null) {
        throw new Error("Missing the required parameter 'dataSourceId' when calling getDataSetDataSource");
      }


      var pathParams = {
        'Id': id,
        'DataSourceId': dataSourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSource;

      return this.apiClient.callApi(
        '/DataSets({Id})/DataSources({DataSourceId})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetDataSources operation.
     * @callback module:api/DataSetsApi~getDataSetDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataSource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the DataSources associated with the specified DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataSource>}
     */
    this.getDataSetDataSources = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetDataSources");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DataSource];

      return this.apiClient.callApi(
        '/DataSets({Id})/DataSources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetDependentItems operation.
     * @callback module:api/DataSetsApi~getDataSetDependentItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDependentItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of CatalogItems that reference the specified DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetDependentItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDependentItems}
     */
    this.getDataSetDependentItems = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetDependentItems");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDependentItems;

      return this.apiClient.callApi(
        '/DataSets({Id})/DependentItems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetODataFeed operation.
     * @callback module:api/DataSetsApi~getDataSetODataFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDataSetRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the data for a given DataSet. With the exception of the ID property, columns that are defined in the DataSet will be returned as open or dynamic types in the result.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetODataFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDataSetRows}
     */
    this.getDataSetODataFeed = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetODataFeed");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDataSetRows;

      return this.apiClient.callApi(
        '/DataSets({Id})/Data', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetParameterDefinitions operation.
     * @callback module:api/DataSetsApi~getDataSetParameterDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataReportParameterDefinitions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the ParameterDefinitions associated with the specified DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetParameterDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataReportParameterDefinitions}
     */
    this.getDataSetParameterDefinitions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetParameterDefinitions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataReportParameterDefinitions;

      return this.apiClient.callApi(
        '/DataSets({Id})/ParameterDefinitions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetPolicies operation.
     * @callback module:api/DataSetsApi~getDataSetPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ItemPolicies associated with the specified DataSet CatalogItem.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemPolicy>}
     */
    this.getDataSetPolicies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ItemPolicy];

      return this.apiClient.callApi(
        '/DataSets({Id})/Policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetSchema operation.
     * @callback module:api/DataSetsApi~getDataSetSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSetSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the schema for the specified DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/DataSetsApi~getDataSetSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSetSchema}
     */
    this.getDataSetSchema = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataSetSchema");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSetSchema;

      return this.apiClient.callApi(
        '/DataSets({Id})/Model.GetSchema', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSets operation.
     * @callback module:api/DataSetsApi~getDataSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDataSets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of DataSet CatalogItems.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {Number} opts.skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {String} opts.filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {String} opts.count Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {String} opts.orderBy Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {String} opts.select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {module:api/DataSetsApi~getDataSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDataSets}
     */
    this.getDataSets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$count': opts['count'],
        '$orderBy': opts['orderBy'],
        '$select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDataSets;

      return this.apiClient.callApi(
        '/DataSets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetProperties operation.
     * @callback module:api/DataSetsApi~getDatasetPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets DataSet Properties (takes list of property names to retrieve the values)
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.properties Names for the Properties to be returned.
     * @param {module:api/DataSetsApi~getDatasetPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataProperties}
     */
    this.getDatasetProperties = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDatasetProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'properties': {
          value: opts['properties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataProperties;

      return this.apiClient.callApi(
        '/DataSets({Id})/Properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDataSetCacheOptions operation.
     * @callback module:api/DataSetsApi~setDataSetCacheOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the CacheOption's content for a given DataSet using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/CacheOptions} cacheOptions Updated definition for the CacheOption's content associated with the given DataSet.
     * @param {module:api/DataSetsApi~setDataSetCacheOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDataSetCacheOptions = function(id, cacheOptions, callback) {
      var postBody = cacheOptions;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setDataSetCacheOptions");
      }

      // verify the required parameter 'cacheOptions' is set
      if (cacheOptions === undefined || cacheOptions === null) {
        throw new Error("Missing the required parameter 'cacheOptions' when calling setDataSetCacheOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSets({Id})/CacheOptions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDataSetDataSource operation.
     * @callback module:api/DataSetsApi~setDataSetDataSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the DataSource specified by the DataSourceId that is associated with the DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} dataSourceId The Id of the DataSource associated with the DataSet.
     * @param {module:model/DataSource} dataSource Updated definition for the DataSource associated with the DataSet.
     * @param {module:api/DataSetsApi~setDataSetDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDataSetDataSource = function(id, dataSourceId, dataSource, callback) {
      var postBody = dataSource;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setDataSetDataSource");
      }

      // verify the required parameter 'dataSourceId' is set
      if (dataSourceId === undefined || dataSourceId === null) {
        throw new Error("Missing the required parameter 'dataSourceId' when calling setDataSetDataSource");
      }

      // verify the required parameter 'dataSource' is set
      if (dataSource === undefined || dataSource === null) {
        throw new Error("Missing the required parameter 'dataSource' when calling setDataSetDataSource");
      }


      var pathParams = {
        'Id': id,
        'DataSourceId': dataSourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSets({Id})/DataSources({DataSourceId})', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDataSetDataSources operation.
     * @callback module:api/DataSetsApi~setDataSetDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the DataSource definition associated with the specified DataSet.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/DataSource} dataSource Updated definition for the DataSource associated with the specified DataSet CatalogItem.
     * @param {module:api/DataSetsApi~setDataSetDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDataSetDataSources = function(id, dataSource, callback) {
      var postBody = dataSource;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setDataSetDataSources");
      }

      // verify the required parameter 'dataSource' is set
      if (dataSource === undefined || dataSource === null) {
        throw new Error("Missing the required parameter 'dataSource' when calling setDataSetDataSources");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSets({Id})/DataSources', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDataSetPolicies operation.
     * @callback module:api/DataSetsApi~setDataSetPoliciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces ItemPolicies associated with the specified DataSet item.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ItemPolicy>} itemPolicy The ItemPolicy definitions that will be replaced.
     * @param {module:api/DataSetsApi~setDataSetPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDataSetPolicies = function(id, itemPolicy, callback) {
      var postBody = itemPolicy;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setDataSetPolicies");
      }

      // verify the required parameter 'itemPolicy' is set
      if (itemPolicy === undefined || itemPolicy === null) {
        throw new Error("Missing the required parameter 'itemPolicy' when calling setDataSetPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSets({Id})/Policies', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataSet operation.
     * @callback module:api/DataSetsApi~updateDataSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified DataSet CatalogItem using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/DataSet} dataSet Definition of the DataSet item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {module:api/DataSetsApi~updateDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDataSet = function(id, dataSet, callback) {
      var postBody = dataSet;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDataSet");
      }

      // verify the required parameter 'dataSet' is set
      if (dataSet === undefined || dataSet === null) {
        throw new Error("Missing the required parameter 'dataSet' when calling updateDataSet");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSets({Id})', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataSetParameterDefinitions operation.
     * @callback module:api/DataSetsApi~updateDataSetParameterDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the ParameterDefinitions associated with the DataSet specified.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ReportParameterDefinitionPatch>} parameterDefinitions Updated definitions for the ParameterDefinitions associated with the DataSet, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property valueswill be left unchanged.
     * @param {module:api/DataSetsApi~updateDataSetParameterDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDataSetParameterDefinitions = function(id, parameterDefinitions, callback) {
      var postBody = parameterDefinitions;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDataSetParameterDefinitions");
      }

      // verify the required parameter 'parameterDefinitions' is set
      if (parameterDefinitions === undefined || parameterDefinitions === null) {
        throw new Error("Missing the required parameter 'parameterDefinitions' when calling updateDataSetParameterDefinitions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSets({Id})/ParameterDefinitions', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDatasetProperties operation.
     * @callback module:api/DataSetsApi~updateDatasetPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the DataSet Properties included in the given list.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/Property>} properties The Properties that will be updated.
     * @param {module:api/DataSetsApi~updateDatasetPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDatasetProperties = function(id, properties, callback) {
      var postBody = properties;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDatasetProperties");
      }

      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling updateDatasetProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/DataSets({Id})/Properties', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDataSet operation.
     * @callback module:api/DataSetsApi~uploadDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Does an efficient binary upload of a new or existing DataSet CatalogItem from a multipart/form-data request. Use of this API is recommended for files larger than 25 MB in size.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {File} file The file contents.
     * @param {module:api/DataSetsApi~uploadDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSet}
     */
    this.uploadDataSet = function(id, file, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadDataSet");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadDataSet");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = DataSet;

      return this.apiClient.callApi(
        '/DataSets({Id})/Model.Upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
