/*
 * Power BI Report Server REST API
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CacheRefreshPlan', 'model/ODataSubscriptionHistory', 'model/OdataError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CacheRefreshPlan'), require('../model/ODataSubscriptionHistory'), require('../model/OdataError'));
  } else {
    // Browser globals (root is window)
    if (!root.PowerBiReportServerRestApi) {
      root.PowerBiReportServerRestApi = {};
    }
    root.PowerBiReportServerRestApi.CacheRefreshPlansApi = factory(root.PowerBiReportServerRestApi.ApiClient, root.PowerBiReportServerRestApi.CacheRefreshPlan, root.PowerBiReportServerRestApi.ODataSubscriptionHistory, root.PowerBiReportServerRestApi.OdataError);
  }
}(this, function(ApiClient, CacheRefreshPlan, ODataSubscriptionHistory, OdataError) {
  'use strict';

  /**
   * CacheRefreshPlans service.
   * @module api/CacheRefreshPlansApi
   * @version 2.0
   */

  /**
   * Constructs a new CacheRefreshPlansApi. 
   * @alias module:api/CacheRefreshPlansApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCacheRefreshPlan operation.
     * @callback module:api/CacheRefreshPlansApi~addCacheRefreshPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CacheRefreshPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new CacheRefreshPlan item.
     * @param {module:model/CacheRefreshPlan} cacheRefreshPlan The definition of the new CacheRefreshPlan item.
     * @param {module:api/CacheRefreshPlansApi~addCacheRefreshPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CacheRefreshPlan}
     */
    this.addCacheRefreshPlan = function(cacheRefreshPlan, callback) {
      var postBody = cacheRefreshPlan;

      // verify the required parameter 'cacheRefreshPlan' is set
      if (cacheRefreshPlan === undefined || cacheRefreshPlan === null) {
        throw new Error("Missing the required parameter 'cacheRefreshPlan' when calling addCacheRefreshPlan");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CacheRefreshPlan;

      return this.apiClient.callApi(
        '/CacheRefreshPlans', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCacheRefreshPlan operation.
     * @callback module:api/CacheRefreshPlansApi~deleteCacheRefreshPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified CacheRefreshPlan.
     * @param {String} id The GUID that uniquely identifies the CacheRefreshPlan. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {module:api/CacheRefreshPlansApi~deleteCacheRefreshPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCacheRefreshPlan = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCacheRefreshPlan");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CacheRefreshPlans({Id})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the executeCacheRefreshPlan operation.
     * @callback module:api/CacheRefreshPlansApi~executeCacheRefreshPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes given CacheRefreshPlan immediately.
     * @param {String} id The GUID that uniquely identifies the CacheRefreshPlan. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {module:api/CacheRefreshPlansApi~executeCacheRefreshPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.executeCacheRefreshPlan = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling executeCacheRefreshPlan");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CacheRefreshPlans({Id})/Model.Execute', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCacheRefreshPlan operation.
     * @callback module:api/CacheRefreshPlansApi~getCacheRefreshPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CacheRefreshPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a CacheRefreshPlan item specified by the Id.
     * @param {String} id The GUID that uniquely identifies the CacheRefreshPlan. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {module:api/CacheRefreshPlansApi~getCacheRefreshPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CacheRefreshPlan}
     */
    this.getCacheRefreshPlan = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCacheRefreshPlan");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CacheRefreshPlan;

      return this.apiClient.callApi(
        '/CacheRefreshPlans({Id})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCacheRefreshPlanHistory operation.
     * @callback module:api/CacheRefreshPlansApi~getCacheRefreshPlanHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataSubscriptionHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of history or execution records for the specified cache refresh plan.
     * @param {String} id The GUID that uniquely identifies the CacheRefreshPlan. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {module:api/CacheRefreshPlansApi~getCacheRefreshPlanHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataSubscriptionHistory}
     */
    this.getCacheRefreshPlanHistory = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCacheRefreshPlanHistory");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataSubscriptionHistory;

      return this.apiClient.callApi(
        '/CacheRefreshPlans({Id})/History', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCacheRefreshPlan operation.
     * @callback module:api/CacheRefreshPlansApi~setCacheRefreshPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CacheRefreshPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the specified CacheRefreshPlan item using the provided definition.
     * @param {String} id The GUID that uniquely identifies the CacheRefreshPlan. GUID example: 01234567-89ab-cdef-0123-456789abcdef
     * @param {module:model/CacheRefreshPlan} cacheRefreshPlan Definition of the CacheRefreshPlan item that updates the current item on the server.
     * @param {module:api/CacheRefreshPlansApi~setCacheRefreshPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CacheRefreshPlan}
     */
    this.setCacheRefreshPlan = function(id, cacheRefreshPlan, callback) {
      var postBody = cacheRefreshPlan;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setCacheRefreshPlan");
      }

      // verify the required parameter 'cacheRefreshPlan' is set
      if (cacheRefreshPlan === undefined || cacheRefreshPlan === null) {
        throw new Error("Missing the required parameter 'cacheRefreshPlan' when calling setCacheRefreshPlan");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CacheRefreshPlan;

      return this.apiClient.callApi(
        '/CacheRefreshPlans({Id})', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
