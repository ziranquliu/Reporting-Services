/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlServer2017ReportingServicesRestApi);
  }
}(this, function(expect, SqlServer2017ReportingServicesRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlServer2017ReportingServicesRestApi.DataSourcesApi();
  });

  describe('(package)', function() {
    describe('DataSourcesApi', function() {
      describe('addDataSource', function() {
        it('should call addDataSource successfully', function(done) {
          // TODO: uncomment, update parameter values for addDataSource call and complete the assertions
          /*
          var dataSource = new SqlServer2017ReportingServicesRestApi.DataSource();
          dataSource.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.name = "";
          dataSource.description = "";
          dataSource.path = "";
          dataSource.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          dataSource.hidden = false;
          dataSource.size = "0";
          dataSource.modifiedBy = "";
          dataSource.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.createdBy = "";
          dataSource.createdDate = 2017-04-13T15:51:04Z;
          dataSource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.contentType = "";
          dataSource.content = "";
          dataSource.isFavorite = false;
          dataSource.isEnabled = false;
          dataSource.connectionString = "";
          dataSource.dataSourceType = "";
          dataSource.isOriginalConnectionStringExpressionBased = false;
          dataSource.isConnectionStringOverridden = false;
          dataSource.credentialsByUser = new SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser();
          dataSource.credentialsByUser.displayText = "";
          dataSource.credentialsByUser.useAsWindowsCredentials = false;
          dataSource.credentialsInServer = new SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer();
          dataSource.credentialsInServer.userName = "";
          dataSource.credentialsInServer.password = "";
          dataSource.credentialsInServer.useAsWindowsCredentials = false;
          dataSource.credentialsInServer.impersonateAuthenticatedUser = false;
          dataSource.isReference = false;
          dataSource.subscriptions = new SqlServer2017ReportingServicesRestApi.Subscription();
          dataSource.subscriptions.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.subscriptions.owner = "";
          dataSource.subscriptions.isDataDriven = false;
          dataSource.subscriptions.description = "";
          dataSource.subscriptions.report = "";
          dataSource.subscriptions.isActive = false;
          dataSource.subscriptions.eventType = "";
          dataSource.subscriptions.scheduleDescription = "";
          dataSource.subscriptions.lastRunTime = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.lastStatus = "";
          dataSource.subscriptions.extensionSettings = new SqlServer2017ReportingServicesRestApi.ExtensionSettings();
          dataSource.subscriptions.extensionSettings.extension = "";
          dataSource.subscriptions.extensionSettings.parameterValues = new SqlServer2017ReportingServicesRestApi.ParameterValue();
          dataSource.subscriptions.extensionSettings.parameterValues.name = "";
          dataSource.subscriptions.extensionSettings.parameterValues.value = "";
          dataSource.subscriptions.extensionSettings.parameterValues.isValueFieldReference = false;
          dataSource.subscriptions.deliveryExtension = "";
          dataSource.subscriptions.localizedDeliveryExtensionName = "";
          dataSource.subscriptions.modifiedBy = "";
          dataSource.subscriptions.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.parameterValues = [new SqlServer2017ReportingServicesRestApi.ParameterValue()];
          dataSource.subscriptions.parameterValues[0].name = "";
          dataSource.subscriptions.parameterValues[0].value = "";
          dataSource.subscriptions.parameterValues[0].isValueFieldReference = false;

          instance.addDataSource(dataSource, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.connectionString).to.be.a('string');
            expect(data.connectionString).to.be("");
            expect(data.dataSourceType).to.be.a('string');
            expect(data.dataSourceType).to.be("");
            expect(data.isOriginalConnectionStringExpressionBased).to.be.a('boolean');
            expect(data.isOriginalConnectionStringExpressionBased).to.be(false);
            expect(data.isConnectionStringOverridden).to.be.a('boolean');
            expect(data.isConnectionStringOverridden).to.be(false);
            expect(data.credentialsByUser).to.be.a(SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser);
                  expect(data.credentialsByUser.displayText).to.be.a('string');
              expect(data.credentialsByUser.displayText).to.be("");
              expect(data.credentialsByUser.useAsWindowsCredentials).to.be.a('boolean');
              expect(data.credentialsByUser.useAsWindowsCredentials).to.be(false);
            expect(data.credentialsInServer).to.be.a(SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer);
                  expect(data.credentialsInServer.userName).to.be.a('string');
              expect(data.credentialsInServer.userName).to.be("");
              expect(data.credentialsInServer.password).to.be.a('string');
              expect(data.credentialsInServer.password).to.be("");
              expect(data.credentialsInServer.useAsWindowsCredentials).to.be.a('boolean');
              expect(data.credentialsInServer.useAsWindowsCredentials).to.be(false);
              expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be.a('boolean');
              expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be(false);
            expect(data.isReference).to.be.a('boolean');
            expect(data.isReference).to.be(false);
            expect(data.subscriptions).to.be.a(SqlServer2017ReportingServicesRestApi.Subscription);
                  expect(data.subscriptions.id).to.be.a('string');
              expect(data.subscriptions.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.subscriptions.owner).to.be.a('string');
              expect(data.subscriptions.owner).to.be("");
              expect(data.subscriptions.isDataDriven).to.be.a('boolean');
              expect(data.subscriptions.isDataDriven).to.be(false);
              expect(data.subscriptions.description).to.be.a('string');
              expect(data.subscriptions.description).to.be("");
              expect(data.subscriptions.report).to.be.a('string');
              expect(data.subscriptions.report).to.be("");
              expect(data.subscriptions.isActive).to.be.a('boolean');
              expect(data.subscriptions.isActive).to.be(false);
              expect(data.subscriptions.eventType).to.be.a('string');
              expect(data.subscriptions.eventType).to.be("");
              expect(data.subscriptions.scheduleDescription).to.be.a('string');
              expect(data.subscriptions.scheduleDescription).to.be("");
              expect(data.subscriptions.lastRunTime).to.be.a(Date);
              expect(data.subscriptions.lastRunTime).to.be(2017-04-13T15:51:04Z);
              expect(data.subscriptions.lastStatus).to.be.a('string');
              expect(data.subscriptions.lastStatus).to.be("");
              expect(data.subscriptions.extensionSettings).to.be.a(SqlServer2017ReportingServicesRestApi.ExtensionSettings);
                    expect(data.subscriptions.extensionSettings.extension).to.be.a('string');
                expect(data.subscriptions.extensionSettings.extension).to.be("");
                expect(data.subscriptions.extensionSettings.parameterValues).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                      expect(data.subscriptions.extensionSettings.parameterValues.name).to.be.a('string');
                  expect(data.subscriptions.extensionSettings.parameterValues.name).to.be("");
                  expect(data.subscriptions.extensionSettings.parameterValues.value).to.be.a('string');
                  expect(data.subscriptions.extensionSettings.parameterValues.value).to.be("");
                  expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be.a('boolean');
                  expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be(false);
              expect(data.subscriptions.deliveryExtension).to.be.a('string');
              expect(data.subscriptions.deliveryExtension).to.be("");
              expect(data.subscriptions.localizedDeliveryExtensionName).to.be.a('string');
              expect(data.subscriptions.localizedDeliveryExtensionName).to.be("");
              expect(data.subscriptions.modifiedBy).to.be.a('string');
              expect(data.subscriptions.modifiedBy).to.be("");
              expect(data.subscriptions.modifiedDate).to.be.a(Date);
              expect(data.subscriptions.modifiedDate).to.be(2017-04-13T15:51:04Z);
              {
                let dataCtr = data.subscriptions.parameterValues;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                  expect(data.isValueFieldReference).to.be.a('boolean');
                  expect(data.isValueFieldReference).to.be(false);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkExistingDataSourceConnection', function() {
        it('should call checkExistingDataSourceConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for checkExistingDataSourceConnection call and complete the assertions
          /*
          var id = "id_example";

          instance.checkExistingDataSourceConnection(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSourceCheckResult);
            expect(data.isSuccessful).to.be.a('boolean');
            expect(data.isSuccessful).to.be(false);
            expect(data.errorMessage).to.be.a('string');
            expect(data.errorMessage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkNewDataSourceConnection', function() {
        it('should call checkNewDataSourceConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for checkNewDataSourceConnection call and complete the assertions
          /*
          var dataSource = new SqlServer2017ReportingServicesRestApi.DataSource();
          dataSource.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.name = "";
          dataSource.description = "";
          dataSource.path = "";
          dataSource.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          dataSource.hidden = false;
          dataSource.size = "0";
          dataSource.modifiedBy = "";
          dataSource.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.createdBy = "";
          dataSource.createdDate = 2017-04-13T15:51:04Z;
          dataSource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.contentType = "";
          dataSource.content = "";
          dataSource.isFavorite = false;
          dataSource.isEnabled = false;
          dataSource.connectionString = "";
          dataSource.dataSourceType = "";
          dataSource.isOriginalConnectionStringExpressionBased = false;
          dataSource.isConnectionStringOverridden = false;
          dataSource.credentialsByUser = new SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser();
          dataSource.credentialsByUser.displayText = "";
          dataSource.credentialsByUser.useAsWindowsCredentials = false;
          dataSource.credentialsInServer = new SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer();
          dataSource.credentialsInServer.userName = "";
          dataSource.credentialsInServer.password = "";
          dataSource.credentialsInServer.useAsWindowsCredentials = false;
          dataSource.credentialsInServer.impersonateAuthenticatedUser = false;
          dataSource.isReference = false;
          dataSource.subscriptions = new SqlServer2017ReportingServicesRestApi.Subscription();
          dataSource.subscriptions.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.subscriptions.owner = "";
          dataSource.subscriptions.isDataDriven = false;
          dataSource.subscriptions.description = "";
          dataSource.subscriptions.report = "";
          dataSource.subscriptions.isActive = false;
          dataSource.subscriptions.eventType = "";
          dataSource.subscriptions.scheduleDescription = "";
          dataSource.subscriptions.lastRunTime = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.lastStatus = "";
          dataSource.subscriptions.extensionSettings = new SqlServer2017ReportingServicesRestApi.ExtensionSettings();
          dataSource.subscriptions.extensionSettings.extension = "";
          dataSource.subscriptions.extensionSettings.parameterValues = new SqlServer2017ReportingServicesRestApi.ParameterValue();
          dataSource.subscriptions.extensionSettings.parameterValues.name = "";
          dataSource.subscriptions.extensionSettings.parameterValues.value = "";
          dataSource.subscriptions.extensionSettings.parameterValues.isValueFieldReference = false;
          dataSource.subscriptions.deliveryExtension = "";
          dataSource.subscriptions.localizedDeliveryExtensionName = "";
          dataSource.subscriptions.modifiedBy = "";
          dataSource.subscriptions.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.parameterValues = [new SqlServer2017ReportingServicesRestApi.ParameterValue()];
          dataSource.subscriptions.parameterValues[0].name = "";
          dataSource.subscriptions.parameterValues[0].value = "";
          dataSource.subscriptions.parameterValues[0].isValueFieldReference = false;

          instance.checkNewDataSourceConnection(dataSource, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSourceCheckResult);
            expect(data.isSuccessful).to.be.a('boolean');
            expect(data.isSuccessful).to.be(false);
            expect(data.errorMessage).to.be.a('string');
            expect(data.errorMessage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDataSource', function() {
        it('should call deleteDataSource successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDataSource call
          /*
          var id = "id_example";

          instance.deleteDataSource(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSource', function() {
        it('should call getDataSource successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSource call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSource(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.isEnabled).to.be.a('boolean');
            expect(data.isEnabled).to.be(false);
            expect(data.connectionString).to.be.a('string');
            expect(data.connectionString).to.be("");
            expect(data.dataSourceType).to.be.a('string');
            expect(data.dataSourceType).to.be("");
            expect(data.isOriginalConnectionStringExpressionBased).to.be.a('boolean');
            expect(data.isOriginalConnectionStringExpressionBased).to.be(false);
            expect(data.isConnectionStringOverridden).to.be.a('boolean');
            expect(data.isConnectionStringOverridden).to.be(false);
            expect(data.credentialsByUser).to.be.a(SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser);
                  expect(data.credentialsByUser.displayText).to.be.a('string');
              expect(data.credentialsByUser.displayText).to.be("");
              expect(data.credentialsByUser.useAsWindowsCredentials).to.be.a('boolean');
              expect(data.credentialsByUser.useAsWindowsCredentials).to.be(false);
            expect(data.credentialsInServer).to.be.a(SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer);
                  expect(data.credentialsInServer.userName).to.be.a('string');
              expect(data.credentialsInServer.userName).to.be("");
              expect(data.credentialsInServer.password).to.be.a('string');
              expect(data.credentialsInServer.password).to.be("");
              expect(data.credentialsInServer.useAsWindowsCredentials).to.be.a('boolean');
              expect(data.credentialsInServer.useAsWindowsCredentials).to.be(false);
              expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be.a('boolean');
              expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be(false);
            expect(data.isReference).to.be.a('boolean');
            expect(data.isReference).to.be(false);
            expect(data.subscriptions).to.be.a(SqlServer2017ReportingServicesRestApi.Subscription);
                  expect(data.subscriptions.id).to.be.a('string');
              expect(data.subscriptions.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.subscriptions.owner).to.be.a('string');
              expect(data.subscriptions.owner).to.be("");
              expect(data.subscriptions.isDataDriven).to.be.a('boolean');
              expect(data.subscriptions.isDataDriven).to.be(false);
              expect(data.subscriptions.description).to.be.a('string');
              expect(data.subscriptions.description).to.be("");
              expect(data.subscriptions.report).to.be.a('string');
              expect(data.subscriptions.report).to.be("");
              expect(data.subscriptions.isActive).to.be.a('boolean');
              expect(data.subscriptions.isActive).to.be(false);
              expect(data.subscriptions.eventType).to.be.a('string');
              expect(data.subscriptions.eventType).to.be("");
              expect(data.subscriptions.scheduleDescription).to.be.a('string');
              expect(data.subscriptions.scheduleDescription).to.be("");
              expect(data.subscriptions.lastRunTime).to.be.a(Date);
              expect(data.subscriptions.lastRunTime).to.be(2017-04-13T15:51:04Z);
              expect(data.subscriptions.lastStatus).to.be.a('string');
              expect(data.subscriptions.lastStatus).to.be("");
              expect(data.subscriptions.extensionSettings).to.be.a(SqlServer2017ReportingServicesRestApi.ExtensionSettings);
                    expect(data.subscriptions.extensionSettings.extension).to.be.a('string');
                expect(data.subscriptions.extensionSettings.extension).to.be("");
                expect(data.subscriptions.extensionSettings.parameterValues).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                      expect(data.subscriptions.extensionSettings.parameterValues.name).to.be.a('string');
                  expect(data.subscriptions.extensionSettings.parameterValues.name).to.be("");
                  expect(data.subscriptions.extensionSettings.parameterValues.value).to.be.a('string');
                  expect(data.subscriptions.extensionSettings.parameterValues.value).to.be("");
                  expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be.a('boolean');
                  expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be(false);
              expect(data.subscriptions.deliveryExtension).to.be.a('string');
              expect(data.subscriptions.deliveryExtension).to.be("");
              expect(data.subscriptions.localizedDeliveryExtensionName).to.be.a('string');
              expect(data.subscriptions.localizedDeliveryExtensionName).to.be("");
              expect(data.subscriptions.modifiedBy).to.be.a('string');
              expect(data.subscriptions.modifiedBy).to.be("");
              expect(data.subscriptions.modifiedDate).to.be.a(Date);
              expect(data.subscriptions.modifiedDate).to.be(2017-04-13T15:51:04Z);
              {
                let dataCtr = data.subscriptions.parameterValues;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                  expect(data.isValueFieldReference).to.be.a('boolean');
                  expect(data.isValueFieldReference).to.be(false);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSourceAllowedActions', function() {
        it('should call getDataSourceAllowedActions successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSourceAllowedActions call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSourceAllowedActions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataAllowedActions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.AllowedAction);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSourceContent', function() {
        it('should call getDataSourceContent successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSourceContent call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSourceContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSourceDependentItems', function() {
        it('should call getDataSourceDependentItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSourceDependentItems call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSourceDependentItems(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataDependentItems);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItem);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSourcePolicies', function() {
        it('should call getDataSourcePolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSourcePolicies call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataSourcePolicies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ItemPolicy);
              expect(data.inheritParentPolicy).to.be.a('boolean');
              expect(data.inheritParentPolicy).to.be(false);
              {
                let dataCtr = data.policies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Policy);
                  expect(data.groupUserName).to.be.a('string');
                  expect(data.groupUserName).to.be("");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Role);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSourceQueryFields', function() {
        it('should call getDataSourceQueryFields successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSourceQueryFields call and complete the assertions
          /*
          var opts = {};
          opts.queryFieldsRequest = new SqlServer2017ReportingServicesRestApi.QueryFieldsRequest();
          opts.queryFieldsRequest.dataSource = new SqlServer2017ReportingServicesRestApi.DataSource();
          opts.queryFieldsRequest.dataSource.id = "01234567-89ab-cdef-0123-456789abcdef";
          opts.queryFieldsRequest.dataSource.name = "";
          opts.queryFieldsRequest.dataSource.description = "";
          opts.queryFieldsRequest.dataSource.path = "";
          opts.queryFieldsRequest.dataSource.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          opts.queryFieldsRequest.dataSource.hidden = false;
          opts.queryFieldsRequest.dataSource.size = "0";
          opts.queryFieldsRequest.dataSource.modifiedBy = "";
          opts.queryFieldsRequest.dataSource.modifiedDate = 2017-04-13T15:51:04Z;
          opts.queryFieldsRequest.dataSource.createdBy = "";
          opts.queryFieldsRequest.dataSource.createdDate = 2017-04-13T15:51:04Z;
          opts.queryFieldsRequest.dataSource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          opts.queryFieldsRequest.dataSource.contentType = "";
          opts.queryFieldsRequest.dataSource.content = "";
          opts.queryFieldsRequest.dataSource.isFavorite = false;
          opts.queryFieldsRequest.dataSource.isEnabled = false;
          opts.queryFieldsRequest.dataSource.connectionString = "";
          opts.queryFieldsRequest.dataSource.dataSourceType = "";
          opts.queryFieldsRequest.dataSource.isOriginalConnectionStringExpressionBased = false;
          opts.queryFieldsRequest.dataSource.isConnectionStringOverridden = false;
          opts.queryFieldsRequest.dataSource.credentialsByUser = new SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser();
          opts.queryFieldsRequest.dataSource.credentialsByUser.displayText = "";
          opts.queryFieldsRequest.dataSource.credentialsByUser.useAsWindowsCredentials = false;
          opts.queryFieldsRequest.dataSource.credentialsInServer = new SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer();
          opts.queryFieldsRequest.dataSource.credentialsInServer.userName = "";
          opts.queryFieldsRequest.dataSource.credentialsInServer.password = "";
          opts.queryFieldsRequest.dataSource.credentialsInServer.useAsWindowsCredentials = false;
          opts.queryFieldsRequest.dataSource.credentialsInServer.impersonateAuthenticatedUser = false;
          opts.queryFieldsRequest.dataSource.isReference = false;
          opts.queryFieldsRequest.dataSource.subscriptions = new SqlServer2017ReportingServicesRestApi.Subscription();
          opts.queryFieldsRequest.dataSource.subscriptions.id = "01234567-89ab-cdef-0123-456789abcdef";
          opts.queryFieldsRequest.dataSource.subscriptions.owner = "";
          opts.queryFieldsRequest.dataSource.subscriptions.isDataDriven = false;
          opts.queryFieldsRequest.dataSource.subscriptions.description = "";
          opts.queryFieldsRequest.dataSource.subscriptions.report = "";
          opts.queryFieldsRequest.dataSource.subscriptions.isActive = false;
          opts.queryFieldsRequest.dataSource.subscriptions.eventType = "";
          opts.queryFieldsRequest.dataSource.subscriptions.scheduleDescription = "";
          opts.queryFieldsRequest.dataSource.subscriptions.lastRunTime = 2017-04-13T15:51:04Z;
          opts.queryFieldsRequest.dataSource.subscriptions.lastStatus = "";
          opts.queryFieldsRequest.dataSource.subscriptions.extensionSettings = new SqlServer2017ReportingServicesRestApi.ExtensionSettings();
          opts.queryFieldsRequest.dataSource.subscriptions.extensionSettings.extension = "";
          opts.queryFieldsRequest.dataSource.subscriptions.extensionSettings.parameterValues = new SqlServer2017ReportingServicesRestApi.ParameterValue();
          opts.queryFieldsRequest.dataSource.subscriptions.extensionSettings.parameterValues.name = "";
          opts.queryFieldsRequest.dataSource.subscriptions.extensionSettings.parameterValues.value = "";
          opts.queryFieldsRequest.dataSource.subscriptions.extensionSettings.parameterValues.isValueFieldReference = false;
          opts.queryFieldsRequest.dataSource.subscriptions.deliveryExtension = "";
          opts.queryFieldsRequest.dataSource.subscriptions.localizedDeliveryExtensionName = "";
          opts.queryFieldsRequest.dataSource.subscriptions.modifiedBy = "";
          opts.queryFieldsRequest.dataSource.subscriptions.modifiedDate = 2017-04-13T15:51:04Z;
          opts.queryFieldsRequest.dataSource.subscriptions.parameterValues = [new SqlServer2017ReportingServicesRestApi.ParameterValue()];
          opts.queryFieldsRequest.dataSource.subscriptions.parameterValues[0].name = "";
          opts.queryFieldsRequest.dataSource.subscriptions.parameterValues[0].value = "";
          opts.queryFieldsRequest.dataSource.subscriptions.parameterValues[0].isValueFieldReference = false;
          opts.queryFieldsRequest.query = new SqlServer2017ReportingServicesRestApi.Query();
          opts.queryFieldsRequest.query.commandText = "";
          opts.queryFieldsRequest.query.timeout = 0;

          instance.getDataSourceQueryFields(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataQueryFields);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataSources', function() {
        it('should call getDataSources successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataSources call and complete the assertions
          /*
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";
          opts.orderBy = "orderBy_example";
          opts.select = "select_example";

          instance.getDataSources(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataDataSources);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSource);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
                expect(data.isEnabled).to.be.a('boolean');
                expect(data.isEnabled).to.be(false);
                expect(data.connectionString).to.be.a('string');
                expect(data.connectionString).to.be("");
                expect(data.dataSourceType).to.be.a('string');
                expect(data.dataSourceType).to.be("");
                expect(data.isOriginalConnectionStringExpressionBased).to.be.a('boolean');
                expect(data.isOriginalConnectionStringExpressionBased).to.be(false);
                expect(data.isConnectionStringOverridden).to.be.a('boolean');
                expect(data.isConnectionStringOverridden).to.be(false);
                expect(data.credentialsByUser).to.be.a(SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser);
                      expect(data.credentialsByUser.displayText).to.be.a('string');
                  expect(data.credentialsByUser.displayText).to.be("");
                  expect(data.credentialsByUser.useAsWindowsCredentials).to.be.a('boolean');
                  expect(data.credentialsByUser.useAsWindowsCredentials).to.be(false);
                expect(data.credentialsInServer).to.be.a(SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer);
                      expect(data.credentialsInServer.userName).to.be.a('string');
                  expect(data.credentialsInServer.userName).to.be("");
                  expect(data.credentialsInServer.password).to.be.a('string');
                  expect(data.credentialsInServer.password).to.be("");
                  expect(data.credentialsInServer.useAsWindowsCredentials).to.be.a('boolean');
                  expect(data.credentialsInServer.useAsWindowsCredentials).to.be(false);
                  expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be.a('boolean');
                  expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be(false);
                expect(data.isReference).to.be.a('boolean');
                expect(data.isReference).to.be(false);
                expect(data.subscriptions).to.be.a(SqlServer2017ReportingServicesRestApi.Subscription);
                      expect(data.subscriptions.id).to.be.a('string');
                  expect(data.subscriptions.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                  expect(data.subscriptions.owner).to.be.a('string');
                  expect(data.subscriptions.owner).to.be("");
                  expect(data.subscriptions.isDataDriven).to.be.a('boolean');
                  expect(data.subscriptions.isDataDriven).to.be(false);
                  expect(data.subscriptions.description).to.be.a('string');
                  expect(data.subscriptions.description).to.be("");
                  expect(data.subscriptions.report).to.be.a('string');
                  expect(data.subscriptions.report).to.be("");
                  expect(data.subscriptions.isActive).to.be.a('boolean');
                  expect(data.subscriptions.isActive).to.be(false);
                  expect(data.subscriptions.eventType).to.be.a('string');
                  expect(data.subscriptions.eventType).to.be("");
                  expect(data.subscriptions.scheduleDescription).to.be.a('string');
                  expect(data.subscriptions.scheduleDescription).to.be("");
                  expect(data.subscriptions.lastRunTime).to.be.a(Date);
                  expect(data.subscriptions.lastRunTime).to.be(2017-04-13T15:51:04Z);
                  expect(data.subscriptions.lastStatus).to.be.a('string');
                  expect(data.subscriptions.lastStatus).to.be("");
                  expect(data.subscriptions.extensionSettings).to.be.a(SqlServer2017ReportingServicesRestApi.ExtensionSettings);
                        expect(data.subscriptions.extensionSettings.extension).to.be.a('string');
                    expect(data.subscriptions.extensionSettings.extension).to.be("");
                    expect(data.subscriptions.extensionSettings.parameterValues).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                          expect(data.subscriptions.extensionSettings.parameterValues.name).to.be.a('string');
                      expect(data.subscriptions.extensionSettings.parameterValues.name).to.be("");
                      expect(data.subscriptions.extensionSettings.parameterValues.value).to.be.a('string');
                      expect(data.subscriptions.extensionSettings.parameterValues.value).to.be("");
                      expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be.a('boolean');
                      expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be(false);
                  expect(data.subscriptions.deliveryExtension).to.be.a('string');
                  expect(data.subscriptions.deliveryExtension).to.be("");
                  expect(data.subscriptions.localizedDeliveryExtensionName).to.be.a('string');
                  expect(data.subscriptions.localizedDeliveryExtensionName).to.be("");
                  expect(data.subscriptions.modifiedBy).to.be.a('string');
                  expect(data.subscriptions.modifiedBy).to.be("");
                  expect(data.subscriptions.modifiedDate).to.be.a(Date);
                  expect(data.subscriptions.modifiedDate).to.be(2017-04-13T15:51:04Z);
                  {
                    let dataCtr = data.subscriptions.parameterValues;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                      expect(data.isValueFieldReference).to.be.a('boolean');
                      expect(data.isValueFieldReference).to.be(false);
                    }
                  }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDatasourceProperties', function() {
        it('should call getDatasourceProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getDatasourceProperties call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.properties = ["properties_example"];

          instance.getDatasourceProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataProperties);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Property);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setDataSourcePolicies', function() {
        it('should call setDataSourcePolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for setDataSourcePolicies call
          /*
          var id = "id_example";
          var itemPolicy = [new SqlServer2017ReportingServicesRestApi.ItemPolicy()];
          itemPolicy[0].inheritParentPolicy = false;
          itemPolicy[0].policies = [new SqlServer2017ReportingServicesRestApi.Policy()];
          itemPolicy[0].policies[0].groupUserName = "";
          itemPolicy[0].policies[0].roles = [new SqlServer2017ReportingServicesRestApi.Role()];
          itemPolicy[0].policies[0].roles[0].name = "";
          itemPolicy[0].policies[0].roles[0].description = "";

          instance.setDataSourcePolicies(id, itemPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDataSource', function() {
        it('should call updateDataSource successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDataSource call
          /*
          var id = "id_example";
          var dataSource = new SqlServer2017ReportingServicesRestApi.DataSource();
          dataSource.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.name = "";
          dataSource.description = "";
          dataSource.path = "";
          dataSource.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          dataSource.hidden = false;
          dataSource.size = "0";
          dataSource.modifiedBy = "";
          dataSource.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.createdBy = "";
          dataSource.createdDate = 2017-04-13T15:51:04Z;
          dataSource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.contentType = "";
          dataSource.content = "";
          dataSource.isFavorite = false;
          dataSource.isEnabled = false;
          dataSource.connectionString = "";
          dataSource.dataSourceType = "";
          dataSource.isOriginalConnectionStringExpressionBased = false;
          dataSource.isConnectionStringOverridden = false;
          dataSource.credentialsByUser = new SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser();
          dataSource.credentialsByUser.displayText = "";
          dataSource.credentialsByUser.useAsWindowsCredentials = false;
          dataSource.credentialsInServer = new SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer();
          dataSource.credentialsInServer.userName = "";
          dataSource.credentialsInServer.password = "";
          dataSource.credentialsInServer.useAsWindowsCredentials = false;
          dataSource.credentialsInServer.impersonateAuthenticatedUser = false;
          dataSource.isReference = false;
          dataSource.subscriptions = new SqlServer2017ReportingServicesRestApi.Subscription();
          dataSource.subscriptions.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.subscriptions.owner = "";
          dataSource.subscriptions.isDataDriven = false;
          dataSource.subscriptions.description = "";
          dataSource.subscriptions.report = "";
          dataSource.subscriptions.isActive = false;
          dataSource.subscriptions.eventType = "";
          dataSource.subscriptions.scheduleDescription = "";
          dataSource.subscriptions.lastRunTime = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.lastStatus = "";
          dataSource.subscriptions.extensionSettings = new SqlServer2017ReportingServicesRestApi.ExtensionSettings();
          dataSource.subscriptions.extensionSettings.extension = "";
          dataSource.subscriptions.extensionSettings.parameterValues = new SqlServer2017ReportingServicesRestApi.ParameterValue();
          dataSource.subscriptions.extensionSettings.parameterValues.name = "";
          dataSource.subscriptions.extensionSettings.parameterValues.value = "";
          dataSource.subscriptions.extensionSettings.parameterValues.isValueFieldReference = false;
          dataSource.subscriptions.deliveryExtension = "";
          dataSource.subscriptions.localizedDeliveryExtensionName = "";
          dataSource.subscriptions.modifiedBy = "";
          dataSource.subscriptions.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.parameterValues = [new SqlServer2017ReportingServicesRestApi.ParameterValue()];
          dataSource.subscriptions.parameterValues[0].name = "";
          dataSource.subscriptions.parameterValues[0].value = "";
          dataSource.subscriptions.parameterValues[0].isValueFieldReference = false;

          instance.updateDataSource(id, dataSource, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDatasourceProperties', function() {
        it('should call updateDatasourceProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDatasourceProperties call
          /*
          var id = "id_example";
          var properties = [new SqlServer2017ReportingServicesRestApi.Property()];
          properties[0].name = "";
          properties[0].value = "";

          instance.updateDatasourceProperties(id, properties, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
