/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlServer2017ReportingServicesRestApi);
  }
}(this, function(expect, SqlServer2017ReportingServicesRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlServer2017ReportingServicesRestApi.ReportsApi();
  });

  describe('(package)', function() {
    describe('ReportsApi', function() {
      describe('addReport', function() {
        it('should call addReport successfully', function(done) {
          // TODO: uncomment, update parameter values for addReport call and complete the assertions
          /*
          var report = new SqlServer2017ReportingServicesRestApi.Report();
          report.id = "01234567-89ab-cdef-0123-456789abcdef";
          report.name = "";
          report.description = "";
          report.path = "";
          report.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          report.hidden = false;
          report.size = "0";
          report.modifiedBy = "";
          report.modifiedDate = 2017-04-13T15:51:04Z;
          report.createdBy = "";
          report.createdDate = 2017-04-13T15:51:04Z;
          report.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          report.contentType = "";
          report.content = "";
          report.isFavorite = false;
          report.hasDataSources = false;
          report.hasSharedDataSets = false;
          report.hasParameters = false;

          instance.addReport(report, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Report);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasDataSources).to.be.a('boolean');
            expect(data.hasDataSources).to.be(false);
            expect(data.hasSharedDataSets).to.be.a('boolean');
            expect(data.hasSharedDataSets).to.be(false);
            expect(data.hasParameters).to.be.a('boolean');
            expect(data.hasParameters).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addReportComment', function() {
        it('should call addReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for addReportComment call
          /*
          var id = "id_example";
          var comment = new SqlServer2017ReportingServicesRestApi.Comment();
          comment.id = """00000000-0000-0000-0000-000000000000";
          comment.itemId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.userName = "";
          comment.threadId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.attachmentPath = "";
          comment.text = "";
          comment.createdDate = 2017-04-13T15:51:04Z;
          comment.modifiedDate = 2017-04-13T15:51:04Z;

          instance.addReportComment(id, comment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addReportHistorySnapshot', function() {
        it('should call addReportHistorySnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for addReportHistorySnapshot call and complete the assertions
          /*
          var id = "id_example";

          instance.addReportHistorySnapshot(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkReportDataSourceConnection', function() {
        it('should call checkReportDataSourceConnection successfully', function(done) {
          // TODO: uncomment, update parameter values for checkReportDataSourceConnection call and complete the assertions
          /*
          var id = "id_example";
          var dataSourceName = "dataSourceName_example";

          instance.checkReportDataSourceConnection(id, dataSourceName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSourceCheckResult);
            expect(data.isSuccessful).to.be.a('boolean');
            expect(data.isSuccessful).to.be(false);
            expect(data.errorMessage).to.be.a('string');
            expect(data.errorMessage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteReport', function() {
        it('should call deleteReport successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteReport call
          /*
          var id = "id_example";

          instance.deleteReport(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteReportComment', function() {
        it('should call deleteReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteReportComment call
          /*
          var id = "id_example";
          var commentId = "commentId_example";

          instance.deleteReportComment(id, commentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteReportHistorySnapshot', function() {
        it('should call deleteReportHistorySnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteReportHistorySnapshot call and complete the assertions
          /*
          var id = "id_example";
          var historyId = "historyId_example";

          instance.deleteReportHistorySnapshot(id, historyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReport', function() {
        it('should call getReport successfully', function(done) {
          // TODO: uncomment, update parameter values for getReport call and complete the assertions
          /*
          var id = "id_example";

          instance.getReport(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Report);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasDataSources).to.be.a('boolean');
            expect(data.hasDataSources).to.be(false);
            expect(data.hasSharedDataSets).to.be.a('boolean');
            expect(data.hasSharedDataSets).to.be(false);
            expect(data.hasParameters).to.be.a('boolean');
            expect(data.hasParameters).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportAllowedActions', function() {
        it('should call getReportAllowedActions successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportAllowedActions call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportAllowedActions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataAllowedActions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.AllowedAction);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportCacheOptions', function() {
        it('should call getReportCacheOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportCacheOptions call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportCacheOptions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.CacheOptions);
            expect(data.executionType).to.be.a(SqlServer2017ReportingServicesRestApi.ItemExecutionType);
                expect(data.expiration).to.be.a(SqlServer2017ReportingServicesRestApi.ExpirationReference);
                  expect(data.expiration.minutes).to.be.a('number');
              expect(data.expiration.minutes).to.be(0);
              expect(data.expiration.schedule).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleReference);
                    expect(data.expiration.schedule.scheduleId).to.be.a('string');
                expect(data.expiration.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.expiration.schedule.definition).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleDefinition);
                      expect(data.expiration.schedule.definition.startDateTime).to.be.a(Date);
                  expect(data.expiration.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                  expect(data.expiration.schedule.definition.endDate).to.be.a(Date);
                  expect(data.expiration.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                  expect(data.expiration.schedule.definition.endDateSpecified).to.be.a('boolean');
                  expect(data.expiration.schedule.definition.endDateSpecified).to.be(false);
                  expect(data.expiration.schedule.definition.recurrence).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleRecurrence);
                        expect(data.expiration.schedule.definition.recurrence.minuteRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MinuteRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                    expect(data.expiration.schedule.definition.recurrence.dailyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.DailyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                    expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.WeeklyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector);
                            expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                    expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MonthlyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                      expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                      expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                    expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MonthlyDOWRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(SqlServer2017ReportingServicesRestApi.WeekNumberEnum);
                          expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportCacheRefreshPlans', function() {
        it('should call getReportCacheRefreshPlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportCacheRefreshPlans call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportCacheRefreshPlans(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataCacheRefreshPlans);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.CacheRefreshPlan);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.catalogItemPath).to.be.a('string');
                expect(data.catalogItemPath).to.be("");
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("");
                expect(data.schedule).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleReference);
                      expect(data.schedule.scheduleId).to.be.a('string');
                  expect(data.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.schedule.definition).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleDefinition);
                        expect(data.schedule.definition.startDateTime).to.be.a(Date);
                    expect(data.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                    expect(data.schedule.definition.endDate).to.be.a(Date);
                    expect(data.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                    expect(data.schedule.definition.endDateSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.endDateSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleRecurrence);
                          expect(data.schedule.definition.recurrence.minuteRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MinuteRecurrence);
                            expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                      expect(data.schedule.definition.recurrence.dailyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.DailyRecurrence);
                            expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.WeeklyRecurrence);
                            expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector);
                              expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MonthlyRecurrence);
                            expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector);
                              expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MonthlyDOWRecurrence);
                            expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(SqlServer2017ReportingServicesRestApi.WeekNumberEnum);
                            expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector);
                              expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector);
                              expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);
                expect(data.lastRunTime).to.be.a(Date);
                expect(data.lastRunTime).to.be(2017-04-13T15:51:04Z);
                expect(data.lastStatus).to.be.a('string');
                expect(data.lastStatus).to.be("");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                {
                  let dataCtr = data.parameterValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.isValueFieldReference).to.be.a('boolean');
                    expect(data.isValueFieldReference).to.be(false);
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportComments', function() {
        it('should call getReportComments successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportComments call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportComments(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataComments);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Comment);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.itemId).to.be.a('string');
                expect(data.itemId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.threadId).to.be.a('string');
                expect(data.threadId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.attachmentPath).to.be.a('string');
                expect(data.attachmentPath).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportContent', function() {
        it('should call getReportContent successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportContent call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportDataSources', function() {
        it('should call getReportDataSources successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportDataSources call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportDataSources(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataDataSources);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSource);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
                expect(data.isEnabled).to.be.a('boolean');
                expect(data.isEnabled).to.be(false);
                expect(data.connectionString).to.be.a('string');
                expect(data.connectionString).to.be("");
                expect(data.dataSourceType).to.be.a('string');
                expect(data.dataSourceType).to.be("");
                expect(data.isOriginalConnectionStringExpressionBased).to.be.a('boolean');
                expect(data.isOriginalConnectionStringExpressionBased).to.be(false);
                expect(data.isConnectionStringOverridden).to.be.a('boolean');
                expect(data.isConnectionStringOverridden).to.be(false);
                expect(data.credentialsByUser).to.be.a(SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser);
                      expect(data.credentialsByUser.displayText).to.be.a('string');
                  expect(data.credentialsByUser.displayText).to.be("");
                  expect(data.credentialsByUser.useAsWindowsCredentials).to.be.a('boolean');
                  expect(data.credentialsByUser.useAsWindowsCredentials).to.be(false);
                expect(data.credentialsInServer).to.be.a(SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer);
                      expect(data.credentialsInServer.userName).to.be.a('string');
                  expect(data.credentialsInServer.userName).to.be("");
                  expect(data.credentialsInServer.password).to.be.a('string');
                  expect(data.credentialsInServer.password).to.be("");
                  expect(data.credentialsInServer.useAsWindowsCredentials).to.be.a('boolean');
                  expect(data.credentialsInServer.useAsWindowsCredentials).to.be(false);
                  expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be.a('boolean');
                  expect(data.credentialsInServer.impersonateAuthenticatedUser).to.be(false);
                expect(data.isReference).to.be.a('boolean');
                expect(data.isReference).to.be(false);
                expect(data.subscriptions).to.be.a(SqlServer2017ReportingServicesRestApi.Subscription);
                      expect(data.subscriptions.id).to.be.a('string');
                  expect(data.subscriptions.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                  expect(data.subscriptions.owner).to.be.a('string');
                  expect(data.subscriptions.owner).to.be("");
                  expect(data.subscriptions.isDataDriven).to.be.a('boolean');
                  expect(data.subscriptions.isDataDriven).to.be(false);
                  expect(data.subscriptions.description).to.be.a('string');
                  expect(data.subscriptions.description).to.be("");
                  expect(data.subscriptions.report).to.be.a('string');
                  expect(data.subscriptions.report).to.be("");
                  expect(data.subscriptions.isActive).to.be.a('boolean');
                  expect(data.subscriptions.isActive).to.be(false);
                  expect(data.subscriptions.eventType).to.be.a('string');
                  expect(data.subscriptions.eventType).to.be("");
                  expect(data.subscriptions.scheduleDescription).to.be.a('string');
                  expect(data.subscriptions.scheduleDescription).to.be("");
                  expect(data.subscriptions.lastRunTime).to.be.a(Date);
                  expect(data.subscriptions.lastRunTime).to.be(2017-04-13T15:51:04Z);
                  expect(data.subscriptions.lastStatus).to.be.a('string');
                  expect(data.subscriptions.lastStatus).to.be("");
                  expect(data.subscriptions.extensionSettings).to.be.a(SqlServer2017ReportingServicesRestApi.ExtensionSettings);
                        expect(data.subscriptions.extensionSettings.extension).to.be.a('string');
                    expect(data.subscriptions.extensionSettings.extension).to.be("");
                    expect(data.subscriptions.extensionSettings.parameterValues).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                          expect(data.subscriptions.extensionSettings.parameterValues.name).to.be.a('string');
                      expect(data.subscriptions.extensionSettings.parameterValues.name).to.be("");
                      expect(data.subscriptions.extensionSettings.parameterValues.value).to.be.a('string');
                      expect(data.subscriptions.extensionSettings.parameterValues.value).to.be("");
                      expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be.a('boolean');
                      expect(data.subscriptions.extensionSettings.parameterValues.isValueFieldReference).to.be(false);
                  expect(data.subscriptions.deliveryExtension).to.be.a('string');
                  expect(data.subscriptions.deliveryExtension).to.be("");
                  expect(data.subscriptions.localizedDeliveryExtensionName).to.be.a('string');
                  expect(data.subscriptions.localizedDeliveryExtensionName).to.be("");
                  expect(data.subscriptions.modifiedBy).to.be.a('string');
                  expect(data.subscriptions.modifiedBy).to.be("");
                  expect(data.subscriptions.modifiedDate).to.be.a(Date);
                  expect(data.subscriptions.modifiedDate).to.be(2017-04-13T15:51:04Z);
                  {
                    let dataCtr = data.subscriptions.parameterValues;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                      expect(data.isValueFieldReference).to.be.a('boolean');
                      expect(data.isValueFieldReference).to.be(false);
                    }
                  }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportDependentItems', function() {
        it('should call getReportDependentItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportDependentItems call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportDependentItems(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataDependentItems);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItem);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportHistorySnapshot', function() {
        it('should call getReportHistorySnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportHistorySnapshot call and complete the assertions
          /*
          var id = "id_example";
          var historyId = "historyId_example";

          instance.getReportHistorySnapshot(id, historyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.HistorySnapshot);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.historyId).to.be.a('string');
            expect(data.historyId).to.be("");
            expect(data.creationDate).to.be.a(Date);
            expect(data.creationDate).to.be(2017-04-13T15:51:04Z);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportHistorySnapshotOptions', function() {
        it('should call getReportHistorySnapshotOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportHistorySnapshotOptions call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportHistorySnapshotOptions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.HistorySnapshotOptions);
            expect(data.catalogItemId).to.be.a('string');
            expect(data.catalogItemId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.historySnapshotsOptions).to.be.a(SqlServer2017ReportingServicesRestApi.ReportHistorySnapshotsOptions);
                  expect(data.historySnapshotsOptions.manualCreationEnabled).to.be.a('boolean');
              expect(data.historySnapshotsOptions.manualCreationEnabled).to.be(false);
              expect(data.historySnapshotsOptions.keepExecutionSnapshots).to.be.a('boolean');
              expect(data.historySnapshotsOptions.keepExecutionSnapshots).to.be(false);
              expect(data.historySnapshotsOptions.useDefaultSystemLimit).to.be.a('boolean');
              expect(data.historySnapshotsOptions.useDefaultSystemLimit).to.be(false);
              expect(data.historySnapshotsOptions.scopedLimit).to.be.a('number');
              expect(data.historySnapshotsOptions.scopedLimit).to.be(0);
              expect(data.historySnapshotsOptions.systemLimit).to.be.a('number');
              expect(data.historySnapshotsOptions.systemLimit).to.be(0);
              expect(data.historySnapshotsOptions.schedule).to.be.a(Object);
              expect(data.historySnapshotsOptions.schedule).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportHistorySnapshots', function() {
        it('should call getReportHistorySnapshots successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportHistorySnapshots call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportHistorySnapshots(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.HistorySnapshot);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.historyId).to.be.a('string');
              expect(data.historyId).to.be("");
              expect(data.creationDate).to.be.a(Date);
              expect(data.creationDate).to.be(2017-04-13T15:51:04Z);
              expect(data.size).to.be.a('number');
              expect(data.size).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportParameterDefinitions', function() {
        it('should call getReportParameterDefinitions successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportParameterDefinitions call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportParameterDefinitions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataReportParameterDefinitions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ReportParameterDefinition);
                expect(data.allowBlank).to.be.a('boolean');
                expect(data.allowBlank).to.be(false);
                {
                  let dataCtr = data.defaultValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.defaultValuesIsNull).to.be.a('boolean');
                expect(data.defaultValuesIsNull).to.be(false);
                expect(data.defaultValuesQueryBased).to.be.a('boolean');
                expect(data.defaultValuesQueryBased).to.be(false);
                {
                  let dataCtr = data.dependencies;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.errorMessage).to.be.a('string');
                expect(data.errorMessage).to.be("");
                expect(data.multiValue).to.be.a('boolean');
                expect(data.multiValue).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.nullable).to.be.a('boolean');
                expect(data.nullable).to.be(false);
                expect(data.parameterState).to.be.a(SqlServer2017ReportingServicesRestApi.ReportParameterState);
                    expect(data.parameterType).to.be.a(SqlServer2017ReportingServicesRestApi.ReportParameterType);
                    expect(data.parameterVisibility).to.be.a(SqlServer2017ReportingServicesRestApi.ReportParameterVisibility);
                    expect(data.prompt).to.be.a('string');
                expect(data.prompt).to.be("");
                expect(data.promptUser).to.be.a('boolean');
                expect(data.promptUser).to.be(false);
                expect(data.queryParameter).to.be.a('boolean');
                expect(data.queryParameter).to.be(false);
                {
                  let dataCtr = data.validValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ValidValue);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
                expect(data.validValuesIsNull).to.be.a('boolean');
                expect(data.validValuesIsNull).to.be(false);
                expect(data.validValuesQueryBased).to.be.a('boolean');
                expect(data.validValuesQueryBased).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportPolicies', function() {
        it('should call getReportPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportPolicies call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportPolicies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ItemPolicy);
              expect(data.inheritParentPolicy).to.be.a('boolean');
              expect(data.inheritParentPolicy).to.be(false);
              {
                let dataCtr = data.policies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Policy);
                  expect(data.groupUserName).to.be.a('string');
                  expect(data.groupUserName).to.be("");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Role);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportProperties', function() {
        it('should call getReportProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportProperties call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.properties = ["properties_example"];

          instance.getReportProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataProperties);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Property);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportSharedDataSets', function() {
        it('should call getReportSharedDataSets successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportSharedDataSets call and complete the assertions
          /*
          var id = "id_example";

          instance.getReportSharedDataSets(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSet);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.path).to.be.a('string');
              expect(data.path).to.be("");
              expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                  expect(data.hidden).to.be.a('boolean');
              expect(data.hidden).to.be(false);
              expect(data.size).to.be.a('number');
              expect(data.size).to.be("0");
              expect(data.modifiedBy).to.be.a('string');
              expect(data.modifiedBy).to.be("");
              expect(data.modifiedDate).to.be.a(Date);
              expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.createdDate).to.be.a(Date);
              expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
              expect(data.parentFolderId).to.be.a('string');
              expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.contentType).to.be.a('string');
              expect(data.contentType).to.be("");
              expect(data.content).to.be.a('string');
              expect(data.content).to.be("");
              expect(data.isFavorite).to.be.a('boolean');
              expect(data.isFavorite).to.be(false);
              expect(data.hasParameters).to.be.a('boolean');
              expect(data.hasParameters).to.be(false);
              expect(data.queryExecutionTimeOut).to.be.a('number');
              expect(data.queryExecutionTimeOut).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReportSubscriptions', function() {
        it('should call getReportSubscriptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getReportSubscriptions call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";
          opts.orderBy = "orderBy_example";
          opts.expand = "expand_example";
          opts.select = "select_example";

          instance.getReportSubscriptions(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Subscription);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.owner).to.be.a('string');
              expect(data.owner).to.be("");
              expect(data.isDataDriven).to.be.a('boolean');
              expect(data.isDataDriven).to.be(false);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.report).to.be.a('string');
              expect(data.report).to.be("");
              expect(data.isActive).to.be.a('boolean');
              expect(data.isActive).to.be(false);
              expect(data.eventType).to.be.a('string');
              expect(data.eventType).to.be("");
              expect(data.scheduleDescription).to.be.a('string');
              expect(data.scheduleDescription).to.be("");
              expect(data.lastRunTime).to.be.a(Date);
              expect(data.lastRunTime).to.be(2017-04-13T15:51:04Z);
              expect(data.lastStatus).to.be.a('string');
              expect(data.lastStatus).to.be("");
              expect(data.extensionSettings).to.be.a(SqlServer2017ReportingServicesRestApi.ExtensionSettings);
                    expect(data.extensionSettings.extension).to.be.a('string');
                expect(data.extensionSettings.extension).to.be("");
                expect(data.extensionSettings.parameterValues).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                      expect(data.extensionSettings.parameterValues.name).to.be.a('string');
                  expect(data.extensionSettings.parameterValues.name).to.be("");
                  expect(data.extensionSettings.parameterValues.value).to.be.a('string');
                  expect(data.extensionSettings.parameterValues.value).to.be("");
                  expect(data.extensionSettings.parameterValues.isValueFieldReference).to.be.a('boolean');
                  expect(data.extensionSettings.parameterValues.isValueFieldReference).to.be(false);
              expect(data.deliveryExtension).to.be.a('string');
              expect(data.deliveryExtension).to.be("");
              expect(data.localizedDeliveryExtensionName).to.be.a('string');
              expect(data.localizedDeliveryExtensionName).to.be("");
              expect(data.modifiedBy).to.be.a('string');
              expect(data.modifiedBy).to.be("");
              expect(data.modifiedDate).to.be.a(Date);
              expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
              {
                let dataCtr = data.parameterValues;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                  expect(data.isValueFieldReference).to.be.a('boolean');
                  expect(data.isValueFieldReference).to.be(false);
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getReports', function() {
        it('should call getReports successfully', function(done) {
          // TODO: uncomment, update parameter values for getReports call and complete the assertions
          /*
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";
          opts.orderBy = "orderBy_example";
          opts.select = "select_example";

          instance.getReports(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataReports);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Report);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
                expect(data.hasDataSources).to.be.a('boolean');
                expect(data.hasDataSources).to.be(false);
                expect(data.hasSharedDataSets).to.be.a('boolean');
                expect(data.hasSharedDataSets).to.be(false);
                expect(data.hasParameters).to.be.a('boolean');
                expect(data.hasParameters).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setReportCacheOptions', function() {
        it('should call setReportCacheOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for setReportCacheOptions call
          /*
          var id = "id_example";
          var cacheOptions = new SqlServer2017ReportingServicesRestApi.CacheOptions();
          cacheOptions.executionType = new SqlServer2017ReportingServicesRestApi.ItemExecutionType();
          cacheOptions.expiration = new SqlServer2017ReportingServicesRestApi.ExpirationReference();
          cacheOptions.expiration.minutes = 0;
          cacheOptions.expiration.schedule = new SqlServer2017ReportingServicesRestApi.ScheduleReference();
          cacheOptions.expiration.schedule.scheduleId = """00000000-0000-0000-0000-000000000000";
          cacheOptions.expiration.schedule.definition = new SqlServer2017ReportingServicesRestApi.ScheduleDefinition();
          cacheOptions.expiration.schedule.definition.startDateTime = 2017-04-13T15:51:04Z;
          cacheOptions.expiration.schedule.definition.endDate = 2017-04-13T15:51:04Z;
          cacheOptions.expiration.schedule.definition.endDateSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence = new SqlServer2017ReportingServicesRestApi.ScheduleRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.minuteRecurrence = new SqlServer2017ReportingServicesRestApi.MinuteRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.dailyRecurrence = new SqlServer2017ReportingServicesRestApi.DailyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence = new SqlServer2017ReportingServicesRestApi.WeeklyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek = new SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector();
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence = new SqlServer2017ReportingServicesRestApi.MonthlyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.days = "";
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear = new SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence = new SqlServer2017ReportingServicesRestApi.MonthlyDOWRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek = new SqlServer2017ReportingServicesRestApi.WeekNumberEnum();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek = new SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear = new SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december = false;

          instance.setReportCacheOptions(id, cacheOptions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setReportDataSource', function() {
        it('should call setReportDataSource successfully', function(done) {
          // TODO: uncomment, update parameter values for setReportDataSource call
          /*
          var id = "id_example";
          var dataSource = new SqlServer2017ReportingServicesRestApi.DataSource();
          dataSource.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.name = "";
          dataSource.description = "";
          dataSource.path = "";
          dataSource.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          dataSource.hidden = false;
          dataSource.size = "0";
          dataSource.modifiedBy = "";
          dataSource.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.createdBy = "";
          dataSource.createdDate = 2017-04-13T15:51:04Z;
          dataSource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.contentType = "";
          dataSource.content = "";
          dataSource.isFavorite = false;
          dataSource.isEnabled = false;
          dataSource.connectionString = "";
          dataSource.dataSourceType = "";
          dataSource.isOriginalConnectionStringExpressionBased = false;
          dataSource.isConnectionStringOverridden = false;
          dataSource.credentialsByUser = new SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser();
          dataSource.credentialsByUser.displayText = "";
          dataSource.credentialsByUser.useAsWindowsCredentials = false;
          dataSource.credentialsInServer = new SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer();
          dataSource.credentialsInServer.userName = "";
          dataSource.credentialsInServer.password = "";
          dataSource.credentialsInServer.useAsWindowsCredentials = false;
          dataSource.credentialsInServer.impersonateAuthenticatedUser = false;
          dataSource.isReference = false;
          dataSource.subscriptions = new SqlServer2017ReportingServicesRestApi.Subscription();
          dataSource.subscriptions.id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSource.subscriptions.owner = "";
          dataSource.subscriptions.isDataDriven = false;
          dataSource.subscriptions.description = "";
          dataSource.subscriptions.report = "";
          dataSource.subscriptions.isActive = false;
          dataSource.subscriptions.eventType = "";
          dataSource.subscriptions.scheduleDescription = "";
          dataSource.subscriptions.lastRunTime = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.lastStatus = "";
          dataSource.subscriptions.extensionSettings = new SqlServer2017ReportingServicesRestApi.ExtensionSettings();
          dataSource.subscriptions.extensionSettings.extension = "";
          dataSource.subscriptions.extensionSettings.parameterValues = new SqlServer2017ReportingServicesRestApi.ParameterValue();
          dataSource.subscriptions.extensionSettings.parameterValues.name = "";
          dataSource.subscriptions.extensionSettings.parameterValues.value = "";
          dataSource.subscriptions.extensionSettings.parameterValues.isValueFieldReference = false;
          dataSource.subscriptions.deliveryExtension = "";
          dataSource.subscriptions.localizedDeliveryExtensionName = "";
          dataSource.subscriptions.modifiedBy = "";
          dataSource.subscriptions.modifiedDate = 2017-04-13T15:51:04Z;
          dataSource.subscriptions.parameterValues = [new SqlServer2017ReportingServicesRestApi.ParameterValue()];
          dataSource.subscriptions.parameterValues[0].name = "";
          dataSource.subscriptions.parameterValues[0].value = "";
          dataSource.subscriptions.parameterValues[0].isValueFieldReference = false;

          instance.setReportDataSource(id, dataSource, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setReportHistorySnapshotOptions', function() {
        it('should call setReportHistorySnapshotOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for setReportHistorySnapshotOptions call
          /*
          var id = "id_example";
          var historySnapshotOptions = new SqlServer2017ReportingServicesRestApi.HistorySnapshotOptions();
          historySnapshotOptions.catalogItemId = "01234567-89ab-cdef-0123-456789abcdef";
          historySnapshotOptions.historySnapshotsOptions = new SqlServer2017ReportingServicesRestApi.ReportHistorySnapshotsOptions();
          historySnapshotOptions.historySnapshotsOptions.manualCreationEnabled = false;
          historySnapshotOptions.historySnapshotsOptions.keepExecutionSnapshots = false;
          historySnapshotOptions.historySnapshotsOptions.useDefaultSystemLimit = false;
          historySnapshotOptions.historySnapshotsOptions.scopedLimit = 0;
          historySnapshotOptions.historySnapshotsOptions.systemLimit = 0;
          historySnapshotOptions.historySnapshotsOptions.schedule = ;

          instance.setReportHistorySnapshotOptions(id, historySnapshotOptions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setReportPolicies', function() {
        it('should call setReportPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for setReportPolicies call
          /*
          var id = "id_example";
          var itemPolicies = [new SqlServer2017ReportingServicesRestApi.ItemPolicy()];
          itemPolicies[0].inheritParentPolicy = false;
          itemPolicies[0].policies = [new SqlServer2017ReportingServicesRestApi.Policy()];
          itemPolicies[0].policies[0].groupUserName = "";
          itemPolicies[0].policies[0].roles = [new SqlServer2017ReportingServicesRestApi.Role()];
          itemPolicies[0].policies[0].roles[0].name = "";
          itemPolicies[0].policies[0].roles[0].description = "";

          instance.setReportPolicies(id, itemPolicies, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setReportSharedDataSets', function() {
        it('should call setReportSharedDataSets successfully', function(done) {
          // TODO: uncomment, update parameter values for setReportSharedDataSets call
          /*
          var id = "id_example";
          var dataSets = [new SqlServer2017ReportingServicesRestApi.DataSet()];
          dataSets[0].id = "01234567-89ab-cdef-0123-456789abcdef";
          dataSets[0].name = "";
          dataSets[0].description = "";
          dataSets[0].path = "";
          dataSets[0].type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          dataSets[0].hidden = false;
          dataSets[0].size = "0";
          dataSets[0].modifiedBy = "";
          dataSets[0].modifiedDate = 2017-04-13T15:51:04Z;
          dataSets[0].createdBy = "";
          dataSets[0].createdDate = 2017-04-13T15:51:04Z;
          dataSets[0].parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          dataSets[0].contentType = "";
          dataSets[0].content = "";
          dataSets[0].isFavorite = false;
          dataSets[0].hasParameters = false;
          dataSets[0].queryExecutionTimeOut = 0;

          instance.setReportSharedDataSets(id, dataSets, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCacheSnapshot', function() {
        it('should call updateCacheSnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCacheSnapshot call and complete the assertions
          /*
          var id = "id_example";

          instance.updateCacheSnapshot(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.UpdateCacheSnapshotResult);
            expect(data.value).to.be.a('boolean');
            expect(data.value).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateReport', function() {
        it('should call updateReport successfully', function(done) {
          // TODO: uncomment, update parameter values for updateReport call
          /*
          var id = "id_example";
          var report = new SqlServer2017ReportingServicesRestApi.Report();
          report.id = "01234567-89ab-cdef-0123-456789abcdef";
          report.name = "";
          report.description = "";
          report.path = "";
          report.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          report.hidden = false;
          report.size = "0";
          report.modifiedBy = "";
          report.modifiedDate = 2017-04-13T15:51:04Z;
          report.createdBy = "";
          report.createdDate = 2017-04-13T15:51:04Z;
          report.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          report.contentType = "";
          report.content = "";
          report.isFavorite = false;
          report.hasDataSources = false;
          report.hasSharedDataSets = false;
          report.hasParameters = false;

          instance.updateReport(id, report, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateReportComment', function() {
        it('should call updateReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for updateReportComment call
          /*
          var id = "id_example";
          var commentId = "commentId_example";
          var comment = new SqlServer2017ReportingServicesRestApi.Comment();
          comment.id = """00000000-0000-0000-0000-000000000000";
          comment.itemId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.userName = "";
          comment.threadId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.attachmentPath = "";
          comment.text = "";
          comment.createdDate = 2017-04-13T15:51:04Z;
          comment.modifiedDate = 2017-04-13T15:51:04Z;

          instance.updateReportComment(id, commentId, comment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateReportParameterDefinitions', function() {
        it('should call updateReportParameterDefinitions successfully', function(done) {
          // TODO: uncomment, update parameter values for updateReportParameterDefinitions call
          /*
          var id = "id_example";
          var parameterDefinitions = [new SqlServer2017ReportingServicesRestApi.ReportParameterDefinitionPatch()];
          parameterDefinitions[0].name = "";
          parameterDefinitions[0].defaultValues = [""];
          parameterDefinitions[0].prompt = "";
          parameterDefinitions[0].parameterVisibility = new SqlServer2017ReportingServicesRestApi.ReportParameterVisibility();

          instance.updateReportParameterDefinitions(id, parameterDefinitions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateReportProperties', function() {
        it('should call updateReportProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for updateReportProperties call
          /*
          var id = "id_example";
          var properties = [new SqlServer2017ReportingServicesRestApi.Property()];
          properties[0].name = "";
          properties[0].value = "";

          instance.updateReportProperties(id, properties, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
