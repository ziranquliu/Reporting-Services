/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlServer2017ReportingServicesRestApi);
  }
}(this, function(expect, SqlServer2017ReportingServicesRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlServer2017ReportingServicesRestApi.LinkedReportsApi();
  });

  describe('(package)', function() {
    describe('LinkedReportsApi', function() {
      describe('addLinkedReport', function() {
        it('should call addLinkedReport successfully', function(done) {
          // TODO: uncomment, update parameter values for addLinkedReport call and complete the assertions
          /*
          var linkedReport = new SqlServer2017ReportingServicesRestApi.LinkedReport();
          linkedReport.id = "01234567-89ab-cdef-0123-456789abcdef";
          linkedReport.name = "";
          linkedReport.description = "";
          linkedReport.path = "";
          linkedReport.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          linkedReport.hidden = false;
          linkedReport.size = "0";
          linkedReport.modifiedBy = "";
          linkedReport.modifiedDate = 2017-04-13T15:51:04Z;
          linkedReport.createdBy = "";
          linkedReport.createdDate = 2017-04-13T15:51:04Z;
          linkedReport.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          linkedReport.contentType = "";
          linkedReport.content = "";
          linkedReport.isFavorite = false;
          linkedReport.hasParameters = false;
          linkedReport.link = "";

          instance.addLinkedReport(linkedReport, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.LinkedReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasParameters).to.be.a('boolean');
            expect(data.hasParameters).to.be(false);
            expect(data.link).to.be.a('string');
            expect(data.link).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addLinkedReportComment', function() {
        it('should call addLinkedReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for addLinkedReportComment call
          /*
          var id = "id_example";
          var comment = new SqlServer2017ReportingServicesRestApi.Comment();
          comment.id = """00000000-0000-0000-0000-000000000000";
          comment.itemId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.userName = "";
          comment.threadId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.attachmentPath = "";
          comment.text = "";
          comment.createdDate = 2017-04-13T15:51:04Z;
          comment.modifiedDate = 2017-04-13T15:51:04Z;

          instance.addLinkedReportComment(id, comment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addLinkedReportHistorySnapshot', function() {
        it('should call addLinkedReportHistorySnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for addLinkedReportHistorySnapshot call and complete the assertions
          /*
          var id = "id_example";

          instance.addLinkedReportHistorySnapshot(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteLinkedReport', function() {
        it('should call deleteLinkedReport successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteLinkedReport call
          /*
          var id = "id_example";

          instance.deleteLinkedReport(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteLinkedReportComment', function() {
        it('should call deleteLinkedReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteLinkedReportComment call
          /*
          var id = "id_example";
          var commentId = "commentId_example";

          instance.deleteLinkedReportComment(id, commentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteLinkedReportHistorySnapshot', function() {
        it('should call deleteLinkedReportHistorySnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteLinkedReportHistorySnapshot call and complete the assertions
          /*
          var id = "id_example";
          var historyId = "historyId_example";

          instance.deleteLinkedReportHistorySnapshot(id, historyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReport', function() {
        it('should call getLinkedReport successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReport call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReport(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.LinkedReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.hasParameters).to.be.a('boolean');
            expect(data.hasParameters).to.be(false);
            expect(data.link).to.be.a('string');
            expect(data.link).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportAllowedActions', function() {
        it('should call getLinkedReportAllowedActions successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportAllowedActions call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReportAllowedActions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataAllowedActions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.AllowedAction);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportCacheOptions', function() {
        it('should call getLinkedReportCacheOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportCacheOptions call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReportCacheOptions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.CacheOptions);
            expect(data.executionType).to.be.a(SqlServer2017ReportingServicesRestApi.ItemExecutionType);
                expect(data.expiration).to.be.a(SqlServer2017ReportingServicesRestApi.ExpirationReference);
                  expect(data.expiration.minutes).to.be.a('number');
              expect(data.expiration.minutes).to.be(0);
              expect(data.expiration.schedule).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleReference);
                    expect(data.expiration.schedule.scheduleId).to.be.a('string');
                expect(data.expiration.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.expiration.schedule.definition).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleDefinition);
                      expect(data.expiration.schedule.definition.startDateTime).to.be.a(Date);
                  expect(data.expiration.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                  expect(data.expiration.schedule.definition.endDate).to.be.a(Date);
                  expect(data.expiration.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                  expect(data.expiration.schedule.definition.endDateSpecified).to.be.a('boolean');
                  expect(data.expiration.schedule.definition.endDateSpecified).to.be(false);
                  expect(data.expiration.schedule.definition.recurrence).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleRecurrence);
                        expect(data.expiration.schedule.definition.recurrence.minuteRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MinuteRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                    expect(data.expiration.schedule.definition.recurrence.dailyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.DailyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                    expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.WeeklyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector);
                            expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                    expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MonthlyRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                      expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                      expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                    expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MonthlyDOWRecurrence);
                          expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(SqlServer2017ReportingServicesRestApi.WeekNumberEnum);
                          expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                      expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector);
                            expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                        expect(data.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportCacheRefreshPlans', function() {
        it('should call getLinkedReportCacheRefreshPlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportCacheRefreshPlans call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReportCacheRefreshPlans(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataCacheRefreshPlans);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.CacheRefreshPlan);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.catalogItemPath).to.be.a('string');
                expect(data.catalogItemPath).to.be("");
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("");
                expect(data.schedule).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleReference);
                      expect(data.schedule.scheduleId).to.be.a('string');
                  expect(data.schedule.scheduleId).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.schedule.definition).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleDefinition);
                        expect(data.schedule.definition.startDateTime).to.be.a(Date);
                    expect(data.schedule.definition.startDateTime).to.be(2017-04-13T15:51:04Z);
                    expect(data.schedule.definition.endDate).to.be.a(Date);
                    expect(data.schedule.definition.endDate).to.be(2017-04-13T15:51:04Z);
                    expect(data.schedule.definition.endDateSpecified).to.be.a('boolean');
                    expect(data.schedule.definition.endDateSpecified).to.be(false);
                    expect(data.schedule.definition.recurrence).to.be.a(SqlServer2017ReportingServicesRestApi.ScheduleRecurrence);
                          expect(data.schedule.definition.recurrence.minuteRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MinuteRecurrence);
                            expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.minuteRecurrence.minutesInterval).to.be(0);
                      expect(data.schedule.definition.recurrence.dailyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.DailyRecurrence);
                            expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.dailyRecurrence.daysInterval).to.be(0);
                      expect(data.schedule.definition.recurrence.weeklyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.WeeklyRecurrence);
                            expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be.a('number');
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksInterval).to.be(0);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be.a('boolean');
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified).to.be(false);
                        expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek).to.be.a(SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector);
                              expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday).to.be(false);
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MonthlyRecurrence);
                            expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be.a('string');
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.days).to.be("");
                        expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear).to.be.a(SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector);
                              expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december).to.be(false);
                      expect(data.schedule.definition.recurrence.monthlyDOWRecurrence).to.be.a(SqlServer2017ReportingServicesRestApi.MonthlyDOWRecurrence);
                            expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek).to.be.a(SqlServer2017ReportingServicesRestApi.WeekNumberEnum);
                            expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be.a('boolean');
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified).to.be(false);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek).to.be.a(SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector);
                              expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday).to.be(false);
                        expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear).to.be.a(SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector);
                              expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november).to.be(false);
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be.a('boolean');
                          expect(data.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december).to.be(false);
                expect(data.lastRunTime).to.be.a(Date);
                expect(data.lastRunTime).to.be(2017-04-13T15:51:04Z);
                expect(data.lastStatus).to.be.a('string');
                expect(data.lastStatus).to.be("");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                {
                  let dataCtr = data.parameterValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ParameterValue);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.isValueFieldReference).to.be.a('boolean');
                    expect(data.isValueFieldReference).to.be(false);
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportComments', function() {
        it('should call getLinkedReportComments successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportComments call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReportComments(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataComments);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Comment);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.itemId).to.be.a('string');
                expect(data.itemId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.threadId).to.be.a('string');
                expect(data.threadId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.attachmentPath).to.be.a('string');
                expect(data.attachmentPath).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportHistorySnapshot', function() {
        it('should call getLinkedReportHistorySnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportHistorySnapshot call and complete the assertions
          /*
          var id = "id_example";
          var historyId = "historyId_example";

          instance.getLinkedReportHistorySnapshot(id, historyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.HistorySnapshot);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.historyId).to.be.a('string');
            expect(data.historyId).to.be("");
            expect(data.creationDate).to.be.a(Date);
            expect(data.creationDate).to.be(2017-04-13T15:51:04Z);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportHistorySnapshotOptions', function() {
        it('should call getLinkedReportHistorySnapshotOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportHistorySnapshotOptions call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReportHistorySnapshotOptions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.HistorySnapshotOptions);
            expect(data.catalogItemId).to.be.a('string');
            expect(data.catalogItemId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.historySnapshotsOptions).to.be.a(SqlServer2017ReportingServicesRestApi.ReportHistorySnapshotsOptions);
                  expect(data.historySnapshotsOptions.manualCreationEnabled).to.be.a('boolean');
              expect(data.historySnapshotsOptions.manualCreationEnabled).to.be(false);
              expect(data.historySnapshotsOptions.keepExecutionSnapshots).to.be.a('boolean');
              expect(data.historySnapshotsOptions.keepExecutionSnapshots).to.be(false);
              expect(data.historySnapshotsOptions.useDefaultSystemLimit).to.be.a('boolean');
              expect(data.historySnapshotsOptions.useDefaultSystemLimit).to.be(false);
              expect(data.historySnapshotsOptions.scopedLimit).to.be.a('number');
              expect(data.historySnapshotsOptions.scopedLimit).to.be(0);
              expect(data.historySnapshotsOptions.systemLimit).to.be.a('number');
              expect(data.historySnapshotsOptions.systemLimit).to.be(0);
              expect(data.historySnapshotsOptions.schedule).to.be.a(Object);
              expect(data.historySnapshotsOptions.schedule).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportHistorySnapshots', function() {
        it('should call getLinkedReportHistorySnapshots successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportHistorySnapshots call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReportHistorySnapshots(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.HistorySnapshot);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
              expect(data.historyId).to.be.a('string');
              expect(data.historyId).to.be("");
              expect(data.creationDate).to.be.a(Date);
              expect(data.creationDate).to.be(2017-04-13T15:51:04Z);
              expect(data.size).to.be.a('number');
              expect(data.size).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportParameterDefinitions', function() {
        it('should call getLinkedReportParameterDefinitions successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportParameterDefinitions call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReportParameterDefinitions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataReportParameterDefinitions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ReportParameterDefinition);
                expect(data.allowBlank).to.be.a('boolean');
                expect(data.allowBlank).to.be(false);
                {
                  let dataCtr = data.defaultValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.defaultValuesIsNull).to.be.a('boolean');
                expect(data.defaultValuesIsNull).to.be(false);
                expect(data.defaultValuesQueryBased).to.be.a('boolean');
                expect(data.defaultValuesQueryBased).to.be(false);
                {
                  let dataCtr = data.dependencies;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.errorMessage).to.be.a('string');
                expect(data.errorMessage).to.be("");
                expect(data.multiValue).to.be.a('boolean');
                expect(data.multiValue).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.nullable).to.be.a('boolean');
                expect(data.nullable).to.be(false);
                expect(data.parameterState).to.be.a(SqlServer2017ReportingServicesRestApi.ReportParameterState);
                    expect(data.parameterType).to.be.a(SqlServer2017ReportingServicesRestApi.ReportParameterType);
                    expect(data.parameterVisibility).to.be.a(SqlServer2017ReportingServicesRestApi.ReportParameterVisibility);
                    expect(data.prompt).to.be.a('string');
                expect(data.prompt).to.be("");
                expect(data.promptUser).to.be.a('boolean');
                expect(data.promptUser).to.be(false);
                expect(data.queryParameter).to.be.a('boolean');
                expect(data.queryParameter).to.be(false);
                {
                  let dataCtr = data.validValues;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ValidValue);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
                expect(data.validValuesIsNull).to.be.a('boolean');
                expect(data.validValuesIsNull).to.be(false);
                expect(data.validValuesQueryBased).to.be.a('boolean');
                expect(data.validValuesQueryBased).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportPolicies', function() {
        it('should call getLinkedReportPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportPolicies call and complete the assertions
          /*
          var id = "id_example";

          instance.getLinkedReportPolicies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ItemPolicy);
              expect(data.inheritParentPolicy).to.be.a('boolean');
              expect(data.inheritParentPolicy).to.be(false);
              {
                let dataCtr = data.policies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Policy);
                  expect(data.groupUserName).to.be.a('string');
                  expect(data.groupUserName).to.be("");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Role);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReportProperties', function() {
        it('should call getLinkedReportProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReportProperties call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.properties = ["properties_example"];

          instance.getLinkedReportProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataProperties);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Property);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLinkedReports', function() {
        it('should call getLinkedReports successfully', function(done) {
          // TODO: uncomment, update parameter values for getLinkedReports call and complete the assertions
          /*
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";
          opts.orderBy = "orderBy_example";
          opts.select = "select_example";

          instance.getLinkedReports(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataLinkedReports);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.LinkedReport);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
                expect(data.hasParameters).to.be.a('boolean');
                expect(data.hasParameters).to.be(false);
                expect(data.link).to.be.a('string');
                expect(data.link).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setLinkedReportCacheOptions', function() {
        it('should call setLinkedReportCacheOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for setLinkedReportCacheOptions call
          /*
          var id = "id_example";
          var cacheOptions = new SqlServer2017ReportingServicesRestApi.CacheOptions();
          cacheOptions.executionType = new SqlServer2017ReportingServicesRestApi.ItemExecutionType();
          cacheOptions.expiration = new SqlServer2017ReportingServicesRestApi.ExpirationReference();
          cacheOptions.expiration.minutes = 0;
          cacheOptions.expiration.schedule = new SqlServer2017ReportingServicesRestApi.ScheduleReference();
          cacheOptions.expiration.schedule.scheduleId = """00000000-0000-0000-0000-000000000000";
          cacheOptions.expiration.schedule.definition = new SqlServer2017ReportingServicesRestApi.ScheduleDefinition();
          cacheOptions.expiration.schedule.definition.startDateTime = 2017-04-13T15:51:04Z;
          cacheOptions.expiration.schedule.definition.endDate = 2017-04-13T15:51:04Z;
          cacheOptions.expiration.schedule.definition.endDateSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence = new SqlServer2017ReportingServicesRestApi.ScheduleRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.minuteRecurrence = new SqlServer2017ReportingServicesRestApi.MinuteRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.minuteRecurrence.minutesInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.dailyRecurrence = new SqlServer2017ReportingServicesRestApi.DailyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.dailyRecurrence.daysInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence = new SqlServer2017ReportingServicesRestApi.WeeklyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksInterval = 0;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.weeksIntervalSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek = new SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector();
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.sunday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.monday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.tuesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.wednesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.thursday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.friday = false;
          cacheOptions.expiration.schedule.definition.recurrence.weeklyRecurrence.daysOfWeek.saturday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence = new SqlServer2017ReportingServicesRestApi.MonthlyRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.days = "";
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear = new SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.january = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.february = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.march = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.april = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.may = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.june = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.july = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.august = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.september = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.october = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.november = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyRecurrence.monthsOfYear.december = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence = new SqlServer2017ReportingServicesRestApi.MonthlyDOWRecurrence();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeek = new SqlServer2017ReportingServicesRestApi.WeekNumberEnum();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.whichWeekSpecified = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek = new SqlServer2017ReportingServicesRestApi.DaysOfWeekSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.sunday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.monday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.tuesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.wednesday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.thursday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.friday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.daysOfWeek.saturday = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear = new SqlServer2017ReportingServicesRestApi.MonthsOfYearSelector();
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.january = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.february = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.march = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.april = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.may = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.june = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.july = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.august = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.september = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.october = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.november = false;
          cacheOptions.expiration.schedule.definition.recurrence.monthlyDOWRecurrence.monthsOfYear.december = false;

          instance.setLinkedReportCacheOptions(id, cacheOptions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setLinkedReportHistorySnapshotOptions', function() {
        it('should call setLinkedReportHistorySnapshotOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for setLinkedReportHistorySnapshotOptions call
          /*
          var id = "id_example";
          var historySnapshotOptions = new SqlServer2017ReportingServicesRestApi.HistorySnapshotOptions();
          historySnapshotOptions.catalogItemId = "01234567-89ab-cdef-0123-456789abcdef";
          historySnapshotOptions.historySnapshotsOptions = new SqlServer2017ReportingServicesRestApi.ReportHistorySnapshotsOptions();
          historySnapshotOptions.historySnapshotsOptions.manualCreationEnabled = false;
          historySnapshotOptions.historySnapshotsOptions.keepExecutionSnapshots = false;
          historySnapshotOptions.historySnapshotsOptions.useDefaultSystemLimit = false;
          historySnapshotOptions.historySnapshotsOptions.scopedLimit = 0;
          historySnapshotOptions.historySnapshotsOptions.systemLimit = 0;
          historySnapshotOptions.historySnapshotsOptions.schedule = ;

          instance.setLinkedReportHistorySnapshotOptions(id, historySnapshotOptions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setLinkedReportPolicies', function() {
        it('should call setLinkedReportPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for setLinkedReportPolicies call
          /*
          var id = "id_example";
          var itemPolicy = [new SqlServer2017ReportingServicesRestApi.ItemPolicy()];
          itemPolicy[0].inheritParentPolicy = false;
          itemPolicy[0].policies = [new SqlServer2017ReportingServicesRestApi.Policy()];
          itemPolicy[0].policies[0].groupUserName = "";
          itemPolicy[0].policies[0].roles = [new SqlServer2017ReportingServicesRestApi.Role()];
          itemPolicy[0].policies[0].roles[0].name = "";
          itemPolicy[0].policies[0].roles[0].description = "";

          instance.setLinkedReportPolicies(id, itemPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateLinkedReport', function() {
        it('should call updateLinkedReport successfully', function(done) {
          // TODO: uncomment, update parameter values for updateLinkedReport call
          /*
          var id = "id_example";
          var linkedReport = new SqlServer2017ReportingServicesRestApi.LinkedReport();
          linkedReport.id = "01234567-89ab-cdef-0123-456789abcdef";
          linkedReport.name = "";
          linkedReport.description = "";
          linkedReport.path = "";
          linkedReport.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          linkedReport.hidden = false;
          linkedReport.size = "0";
          linkedReport.modifiedBy = "";
          linkedReport.modifiedDate = 2017-04-13T15:51:04Z;
          linkedReport.createdBy = "";
          linkedReport.createdDate = 2017-04-13T15:51:04Z;
          linkedReport.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          linkedReport.contentType = "";
          linkedReport.content = "";
          linkedReport.isFavorite = false;
          linkedReport.hasParameters = false;
          linkedReport.link = "";

          instance.updateLinkedReport(id, linkedReport, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateLinkedReportComment', function() {
        it('should call updateLinkedReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for updateLinkedReportComment call
          /*
          var id = "id_example";
          var commentId = "commentId_example";
          var comment = new SqlServer2017ReportingServicesRestApi.Comment();
          comment.id = """00000000-0000-0000-0000-000000000000";
          comment.itemId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.userName = "";
          comment.threadId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.attachmentPath = "";
          comment.text = "";
          comment.createdDate = 2017-04-13T15:51:04Z;
          comment.modifiedDate = 2017-04-13T15:51:04Z;

          instance.updateLinkedReportComment(id, commentId, comment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateLinkedReportParameterDefinitions', function() {
        it('should call updateLinkedReportParameterDefinitions successfully', function(done) {
          // TODO: uncomment, update parameter values for updateLinkedReportParameterDefinitions call
          /*
          var id = "id_example";
          var parameterDefinitions = [new SqlServer2017ReportingServicesRestApi.ReportParameterDefinitionPatch()];
          parameterDefinitions[0].name = "";
          parameterDefinitions[0].defaultValues = [""];
          parameterDefinitions[0].prompt = "";
          parameterDefinitions[0].parameterVisibility = new SqlServer2017ReportingServicesRestApi.ReportParameterVisibility();

          instance.updateLinkedReportParameterDefinitions(id, parameterDefinitions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateLinkedReportProperties', function() {
        it('should call updateLinkedReportProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for updateLinkedReportProperties call
          /*
          var id = "id_example";
          var properties = [new SqlServer2017ReportingServicesRestApi.Property()];
          properties[0].name = "";
          properties[0].value = "";

          instance.updateLinkedReportProperties(id, properties, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
