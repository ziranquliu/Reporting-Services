/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlServer2017ReportingServicesRestApi);
  }
}(this, function(expect, SqlServer2017ReportingServicesRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlServer2017ReportingServicesRestApi.ResourcesApi();
  });

  describe('(package)', function() {
    describe('ResourcesApi', function() {
      describe('addResource', function() {
        it('should call addResource successfully', function(done) {
          // TODO: uncomment, update parameter values for addResource call and complete the assertions
          /*
          var resource = new SqlServer2017ReportingServicesRestApi.Resource();
          resource.id = "01234567-89ab-cdef-0123-456789abcdef";
          resource.name = "";
          resource.description = "";
          resource.path = "";
          resource.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          resource.hidden = false;
          resource.size = "0";
          resource.modifiedBy = "";
          resource.modifiedDate = 2017-04-13T15:51:04Z;
          resource.createdBy = "";
          resource.createdDate = 2017-04-13T15:51:04Z;
          resource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          resource.contentType = "";
          resource.content = "";
          resource.isFavorite = false;

          instance.addResource(resource, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Resource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteResource', function() {
        it('should call deleteResource successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteResource call
          /*
          var id = "id_example";

          instance.deleteResource(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getResource', function() {
        it('should call getResource successfully', function(done) {
          // TODO: uncomment, update parameter values for getResource call and complete the assertions
          /*
          var id = "id_example";

          instance.getResource(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Resource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getResourceAllowedActions', function() {
        it('should call getResourceAllowedActions successfully', function(done) {
          // TODO: uncomment, update parameter values for getResourceAllowedActions call and complete the assertions
          /*
          var id = "id_example";

          instance.getResourceAllowedActions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataAllowedActions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.AllowedAction);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getResourceContent', function() {
        it('should call getResourceContent successfully', function(done) {
          // TODO: uncomment, update parameter values for getResourceContent call and complete the assertions
          /*
          var id = "id_example";

          instance.getResourceContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getResourcePolicies', function() {
        it('should call getResourcePolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getResourcePolicies call and complete the assertions
          /*
          var id = "id_example";

          instance.getResourcePolicies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ItemPolicy);
              expect(data.inheritParentPolicy).to.be.a('boolean');
              expect(data.inheritParentPolicy).to.be(false);
              {
                let dataCtr = data.policies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Policy);
                  expect(data.groupUserName).to.be.a('string');
                  expect(data.groupUserName).to.be("");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Role);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getResourceProperties', function() {
        it('should call getResourceProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getResourceProperties call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.properties = ["properties_example"];

          instance.getResourceProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataProperties);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Property);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getResources', function() {
        it('should call getResources successfully', function(done) {
          // TODO: uncomment, update parameter values for getResources call and complete the assertions
          /*
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";

          instance.getResources(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataResources);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Resource);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setResourcePolicies', function() {
        it('should call setResourcePolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for setResourcePolicies call
          /*
          var id = "id_example";
          var policies = [new SqlServer2017ReportingServicesRestApi.ItemPolicy()];
          policies[0].inheritParentPolicy = false;
          policies[0].policies = [new SqlServer2017ReportingServicesRestApi.Policy()];
          policies[0].policies[0].groupUserName = "";
          policies[0].policies[0].roles = [new SqlServer2017ReportingServicesRestApi.Role()];
          policies[0].policies[0].roles[0].name = "";
          policies[0].policies[0].roles[0].description = "";

          instance.setResourcePolicies(id, policies, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateResource', function() {
        it('should call updateResource successfully', function(done) {
          // TODO: uncomment, update parameter values for updateResource call and complete the assertions
          /*
          var id = "id_example";
          var resource = new SqlServer2017ReportingServicesRestApi.Resource();
          resource.id = "01234567-89ab-cdef-0123-456789abcdef";
          resource.name = "";
          resource.description = "";
          resource.path = "";
          resource.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          resource.hidden = false;
          resource.size = "0";
          resource.modifiedBy = "";
          resource.modifiedDate = 2017-04-13T15:51:04Z;
          resource.createdBy = "";
          resource.createdDate = 2017-04-13T15:51:04Z;
          resource.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          resource.contentType = "";
          resource.content = "";
          resource.isFavorite = false;

          instance.updateResource(id, resource, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Resource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateResourceProperties', function() {
        it('should call updateResourceProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for updateResourceProperties call
          /*
          var id = "id_example";
          var properties = [new SqlServer2017ReportingServicesRestApi.Property()];
          properties[0].name = "";
          properties[0].value = "";

          instance.updateResourceProperties(id, properties, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
