/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlServer2017ReportingServicesRestApi);
  }
}(this, function(expect, SqlServer2017ReportingServicesRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlServer2017ReportingServicesRestApi.MobileReportsApi();
  });

  describe('(package)', function() {
    describe('MobileReportsApi', function() {
      describe('addMobileReport', function() {
        it('should call addMobileReport successfully', function(done) {
          // TODO: uncomment, update parameter values for addMobileReport call and complete the assertions
          /*
          var body = new SqlServer2017ReportingServicesRestApi.MobileReport();
          body.id = "01234567-89ab-cdef-0123-456789abcdef";
          body.name = "";
          body.description = "";
          body.path = "";
          body.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          body.hidden = false;
          body.size = "0";
          body.modifiedBy = "";
          body.modifiedDate = 2017-04-13T15:51:04Z;
          body.createdBy = "";
          body.createdDate = 2017-04-13T15:51:04Z;
          body.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          body.contentType = "";
          body.content = "";
          body.isFavorite = false;
          body.allowCaching = false;
          body.manifest = new SqlServer2017ReportingServicesRestApi.MobileReportManifest();
          body.manifest.resources = [new SqlServer2017ReportingServicesRestApi.ResourceGroup()];
          body.manifest.resources[0].type = new SqlServer2017ReportingServicesRestApi.MobileReportResourceGroupType();
          body.manifest.resources[0].items = [new SqlServer2017ReportingServicesRestApi.ResourceItem()];
          body.manifest.resources[0].items[0].id = """00000000-0000-0000-0000-000000000000";
          body.manifest.resources[0].items[0].path = "";
          body.manifest.resources[0].items[0].name = "";
          body.manifest.resources[0].items[0].hash = "";
          body.manifest.resources[0].items[0].key = "";
          body.manifest.dataSets = [new SqlServer2017ReportingServicesRestApi.DataSetItem()];
          body.manifest.dataSets[0].timeUnit = "";
          body.manifest.dataSets[0].dateTimeColumn = "";
          body.manifest.thumbnails = [new SqlServer2017ReportingServicesRestApi.ThumbnailItem()];
          body.manifest.thumbnails[0].id = """00000000-0000-0000-0000-000000000000";
          body.manifest.thumbnails[0].path = "";
          body.manifest.thumbnails[0].name = "";
          body.manifest.thumbnails[0].hash = "";
          body.manifest.thumbnails[0].type = new SqlServer2017ReportingServicesRestApi.MobileReportThumbnailType();
          body.hasSharedDataSets = false;

          instance.addMobileReport(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.allowCaching).to.be.a('boolean');
            expect(data.allowCaching).to.be(false);
            expect(data.manifest).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportManifest);
                  {
                let dataCtr = data.manifest.resources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ResourceGroup);
                  expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportResourceGroupType);
                      {
                    let dataCtr = data.items;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ResourceItem);
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.hash).to.be.a('string');
                      expect(data.hash).to.be("");
                      expect(data.key).to.be.a('string');
                      expect(data.key).to.be("");
                    }
                  }
                }
              }
              {
                let dataCtr = data.manifest.dataSets;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSetItem);
                  expect(data.timeUnit).to.be.a('string');
                  expect(data.timeUnit).to.be("");
                  expect(data.dateTimeColumn).to.be.a('string');
                  expect(data.dateTimeColumn).to.be("");
                }
              }
              {
                let dataCtr = data.manifest.thumbnails;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ThumbnailItem);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.path).to.be.a('string');
                  expect(data.path).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.hash).to.be.a('string');
                  expect(data.hash).to.be("");
                  expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportThumbnailType);
          
                }
              }
            expect(data.hasSharedDataSets).to.be.a('boolean');
            expect(data.hasSharedDataSets).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addMobileReportComment', function() {
        it('should call addMobileReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for addMobileReportComment call
          /*
          var id = "id_example";
          var comment = new SqlServer2017ReportingServicesRestApi.Comment();
          comment.id = """00000000-0000-0000-0000-000000000000";
          comment.itemId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.userName = "";
          comment.threadId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.attachmentPath = "";
          comment.text = "";
          comment.createdDate = 2017-04-13T15:51:04Z;
          comment.modifiedDate = 2017-04-13T15:51:04Z;

          instance.addMobileReportComment(id, comment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMobileReport', function() {
        it('should call deleteMobileReport successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMobileReport call
          /*
          var id = "id_example";

          instance.deleteMobileReport(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMobileReportComment', function() {
        it('should call deleteMobileReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMobileReportComment call
          /*
          var id = "id_example";
          var commentId = "commentId_example";

          instance.deleteMobileReportComment(id, commentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMobileReport', function() {
        it('should call getMobileReport successfully', function(done) {
          // TODO: uncomment, update parameter values for getMobileReport call and complete the assertions
          /*
          var id = "id_example";

          instance.getMobileReport(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.allowCaching).to.be.a('boolean');
            expect(data.allowCaching).to.be(false);
            expect(data.manifest).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportManifest);
                  {
                let dataCtr = data.manifest.resources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ResourceGroup);
                  expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportResourceGroupType);
                      {
                    let dataCtr = data.items;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ResourceItem);
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.hash).to.be.a('string');
                      expect(data.hash).to.be("");
                      expect(data.key).to.be.a('string');
                      expect(data.key).to.be("");
                    }
                  }
                }
              }
              {
                let dataCtr = data.manifest.dataSets;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSetItem);
                  expect(data.timeUnit).to.be.a('string');
                  expect(data.timeUnit).to.be("");
                  expect(data.dateTimeColumn).to.be.a('string');
                  expect(data.dateTimeColumn).to.be("");
                }
              }
              {
                let dataCtr = data.manifest.thumbnails;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ThumbnailItem);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.path).to.be.a('string');
                  expect(data.path).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.hash).to.be.a('string');
                  expect(data.hash).to.be("");
                  expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportThumbnailType);
          
                }
              }
            expect(data.hasSharedDataSets).to.be.a('boolean');
            expect(data.hasSharedDataSets).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMobileReportAllowedActions', function() {
        it('should call getMobileReportAllowedActions successfully', function(done) {
          // TODO: uncomment, update parameter values for getMobileReportAllowedActions call and complete the assertions
          /*
          var id = "id_example";

          instance.getMobileReportAllowedActions(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataAllowedActions);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.AllowedAction);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMobileReportComments', function() {
        it('should call getMobileReportComments successfully', function(done) {
          // TODO: uncomment, update parameter values for getMobileReportComments call and complete the assertions
          /*
          var id = "id_example";

          instance.getMobileReportComments(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataComments);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Comment);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.itemId).to.be.a('string');
                expect(data.itemId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.threadId).to.be.a('string');
                expect(data.threadId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.attachmentPath).to.be.a('string');
                expect(data.attachmentPath).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMobileReportContent', function() {
        it('should call getMobileReportContent successfully', function(done) {
          // TODO: uncomment, update parameter values for getMobileReportContent call and complete the assertions
          /*
          var id = "id_example";

          instance.getMobileReportContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMobileReportPolicies', function() {
        it('should call getMobileReportPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getMobileReportPolicies call and complete the assertions
          /*
          var id = "id_example";

          instance.getMobileReportPolicies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ItemPolicy);
              expect(data.inheritParentPolicy).to.be.a('boolean');
              expect(data.inheritParentPolicy).to.be(false);
              {
                let dataCtr = data.policies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Policy);
                  expect(data.groupUserName).to.be.a('string');
                  expect(data.groupUserName).to.be("");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Role);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                    }
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMobileReportProperties', function() {
        it('should call getMobileReportProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getMobileReportProperties call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.properties = ["properties_example"];

          instance.getMobileReportProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataProperties);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.Property);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMobileReports', function() {
        it('should call getMobileReports successfully', function(done) {
          // TODO: uncomment, update parameter values for getMobileReports call and complete the assertions
          /*
          var opts = {};
          opts.top = 56;
          opts.skip = 56;
          opts.filter = "filter_example";
          opts.count = "count_example";

          instance.getMobileReports(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ODataMobileReport);
            expect(data.odataContext).to.be.a('string');
            expect(data.odataContext).to.be("");
            expect(data.odataCount).to.be.a('number');
            expect(data.odataCount).to.be(0);
            {
              let dataCtr = data.value;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReport);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                    expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be("0");
                expect(data.modifiedBy).to.be.a('string');
                expect(data.modifiedBy).to.be("");
                expect(data.modifiedDate).to.be.a(Date);
                expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
                expect(data.parentFolderId).to.be.a('string');
                expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
                expect(data.contentType).to.be.a('string');
                expect(data.contentType).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.isFavorite).to.be.a('boolean');
                expect(data.isFavorite).to.be(false);
                expect(data.allowCaching).to.be.a('boolean');
                expect(data.allowCaching).to.be(false);
                expect(data.manifest).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportManifest);
                      {
                    let dataCtr = data.manifest.resources;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ResourceGroup);
                      expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportResourceGroupType);
                          {
                        let dataCtr = data.items;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ResourceItem);
                          expect(data.id).to.be.a('string');
                          expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                          expect(data.path).to.be.a('string');
                          expect(data.path).to.be("");
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.hash).to.be.a('string');
                          expect(data.hash).to.be("");
                          expect(data.key).to.be.a('string');
                          expect(data.key).to.be("");
                        }
                      }
                    }
                  }
                  {
                    let dataCtr = data.manifest.dataSets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSetItem);
                      expect(data.timeUnit).to.be.a('string');
                      expect(data.timeUnit).to.be("");
                      expect(data.dateTimeColumn).to.be.a('string');
                      expect(data.dateTimeColumn).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.manifest.thumbnails;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ThumbnailItem);
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.hash).to.be.a('string');
                      expect(data.hash).to.be("");
                      expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportThumbnailType);
              
                    }
                  }
                expect(data.hasSharedDataSets).to.be.a('boolean');
                expect(data.hasSharedDataSets).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setMobileReportPolicies', function() {
        it('should call setMobileReportPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for setMobileReportPolicies call
          /*
          var id = "id_example";
          var mobileReports = [new SqlServer2017ReportingServicesRestApi.ItemPolicy()];
          mobileReports[0].inheritParentPolicy = false;
          mobileReports[0].policies = [new SqlServer2017ReportingServicesRestApi.Policy()];
          mobileReports[0].policies[0].groupUserName = "";
          mobileReports[0].policies[0].roles = [new SqlServer2017ReportingServicesRestApi.Role()];
          mobileReports[0].policies[0].roles[0].name = "";
          mobileReports[0].policies[0].roles[0].description = "";

          instance.setMobileReportPolicies(id, mobileReports, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateMobileReport', function() {
        it('should call updateMobileReport successfully', function(done) {
          // TODO: uncomment, update parameter values for updateMobileReport call and complete the assertions
          /*
          var id = "id_example";
          var body = new SqlServer2017ReportingServicesRestApi.MobileReport();
          body.id = "01234567-89ab-cdef-0123-456789abcdef";
          body.name = "";
          body.description = "";
          body.path = "";
          body.type = new SqlServer2017ReportingServicesRestApi.CatalogItemType();
          body.hidden = false;
          body.size = "0";
          body.modifiedBy = "";
          body.modifiedDate = 2017-04-13T15:51:04Z;
          body.createdBy = "";
          body.createdDate = 2017-04-13T15:51:04Z;
          body.parentFolderId = "01234567-89ab-cdef-0123-456789abcdef";
          body.contentType = "";
          body.content = "";
          body.isFavorite = false;
          body.allowCaching = false;
          body.manifest = new SqlServer2017ReportingServicesRestApi.MobileReportManifest();
          body.manifest.resources = [new SqlServer2017ReportingServicesRestApi.ResourceGroup()];
          body.manifest.resources[0].type = new SqlServer2017ReportingServicesRestApi.MobileReportResourceGroupType();
          body.manifest.resources[0].items = [new SqlServer2017ReportingServicesRestApi.ResourceItem()];
          body.manifest.resources[0].items[0].id = """00000000-0000-0000-0000-000000000000";
          body.manifest.resources[0].items[0].path = "";
          body.manifest.resources[0].items[0].name = "";
          body.manifest.resources[0].items[0].hash = "";
          body.manifest.resources[0].items[0].key = "";
          body.manifest.dataSets = [new SqlServer2017ReportingServicesRestApi.DataSetItem()];
          body.manifest.dataSets[0].timeUnit = "";
          body.manifest.dataSets[0].dateTimeColumn = "";
          body.manifest.thumbnails = [new SqlServer2017ReportingServicesRestApi.ThumbnailItem()];
          body.manifest.thumbnails[0].id = """00000000-0000-0000-0000-000000000000";
          body.manifest.thumbnails[0].path = "";
          body.manifest.thumbnails[0].name = "";
          body.manifest.thumbnails[0].hash = "";
          body.manifest.thumbnails[0].type = new SqlServer2017ReportingServicesRestApi.MobileReportThumbnailType();
          body.hasSharedDataSets = false;

          instance.updateMobileReport(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.CatalogItemType);
                expect(data.hidden).to.be.a('boolean');
            expect(data.hidden).to.be(false);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be("0");
            expect(data.modifiedBy).to.be.a('string');
            expect(data.modifiedBy).to.be("");
            expect(data.modifiedDate).to.be.a(Date);
            expect(data.modifiedDate).to.be(2017-04-13T15:51:04Z);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(2017-04-13T15:51:04Z);
            expect(data.parentFolderId).to.be.a('string');
            expect(data.parentFolderId).to.be("01234567-89ab-cdef-0123-456789abcdef");
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.isFavorite).to.be.a('boolean');
            expect(data.isFavorite).to.be(false);
            expect(data.allowCaching).to.be.a('boolean');
            expect(data.allowCaching).to.be(false);
            expect(data.manifest).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportManifest);
                  {
                let dataCtr = data.manifest.resources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ResourceGroup);
                  expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportResourceGroupType);
                      {
                    let dataCtr = data.items;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ResourceItem);
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.hash).to.be.a('string');
                      expect(data.hash).to.be("");
                      expect(data.key).to.be.a('string');
                      expect(data.key).to.be("");
                    }
                  }
                }
              }
              {
                let dataCtr = data.manifest.dataSets;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.DataSetItem);
                  expect(data.timeUnit).to.be.a('string');
                  expect(data.timeUnit).to.be("");
                  expect(data.dateTimeColumn).to.be.a('string');
                  expect(data.dateTimeColumn).to.be("");
                }
              }
              {
                let dataCtr = data.manifest.thumbnails;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SqlServer2017ReportingServicesRestApi.ThumbnailItem);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.path).to.be.a('string');
                  expect(data.path).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.hash).to.be.a('string');
                  expect(data.hash).to.be("");
                  expect(data.type).to.be.a(SqlServer2017ReportingServicesRestApi.MobileReportThumbnailType);
          
                }
              }
            expect(data.hasSharedDataSets).to.be.a('boolean');
            expect(data.hasSharedDataSets).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateMobileReportComment', function() {
        it('should call updateMobileReportComment successfully', function(done) {
          // TODO: uncomment, update parameter values for updateMobileReportComment call
          /*
          var id = "id_example";
          var commentId = "commentId_example";
          var comment = new SqlServer2017ReportingServicesRestApi.Comment();
          comment.id = """00000000-0000-0000-0000-000000000000";
          comment.itemId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.userName = "";
          comment.threadId = "01234567-89ab-cdef-0123-456789abcdef";
          comment.attachmentPath = "";
          comment.text = "";
          comment.createdDate = 2017-04-13T15:51:04Z;
          comment.modifiedDate = 2017-04-13T15:51:04Z;

          instance.updateMobileReportComment(id, commentId, comment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateMobileReportProperties', function() {
        it('should call updateMobileReportProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for updateMobileReportProperties call
          /*
          var id = "id_example";
          var properties = [new SqlServer2017ReportingServicesRestApi.Property()];
          properties[0].name = "";
          properties[0].value = "";

          instance.updateMobileReportProperties(id, properties, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
