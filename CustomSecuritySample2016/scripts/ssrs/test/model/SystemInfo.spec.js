/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlServer2017ReportingServicesRestApi);
  }
}(this, function(expect, SqlServer2017ReportingServicesRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SystemInfo', function() {
      beforeEach(function() {
        instance = new SqlServer2017ReportingServicesRestApi.SystemInfo();
      });

      it('should create an instance of SystemInfo', function() {
        // TODO: update the code to test SystemInfo
        expect(instance).to.be.a(SqlServer2017ReportingServicesRestApi.SystemInfo);
      });

      it('should have the property reportServerAbsoluteUrl (base name: "ReportServerAbsoluteUrl")', function() {
        // TODO: update the code to test the property reportServerAbsoluteUrl
        expect(instance).to.have.property('reportServerAbsoluteUrl');
        // expect(instance.reportServerAbsoluteUrl).to.be(expectedValueLiteral);
      });

      it('should have the property reportServerRelativeUrl (base name: "ReportServerRelativeUrl")', function() {
        // TODO: update the code to test the property reportServerRelativeUrl
        expect(instance).to.have.property('reportServerRelativeUrl');
        // expect(instance.reportServerRelativeUrl).to.be(expectedValueLiteral);
      });

      it('should have the property webPortalRelativeUrl (base name: "WebPortalRelativeUrl")', function() {
        // TODO: update the code to test the property webPortalRelativeUrl
        expect(instance).to.have.property('webPortalRelativeUrl');
        // expect(instance.webPortalRelativeUrl).to.be(expectedValueLiteral);
      });

      it('should have the property productName (base name: "ProductName")', function() {
        // TODO: update the code to test the property productName
        expect(instance).to.have.property('productName');
        // expect(instance.productName).to.be(expectedValueLiteral);
      });

      it('should have the property productVersion (base name: "ProductVersion")', function() {
        // TODO: update the code to test the property productVersion
        expect(instance).to.have.property('productVersion');
        // expect(instance.productVersion).to.be(expectedValueLiteral);
      });

      it('should have the property productType (base name: "ProductType")', function() {
        // TODO: update the code to test the property productType
        expect(instance).to.have.property('productType');
        // expect(instance.productType).to.be(expectedValueLiteral);
      });

      it('should have the property timeZone (base name: "TimeZone")', function() {
        // TODO: update the code to test the property timeZone
        expect(instance).to.have.property('timeZone');
        // expect(instance.timeZone).to.be(expectedValueLiteral);
      });

    });
  });

}));
