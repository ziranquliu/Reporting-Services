/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CacheOptions', 'model/Comment', 'model/DataSet', 'model/DataSource', 'model/DataSourceCheckResult', 'model/HistorySnapshot', 'model/HistorySnapshotOptions', 'model/ItemPolicy', 'model/ODataAllowedActions', 'model/ODataCacheRefreshPlans', 'model/ODataComments', 'model/ODataDataSources', 'model/ODataDependentItems', 'model/ODataProperties', 'model/ODataReportParameterDefinitions', 'model/ODataReports', 'model/OdataError', 'model/Property', 'model/Report', 'model/ReportParameterDefinitionPatch', 'model/Subscription', 'model/UpdateCacheSnapshotResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CacheOptions'), require('../model/Comment'), require('../model/DataSet'), require('../model/DataSource'), require('../model/DataSourceCheckResult'), require('../model/HistorySnapshot'), require('../model/HistorySnapshotOptions'), require('../model/ItemPolicy'), require('../model/ODataAllowedActions'), require('../model/ODataCacheRefreshPlans'), require('../model/ODataComments'), require('../model/ODataDataSources'), require('../model/ODataDependentItems'), require('../model/ODataProperties'), require('../model/ODataReportParameterDefinitions'), require('../model/ODataReports'), require('../model/OdataError'), require('../model/Property'), require('../model/Report'), require('../model/ReportParameterDefinitionPatch'), require('../model/Subscription'), require('../model/UpdateCacheSnapshotResult'));
  } else {
    // Browser globals (root is window)
    if (!root.SqlServer2017ReportingServicesRestApi) {
      root.SqlServer2017ReportingServicesRestApi = {};
    }
    root.SqlServer2017ReportingServicesRestApi.ReportsApi = factory(root.SqlServer2017ReportingServicesRestApi.ApiClient, root.SqlServer2017ReportingServicesRestApi.CacheOptions, root.SqlServer2017ReportingServicesRestApi.Comment, root.SqlServer2017ReportingServicesRestApi.DataSet, root.SqlServer2017ReportingServicesRestApi.DataSource, root.SqlServer2017ReportingServicesRestApi.DataSourceCheckResult, root.SqlServer2017ReportingServicesRestApi.HistorySnapshot, root.SqlServer2017ReportingServicesRestApi.HistorySnapshotOptions, root.SqlServer2017ReportingServicesRestApi.ItemPolicy, root.SqlServer2017ReportingServicesRestApi.ODataAllowedActions, root.SqlServer2017ReportingServicesRestApi.ODataCacheRefreshPlans, root.SqlServer2017ReportingServicesRestApi.ODataComments, root.SqlServer2017ReportingServicesRestApi.ODataDataSources, root.SqlServer2017ReportingServicesRestApi.ODataDependentItems, root.SqlServer2017ReportingServicesRestApi.ODataProperties, root.SqlServer2017ReportingServicesRestApi.ODataReportParameterDefinitions, root.SqlServer2017ReportingServicesRestApi.ODataReports, root.SqlServer2017ReportingServicesRestApi.OdataError, root.SqlServer2017ReportingServicesRestApi.Property, root.SqlServer2017ReportingServicesRestApi.Report, root.SqlServer2017ReportingServicesRestApi.ReportParameterDefinitionPatch, root.SqlServer2017ReportingServicesRestApi.Subscription, root.SqlServer2017ReportingServicesRestApi.UpdateCacheSnapshotResult);
  }
}(this, function(ApiClient, CacheOptions, Comment, DataSet, DataSource, DataSourceCheckResult, HistorySnapshot, HistorySnapshotOptions, ItemPolicy, ODataAllowedActions, ODataCacheRefreshPlans, ODataComments, ODataDataSources, ODataDependentItems, ODataProperties, ODataReportParameterDefinitions, ODataReports, OdataError, Property, Report, ReportParameterDefinitionPatch, Subscription, UpdateCacheSnapshotResult) {
  'use strict';

  /**
   * Reports service.
   * @module api/ReportsApi
   * @version 2.0
   */

  /**
   * Constructs a new ReportsApi. 
   * @alias module:api/ReportsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addReport operation.
     * @callback module:api/ReportsApi~addReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Report CatalogItem.
     * @param {module:model/Report} report The definition of the new Report CatalogItem.
     * @param {module:api/ReportsApi~addReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Report}
     */
    this.addReport = function(report, callback) {
      var postBody = report;

      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling addReport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Report;

      return this.apiClient.callApi(
        '/Reports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addReportComment operation.
     * @callback module:api/ReportsApi~addReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Comment associated to the specified Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/Comment} comment The Comment to be created
     * @param {module:api/ReportsApi~addReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addReportComment = function(id, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addReportComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling addReportComment");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/Comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addReportHistorySnapshot operation.
     * @callback module:api/ReportsApi~addReportHistorySnapshotCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new HistorySnapshot
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~addReportHistorySnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.addReportHistorySnapshot = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addReportHistorySnapshot");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/Reports({Id})/HistorySnapshots', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkReportDataSourceConnection operation.
     * @callback module:api/ReportsApi~checkReportDataSourceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceCheckResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the status of the specified Reports DataSource connection.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} dataSourceName The name of the DataSource to check.
     * @param {module:api/ReportsApi~checkReportDataSourceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceCheckResult}
     */
    this.checkReportDataSourceConnection = function(id, dataSourceName, callback) {
      var postBody = dataSourceName;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling checkReportDataSourceConnection");
      }

      // verify the required parameter 'dataSourceName' is set
      if (dataSourceName === undefined || dataSourceName === null) {
        throw new Error("Missing the required parameter 'dataSourceName' when calling checkReportDataSourceConnection");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataSourceCheckResult;

      return this.apiClient.callApi(
        '/Reports({Id})/Model.CheckDataSourceConnection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReport operation.
     * @callback module:api/ReportsApi~deleteReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~deleteReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteReport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReportComment operation.
     * @callback module:api/ReportsApi~deleteReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Comment associated to the Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:api/ReportsApi~deleteReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteReportComment = function(id, commentId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteReportComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteReportComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/Comments({CommentId})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReportHistorySnapshot operation.
     * @callback module:api/ReportsApi~deleteReportHistorySnapshotCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the requested Reports HistorySnapshot specified by HistoryId.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} historyId The ID property of the HistorySnapshot
     * @param {module:api/ReportsApi~deleteReportHistorySnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.deleteReportHistorySnapshot = function(id, historyId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteReportHistorySnapshot");
      }

      // verify the required parameter 'historyId' is set
      if (historyId === undefined || historyId === null) {
        throw new Error("Missing the required parameter 'historyId' when calling deleteReportHistorySnapshot");
      }


      var pathParams = {
        'Id': id,
        'HistoryId': historyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/Reports({Id})/HistorySnapshots({HistoryId})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReport operation.
     * @callback module:api/ReportsApi~getReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Report CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Report}
     */
    this.getReport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Report;

      return this.apiClient.callApi(
        '/Reports({Id})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportAllowedActions operation.
     * @callback module:api/ReportsApi~getReportAllowedActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataAllowedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportAllowedActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataAllowedActions}
     */
    this.getReportAllowedActions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportAllowedActions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataAllowedActions;

      return this.apiClient.callApi(
        '/Reports({Id})/AllowedActions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportCacheOptions operation.
     * @callback module:api/ReportsApi~getReportCacheOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CacheOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content of CacheOptions for the Report specified by the Id
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportCacheOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CacheOptions}
     */
    this.getReportCacheOptions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportCacheOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CacheOptions;

      return this.apiClient.callApi(
        '/Reports({Id})/CacheOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportCacheRefreshPlans operation.
     * @callback module:api/ReportsApi~getReportCacheRefreshPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataCacheRefreshPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the CacheRefreshPlans for the Report specified by the Id
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportCacheRefreshPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataCacheRefreshPlans}
     */
    this.getReportCacheRefreshPlans = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportCacheRefreshPlans");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataCacheRefreshPlans;

      return this.apiClient.callApi(
        '/Reports({Id})/CacheRefreshPlans', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportComments operation.
     * @callback module:api/ReportsApi~getReportCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataComments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Comments for a Report specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataComments}
     */
    this.getReportComments = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportComments");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataComments;

      return this.apiClient.callApi(
        '/Reports({Id})/Comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportContent operation.
     * @callback module:api/ReportsApi~getReportContentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content of the specified Report CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getReportContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportContent");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = File;

      return this.apiClient.callApi(
        '/Reports({Id})/Content/$value', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportDataSources operation.
     * @callback module:api/ReportsApi~getReportDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDataSources} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the DataSources associated with the Report specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDataSources}
     */
    this.getReportDataSources = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportDataSources");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDataSources;

      return this.apiClient.callApi(
        '/Reports({Id})/DataSources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportDependentItems operation.
     * @callback module:api/ReportsApi~getReportDependentItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataDependentItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of CatalogItems that reference the Report specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportDependentItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataDependentItems}
     */
    this.getReportDependentItems = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportDependentItems");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataDependentItems;

      return this.apiClient.callApi(
        '/Reports({Id})/DependentItems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportHistorySnapshot operation.
     * @callback module:api/ReportsApi~getReportHistorySnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistorySnapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the requested Reports HistorySnapshot specified by HistoryId.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} historyId The ID property of the HistorySnapshot
     * @param {module:api/ReportsApi~getReportHistorySnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistorySnapshot}
     */
    this.getReportHistorySnapshot = function(id, historyId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportHistorySnapshot");
      }

      // verify the required parameter 'historyId' is set
      if (historyId === undefined || historyId === null) {
        throw new Error("Missing the required parameter 'historyId' when calling getReportHistorySnapshot");
      }


      var pathParams = {
        'Id': id,
        'HistoryId': historyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HistorySnapshot;

      return this.apiClient.callApi(
        '/Reports({Id})/HistorySnapshots({HistoryId})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportHistorySnapshotOptions operation.
     * @callback module:api/ReportsApi~getReportHistorySnapshotOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistorySnapshotOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the HistorySnapshotOptions for the specified Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportHistorySnapshotOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistorySnapshotOptions}
     */
    this.getReportHistorySnapshotOptions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportHistorySnapshotOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HistorySnapshotOptions;

      return this.apiClient.callApi(
        '/Reports({Id})/HistorySnapshotOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportHistorySnapshots operation.
     * @callback module:api/ReportsApi~getReportHistorySnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistorySnapshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of HistorySnapshots for the specified Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportHistorySnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistorySnapshot>}
     */
    this.getReportHistorySnapshots = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportHistorySnapshots");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [HistorySnapshot];

      return this.apiClient.callApi(
        '/Reports({Id})/HistorySnapshots', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportParameterDefinitions operation.
     * @callback module:api/ReportsApi~getReportParameterDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataReportParameterDefinitions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the ParameterDefinitions associated with the Report specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportParameterDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataReportParameterDefinitions}
     */
    this.getReportParameterDefinitions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportParameterDefinitions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataReportParameterDefinitions;

      return this.apiClient.callApi(
        '/Reports({Id})/ParameterDefinitions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportPolicies operation.
     * @callback module:api/ReportsApi~getReportPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets policies associated with the specified Report CatalogItem.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemPolicy>}
     */
    this.getReportPolicies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ItemPolicy];

      return this.apiClient.callApi(
        '/Reports({Id})/Policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportProperties operation.
     * @callback module:api/ReportsApi~getReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified Reports Properties (takes list of Property names to retrieve the values)
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.properties Names for the Properties to be returned.
     * @param {module:api/ReportsApi~getReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataProperties}
     */
    this.getReportProperties = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'properties': {
          value: opts['properties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataProperties;

      return this.apiClient.callApi(
        '/Reports({Id})/Properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportSharedDataSets operation.
     * @callback module:api/ReportsApi~getReportSharedDataSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the shared DataSets for the specified Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~getReportSharedDataSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataSet>}
     */
    this.getReportSharedDataSets = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportSharedDataSets");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DataSet];

      return this.apiClient.callApi(
        '/Reports({Id})/SharedDataSets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportSubscriptions operation.
     * @callback module:api/ReportsApi~getReportSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Subscriptions for the specified Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {Number} opts.skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {String} opts.filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {String} opts.count Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {String} opts.orderBy Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {String} opts.expand Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
     * @param {String} opts.select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {module:api/ReportsApi~getReportSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subscription>}
     */
    this.getReportSubscriptions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReportSubscriptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$count': opts['count'],
        '$orderBy': opts['orderBy'],
        '$expand': opts['expand'],
        '$select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Subscription];

      return this.apiClient.callApi(
        '/Reports({Id})/Subscriptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReports operation.
     * @callback module:api/ReportsApi~getReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataReports} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of Report CatalogItems.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {Number} opts.skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {String} opts.filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {String} opts.count Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {String} opts.orderBy Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {String} opts.select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {module:api/ReportsApi~getReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataReports}
     */
    this.getReports = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$count': opts['count'],
        '$orderBy': opts['orderBy'],
        '$select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataReports;

      return this.apiClient.callApi(
        '/Reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setReportCacheOptions operation.
     * @callback module:api/ReportsApi~setReportCacheOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the CacheOptions content for a given Report using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/CacheOptions} cacheOptions Updated definition for the CacheOptions content associated with the given Report.
     * @param {module:api/ReportsApi~setReportCacheOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setReportCacheOptions = function(id, cacheOptions, callback) {
      var postBody = cacheOptions;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setReportCacheOptions");
      }

      // verify the required parameter 'cacheOptions' is set
      if (cacheOptions === undefined || cacheOptions === null) {
        throw new Error("Missing the required parameter 'cacheOptions' when calling setReportCacheOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/CacheOptions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setReportDataSource operation.
     * @callback module:api/ReportsApi~setReportDataSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the DataSource definition associated with the Report specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/DataSource} dataSource Updated definition for the DataSource associated with the Report specified by the Id.
     * @param {module:api/ReportsApi~setReportDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setReportDataSource = function(id, dataSource, callback) {
      var postBody = dataSource;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setReportDataSource");
      }

      // verify the required parameter 'dataSource' is set
      if (dataSource === undefined || dataSource === null) {
        throw new Error("Missing the required parameter 'dataSource' when calling setReportDataSource");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/DataSources', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setReportHistorySnapshotOptions operation.
     * @callback module:api/ReportsApi~setReportHistorySnapshotOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates HistorySnapshotOptions for the specified Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/HistorySnapshotOptions} historySnapshotOptions Modified HistorySnapshotOptions object.
     * @param {module:api/ReportsApi~setReportHistorySnapshotOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setReportHistorySnapshotOptions = function(id, historySnapshotOptions, callback) {
      var postBody = historySnapshotOptions;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setReportHistorySnapshotOptions");
      }

      // verify the required parameter 'historySnapshotOptions' is set
      if (historySnapshotOptions === undefined || historySnapshotOptions === null) {
        throw new Error("Missing the required parameter 'historySnapshotOptions' when calling setReportHistorySnapshotOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/HistorySnapshotOptions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setReportPolicies operation.
     * @callback module:api/ReportsApi~setReportPoliciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces ItemPolicies associated with the Report specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ItemPolicy>} itemPolicies The ItemPolicy definitions that will be replaced.
     * @param {module:api/ReportsApi~setReportPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setReportPolicies = function(id, itemPolicies, callback) {
      var postBody = itemPolicies;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setReportPolicies");
      }

      // verify the required parameter 'itemPolicies' is set
      if (itemPolicies === undefined || itemPolicies === null) {
        throw new Error("Missing the required parameter 'itemPolicies' when calling setReportPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/Policies', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setReportSharedDataSets operation.
     * @callback module:api/ReportsApi~setReportSharedDataSetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the DataSet definitions associated with the specified Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/DataSet>} dataSets Updated DataSet definitions for the specified Report.
     * @param {module:api/ReportsApi~setReportSharedDataSetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setReportSharedDataSets = function(id, dataSets, callback) {
      var postBody = dataSets;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setReportSharedDataSets");
      }

      // verify the required parameter 'dataSets' is set
      if (dataSets === undefined || dataSets === null) {
        throw new Error("Missing the required parameter 'dataSets' when calling setReportSharedDataSets");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/SharedDataSets', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCacheSnapshot operation.
     * @callback module:api/ReportsApi~updateCacheSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCacheSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the execution cache snapshot for the specified report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/ReportsApi~updateCacheSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCacheSnapshotResult}
     */
    this.updateCacheSnapshot = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCacheSnapshot");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateCacheSnapshotResult;

      return this.apiClient.callApi(
        '/Reports({Id})/Model.UpdateCacheSnapshot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReport operation.
     * @callback module:api/ReportsApi~updateReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified Report CatalogItem using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/Report} report Definition of the Report item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {module:api/ReportsApi~updateReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateReport = function(id, report, callback) {
      var postBody = report;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateReport");
      }

      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling updateReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReportComment operation.
     * @callback module:api/ReportsApi~updateReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Comment specified by CommentId in the associated Report.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:model/Comment} comment The Comment to be updated
     * @param {module:api/ReportsApi~updateReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateReportComment = function(id, commentId, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateReportComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updateReportComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateReportComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/Comments({CommentId})', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReportParameterDefinitions operation.
     * @callback module:api/ReportsApi~updateReportParameterDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the ParameterDefinitions associated with the Report specified by Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ReportParameterDefinitionPatch>} parameterDefinitions Updated definitions for the ParameterDefinitions associated with the Report, represented as ParameterDefinitionsPatch object. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {module:api/ReportsApi~updateReportParameterDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateReportParameterDefinitions = function(id, parameterDefinitions, callback) {
      var postBody = parameterDefinitions;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateReportParameterDefinitions");
      }

      // verify the required parameter 'parameterDefinitions' is set
      if (parameterDefinitions === undefined || parameterDefinitions === null) {
        throw new Error("Missing the required parameter 'parameterDefinitions' when calling updateReportParameterDefinitions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/ParameterDefinitions', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReportProperties operation.
     * @callback module:api/ReportsApi~updateReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Report Properties included in the given list.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/Property>} properties The Properties that will be updated.
     * @param {module:api/ReportsApi~updateReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateReportProperties = function(id, properties, callback) {
      var postBody = properties;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateReportProperties");
      }

      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling updateReportProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/Reports({Id})/Properties', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
