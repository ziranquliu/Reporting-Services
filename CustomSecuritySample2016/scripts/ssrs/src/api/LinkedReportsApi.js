/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CacheOptions', 'model/Comment', 'model/HistorySnapshot', 'model/HistorySnapshotOptions', 'model/ItemPolicy', 'model/LinkedReport', 'model/ODataAllowedActions', 'model/ODataCacheRefreshPlans', 'model/ODataComments', 'model/ODataLinkedReports', 'model/ODataProperties', 'model/ODataReportParameterDefinitions', 'model/OdataError', 'model/Property', 'model/ReportParameterDefinitionPatch'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CacheOptions'), require('../model/Comment'), require('../model/HistorySnapshot'), require('../model/HistorySnapshotOptions'), require('../model/ItemPolicy'), require('../model/LinkedReport'), require('../model/ODataAllowedActions'), require('../model/ODataCacheRefreshPlans'), require('../model/ODataComments'), require('../model/ODataLinkedReports'), require('../model/ODataProperties'), require('../model/ODataReportParameterDefinitions'), require('../model/OdataError'), require('../model/Property'), require('../model/ReportParameterDefinitionPatch'));
  } else {
    // Browser globals (root is window)
    if (!root.SqlServer2017ReportingServicesRestApi) {
      root.SqlServer2017ReportingServicesRestApi = {};
    }
    root.SqlServer2017ReportingServicesRestApi.LinkedReportsApi = factory(root.SqlServer2017ReportingServicesRestApi.ApiClient, root.SqlServer2017ReportingServicesRestApi.CacheOptions, root.SqlServer2017ReportingServicesRestApi.Comment, root.SqlServer2017ReportingServicesRestApi.HistorySnapshot, root.SqlServer2017ReportingServicesRestApi.HistorySnapshotOptions, root.SqlServer2017ReportingServicesRestApi.ItemPolicy, root.SqlServer2017ReportingServicesRestApi.LinkedReport, root.SqlServer2017ReportingServicesRestApi.ODataAllowedActions, root.SqlServer2017ReportingServicesRestApi.ODataCacheRefreshPlans, root.SqlServer2017ReportingServicesRestApi.ODataComments, root.SqlServer2017ReportingServicesRestApi.ODataLinkedReports, root.SqlServer2017ReportingServicesRestApi.ODataProperties, root.SqlServer2017ReportingServicesRestApi.ODataReportParameterDefinitions, root.SqlServer2017ReportingServicesRestApi.OdataError, root.SqlServer2017ReportingServicesRestApi.Property, root.SqlServer2017ReportingServicesRestApi.ReportParameterDefinitionPatch);
  }
}(this, function(ApiClient, CacheOptions, Comment, HistorySnapshot, HistorySnapshotOptions, ItemPolicy, LinkedReport, ODataAllowedActions, ODataCacheRefreshPlans, ODataComments, ODataLinkedReports, ODataProperties, ODataReportParameterDefinitions, OdataError, Property, ReportParameterDefinitionPatch) {
  'use strict';

  /**
   * LinkedReports service.
   * @module api/LinkedReportsApi
   * @version 2.0
   */

  /**
   * Constructs a new LinkedReportsApi. 
   * @alias module:api/LinkedReportsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addLinkedReport operation.
     * @callback module:api/LinkedReportsApi~addLinkedReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new LinkedReport CatalogItem.
     * @param {module:model/LinkedReport} linkedReport The definition of the new LinkedReport CatalogItem.
     * @param {module:api/LinkedReportsApi~addLinkedReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedReport}
     */
    this.addLinkedReport = function(linkedReport, callback) {
      var postBody = linkedReport;

      // verify the required parameter 'linkedReport' is set
      if (linkedReport === undefined || linkedReport === null) {
        throw new Error("Missing the required parameter 'linkedReport' when calling addLinkedReport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LinkedReport;

      return this.apiClient.callApi(
        '/LinkedReports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLinkedReportComment operation.
     * @callback module:api/LinkedReportsApi~addLinkedReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Comment associated to the specified LinkedReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/Comment} comment The Comment to be created
     * @param {module:api/LinkedReportsApi~addLinkedReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLinkedReportComment = function(id, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addLinkedReportComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling addLinkedReportComment");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/Comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLinkedReportHistorySnapshot operation.
     * @callback module:api/LinkedReportsApi~addLinkedReportHistorySnapshotCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new HistorySnapshot
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~addLinkedReportHistorySnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.addLinkedReportHistorySnapshot = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addLinkedReportHistorySnapshot");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/LinkedReports({Id})/HistorySnapshots', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLinkedReport operation.
     * @callback module:api/LinkedReportsApi~deleteLinkedReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified LinkedReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~deleteLinkedReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLinkedReport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLinkedReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLinkedReportComment operation.
     * @callback module:api/LinkedReportsApi~deleteLinkedReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Comment associated to the LinkedReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:api/LinkedReportsApi~deleteLinkedReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLinkedReportComment = function(id, commentId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLinkedReportComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteLinkedReportComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/Comments({CommentId})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLinkedReportHistorySnapshot operation.
     * @callback module:api/LinkedReportsApi~deleteLinkedReportHistorySnapshotCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a HistorySnapshot specified by HistoryId from the LinkedReport specified by Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} historyId The Id property of the HistorySnapshot
     * @param {module:api/LinkedReportsApi~deleteLinkedReportHistorySnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.deleteLinkedReportHistorySnapshot = function(id, historyId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLinkedReportHistorySnapshot");
      }

      // verify the required parameter 'historyId' is set
      if (historyId === undefined || historyId === null) {
        throw new Error("Missing the required parameter 'historyId' when calling deleteLinkedReportHistorySnapshot");
      }


      var pathParams = {
        'Id': id,
        'HistoryId': historyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/LinkedReports({Id})/HistorySnapshots({HistoryId})', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReport operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a LinkedReport CatalogItem specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedReport}
     */
    this.getLinkedReport = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LinkedReport;

      return this.apiClient.callApi(
        '/LinkedReports({Id})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportAllowedActions operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportAllowedActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataAllowedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportAllowedActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataAllowedActions}
     */
    this.getLinkedReportAllowedActions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportAllowedActions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataAllowedActions;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/AllowedActions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportCacheOptions operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportCacheOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CacheOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content of CacheOptions for the LinkedReport specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportCacheOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CacheOptions}
     */
    this.getLinkedReportCacheOptions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportCacheOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CacheOptions;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/CacheOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportCacheRefreshPlans operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportCacheRefreshPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataCacheRefreshPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the CacheRefreshPlans for a LinkedReport specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportCacheRefreshPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataCacheRefreshPlans}
     */
    this.getLinkedReportCacheRefreshPlans = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportCacheRefreshPlans");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataCacheRefreshPlans;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/CacheRefreshPlans', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportComments operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataComments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Comments for a LinkedReport specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataComments}
     */
    this.getLinkedReportComments = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportComments");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataComments;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/Comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportHistorySnapshot operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportHistorySnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistorySnapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets requested HistorySnapshot item specified by HistoryId of the LinkedReport specified by Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} historyId The Id property of the HistorySnapshot
     * @param {module:api/LinkedReportsApi~getLinkedReportHistorySnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistorySnapshot}
     */
    this.getLinkedReportHistorySnapshot = function(id, historyId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportHistorySnapshot");
      }

      // verify the required parameter 'historyId' is set
      if (historyId === undefined || historyId === null) {
        throw new Error("Missing the required parameter 'historyId' when calling getLinkedReportHistorySnapshot");
      }


      var pathParams = {
        'Id': id,
        'HistoryId': historyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HistorySnapshot;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/HistorySnapshots({HistoryId})', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportHistorySnapshotOptions operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportHistorySnapshotOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistorySnapshotOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets HistorySnapshotOptions for the specified LinkedReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportHistorySnapshotOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistorySnapshotOptions}
     */
    this.getLinkedReportHistorySnapshotOptions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportHistorySnapshotOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HistorySnapshotOptions;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/HistorySnapshotOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportHistorySnapshots operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportHistorySnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistorySnapshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of HistorySnapshots of the LinkedReport specified by Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportHistorySnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistorySnapshot>}
     */
    this.getLinkedReportHistorySnapshots = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportHistorySnapshots");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [HistorySnapshot];

      return this.apiClient.callApi(
        '/LinkedReports({Id})/HistorySnapshots', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportParameterDefinitions operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportParameterDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataReportParameterDefinitions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the ParameterDefinitions associated with the LinkedReport specified by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportParameterDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataReportParameterDefinitions}
     */
    this.getLinkedReportParameterDefinitions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportParameterDefinitions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataReportParameterDefinitions;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/ParameterDefinitions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportPolicies operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ItemPolicies associated with the specified LinkedReport CatalogItem.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:api/LinkedReportsApi~getLinkedReportPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemPolicy>}
     */
    this.getLinkedReportPolicies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ItemPolicy];

      return this.apiClient.callApi(
        '/LinkedReports({Id})/Policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReportProperties operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets LinkedReport Properties (takes list of Property names to retrieve the values)
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.properties Names for the Properties to be returned.
     * @param {module:api/LinkedReportsApi~getLinkedReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataProperties}
     */
    this.getLinkedReportProperties = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLinkedReportProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'properties': {
          value: opts['properties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataProperties;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/Properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedReports operation.
     * @callback module:api/LinkedReportsApi~getLinkedReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ODataLinkedReports} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an array of LinkedReport CatalogItems.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
     * @param {Number} opts.skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
     * @param {String} opts.filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
     * @param {String} opts.count Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
     * @param {String} opts.orderBy Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
     * @param {String} opts.select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
     * @param {module:api/LinkedReportsApi~getLinkedReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ODataLinkedReports}
     */
    this.getLinkedReports = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$count': opts['count'],
        '$orderBy': opts['orderBy'],
        '$select': opts['select'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ODataLinkedReports;

      return this.apiClient.callApi(
        '/LinkedReports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setLinkedReportCacheOptions operation.
     * @callback module:api/LinkedReportsApi~setLinkedReportCacheOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the CacheOption's content for a given LinkedReport using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/CacheOptions} cacheOptions Updated definition for the CacheOption's content associated with the LinkedReport specified by the Id.
     * @param {module:api/LinkedReportsApi~setLinkedReportCacheOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setLinkedReportCacheOptions = function(id, cacheOptions, callback) {
      var postBody = cacheOptions;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLinkedReportCacheOptions");
      }

      // verify the required parameter 'cacheOptions' is set
      if (cacheOptions === undefined || cacheOptions === null) {
        throw new Error("Missing the required parameter 'cacheOptions' when calling setLinkedReportCacheOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/CacheOptions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setLinkedReportHistorySnapshotOptions operation.
     * @callback module:api/LinkedReportsApi~setLinkedReportHistorySnapshotOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates HistorySnapshotOptions property.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/HistorySnapshotOptions} historySnapshotOptions Modified HistorySnapshotOptions object.
     * @param {module:api/LinkedReportsApi~setLinkedReportHistorySnapshotOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setLinkedReportHistorySnapshotOptions = function(id, historySnapshotOptions, callback) {
      var postBody = historySnapshotOptions;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLinkedReportHistorySnapshotOptions");
      }

      // verify the required parameter 'historySnapshotOptions' is set
      if (historySnapshotOptions === undefined || historySnapshotOptions === null) {
        throw new Error("Missing the required parameter 'historySnapshotOptions' when calling setLinkedReportHistorySnapshotOptions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/HistorySnapshotOptions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setLinkedReportPolicies operation.
     * @callback module:api/LinkedReportsApi~setLinkedReportPoliciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces ItemPolicies associated with the specified LinkedReport item.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ItemPolicy>} itemPolicy The ItemPolicy definitions that will be replaced.
     * @param {module:api/LinkedReportsApi~setLinkedReportPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setLinkedReportPolicies = function(id, itemPolicy, callback) {
      var postBody = itemPolicy;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLinkedReportPolicies");
      }

      // verify the required parameter 'itemPolicy' is set
      if (itemPolicy === undefined || itemPolicy === null) {
        throw new Error("Missing the required parameter 'itemPolicy' when calling setLinkedReportPolicies");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/Policies', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLinkedReport operation.
     * @callback module:api/LinkedReportsApi~updateLinkedReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified LinkedReport CatalogItem using the provided definition.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {module:model/LinkedReport} linkedReport Definition of the LinkedReport item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.
     * @param {module:api/LinkedReportsApi~updateLinkedReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLinkedReport = function(id, linkedReport, callback) {
      var postBody = linkedReport;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLinkedReport");
      }

      // verify the required parameter 'linkedReport' is set
      if (linkedReport === undefined || linkedReport === null) {
        throw new Error("Missing the required parameter 'linkedReport' when calling updateLinkedReport");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLinkedReportComment operation.
     * @callback module:api/LinkedReportsApi~updateLinkedReportCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Comment specified by CommentId in the associated LinkedReport.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {String} commentId The Id of the Comment.
     * @param {module:model/Comment} comment The Comment to be updated
     * @param {module:api/LinkedReportsApi~updateLinkedReportCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLinkedReportComment = function(id, commentId, comment, callback) {
      var postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLinkedReportComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updateLinkedReportComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateLinkedReportComment");
      }


      var pathParams = {
        'Id': id,
        'CommentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/Comments({CommentId})', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLinkedReportParameterDefinitions operation.
     * @callback module:api/LinkedReportsApi~updateLinkedReportParameterDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the ParameterDefinitions associated with the specified LinkedReport by the Id.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/ReportParameterDefinitionPatch>} parameterDefinitions Updated definitions for the ParameterDefinitions associated with the LinkedReport, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property values will be left unchanged.
     * @param {module:api/LinkedReportsApi~updateLinkedReportParameterDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLinkedReportParameterDefinitions = function(id, parameterDefinitions, callback) {
      var postBody = parameterDefinitions;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLinkedReportParameterDefinitions");
      }

      // verify the required parameter 'parameterDefinitions' is set
      if (parameterDefinitions === undefined || parameterDefinitions === null) {
        throw new Error("Missing the required parameter 'parameterDefinitions' when calling updateLinkedReportParameterDefinitions");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/ParameterDefinitions', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLinkedReportProperties operation.
     * @callback module:api/LinkedReportsApi~updateLinkedReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the LinkedReport Properties included in the given list.
     * @param {String} id The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path='/folder1/folder2/item' If the path itself contains single quote, it should be escaped - add another single quote.
     * @param {Array.<module:model/Property>} properties The Properties that will be updated.
     * @param {module:api/LinkedReportsApi~updateLinkedReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLinkedReportProperties = function(id, properties, callback) {
      var postBody = properties;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLinkedReportProperties");
      }

      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling updateLinkedReportProperties");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LinkedReports({Id})/Properties', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
