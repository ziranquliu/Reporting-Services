/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CatalogItemType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CatalogItemType'));
  } else {
    // Browser globals (root is window)
    if (!root.SqlServer2017ReportingServicesRestApi) {
      root.SqlServer2017ReportingServicesRestApi = {};
    }
    root.SqlServer2017ReportingServicesRestApi.CatalogItem = factory(root.SqlServer2017ReportingServicesRestApi.ApiClient, root.SqlServer2017ReportingServicesRestApi.CatalogItemType);
  }
}(this, function(ApiClient, CatalogItemType) {
  'use strict';

  /**
   * The CatalogItem model module.
   * @module model/CatalogItem
   * @version 2.0
   */

  /**
   * Constructs a new <code>CatalogItem</code>.
   * CatalogItem is an abstract type that contains the common properties of all the types of CatalogItems. Hence, it is the base type from which the other CatalogItem types are derived.
   * @alias module:model/CatalogItem
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>CatalogItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CatalogItem} obj Optional instance to populate.
   * @return {module:model/CatalogItem} The populated <code>CatalogItem</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Id'))
        obj.id = ApiClient.convertToType(data['Id'], 'String');
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('Description'))
        obj.description = ApiClient.convertToType(data['Description'], 'String');
      if (data.hasOwnProperty('Path'))
        obj.path = ApiClient.convertToType(data['Path'], 'String');
      if (data.hasOwnProperty('Type'))
        obj.type = CatalogItemType.constructFromObject(data['Type']);
      if (data.hasOwnProperty('Hidden'))
        obj.hidden = ApiClient.convertToType(data['Hidden'], 'Boolean');
      if (data.hasOwnProperty('Size'))
        obj.size = ApiClient.convertToType(data['Size'], 'Number');
      if (data.hasOwnProperty('ModifiedBy'))
        obj.modifiedBy = ApiClient.convertToType(data['ModifiedBy'], 'String');
      if (data.hasOwnProperty('ModifiedDate'))
        obj.modifiedDate = ApiClient.convertToType(data['ModifiedDate'], 'Date');
      if (data.hasOwnProperty('CreatedBy'))
        obj.createdBy = ApiClient.convertToType(data['CreatedBy'], 'String');
      if (data.hasOwnProperty('CreatedDate'))
        obj.createdDate = ApiClient.convertToType(data['CreatedDate'], 'Date');
      if (data.hasOwnProperty('ParentFolderId'))
        obj.parentFolderId = ApiClient.convertToType(data['ParentFolderId'], 'String');
      if (data.hasOwnProperty('ContentType'))
        obj.contentType = ApiClient.convertToType(data['ContentType'], 'String');
      if (data.hasOwnProperty('Content'))
        obj.content = ApiClient.convertToType(data['Content'], 'String');
      if (data.hasOwnProperty('IsFavorite'))
        obj.isFavorite = ApiClient.convertToType(data['IsFavorite'], 'Boolean');
    }
    return obj;
  }

  /**
   * A unique UUID value that specifies the identifier by which this CatalogItem can be referenced in requests or by other defined objects.
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * A string value that specifies the name for the CatalogItem. This name is typically displayed in the user interface.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * A string value that contains descriptive text about the CatalogItem.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * A string value that contains the full server path for the CatalogItem. Path is defined as an alternate key on the CatalogItem and can be used as the parameter by which CatalogItem can be referenced in requests or by other defined objects.
   * @member {String} path
   */
  exports.prototype.path = undefined;

  /**
   * @member {module:model/CatalogItemType} type
   */
  exports.prototype.type = undefined;

  /**
   * A boolean value that indicates if the CatalogItem is hidden. If true, the item will generally not appear in listings of CatalogItems within the parent item.
   * @member {Boolean} hidden
   */
  exports.prototype.hidden = undefined;

  /**
   * An Int64 value that contains the size of the CatalogItem in bytes.
   * @member {Number} size
   */
  exports.prototype.size = undefined;

  /**
   * A string value that contains the network user name of the last user to modify the CatalogItem.
   * @member {String} modifiedBy
   */
  exports.prototype.modifiedBy = undefined;

  /**
   * A string value that contains the date-time of the last modification to the CatalogItem.
   * @member {Date} modifiedDate
   */
  exports.prototype.modifiedDate = undefined;

  /**
   * A string value that represents the network user name of the user who originally created the CatalogItem.
   * @member {String} createdBy
   */
  exports.prototype.createdBy = undefined;

  /**
   * A string that contains the date-time of the creation of the CatalogItem.
   * @member {Date} createdDate
   */
  exports.prototype.createdDate = undefined;

  /**
   * A unique UUID value that specifies the identifier of the Folder CatalogItem that contains this CatalogItem.
   * @member {String} parentFolderId
   */
  exports.prototype.parentFolderId = undefined;

  /**
   * A string value that contains a SOAP MIME-type that is associated with the CatalogItem.
   * @member {String} contentType
   */
  exports.prototype.contentType = undefined;

  /**
   * A string value that contains binary encoding by base64url encoding rules. The value of this property is not processed by the server. In object creation the server receives and stores a value, and in object retrieval the server returns the previously stored value.
   * @member {String} content
   */
  exports.prototype.content = undefined;

  /**
   * A boolean value that specifies whether the CatalogItem is designated as a Favorite.
   * @member {Boolean} isFavorite
   */
  exports.prototype.isFavorite = undefined;

  return exports;

}));
