/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CatalogItem', 'model/CatalogItemType', 'model/CredentialsStoredInServer', 'model/CredentialsSuppliedByUser', 'model/Subscription'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CatalogItem'), require('./CatalogItemType'), require('./CredentialsStoredInServer'), require('./CredentialsSuppliedByUser'), require('./Subscription'));
  } else {
    // Browser globals (root is window)
    if (!root.SqlServer2017ReportingServicesRestApi) {
      root.SqlServer2017ReportingServicesRestApi = {};
    }
    root.SqlServer2017ReportingServicesRestApi.DataSource = factory(root.SqlServer2017ReportingServicesRestApi.ApiClient, root.SqlServer2017ReportingServicesRestApi.CatalogItem, root.SqlServer2017ReportingServicesRestApi.CatalogItemType, root.SqlServer2017ReportingServicesRestApi.CredentialsStoredInServer, root.SqlServer2017ReportingServicesRestApi.CredentialsSuppliedByUser, root.SqlServer2017ReportingServicesRestApi.Subscription);
  }
}(this, function(ApiClient, CatalogItem, CatalogItemType, CredentialsStoredInServer, CredentialsSuppliedByUser, Subscription) {
  'use strict';

  /**
   * The DataSource model module.
   * @module model/DataSource
   * @version 2.0
   */

  /**
   * Constructs a new <code>DataSource</code>.
   * @alias module:model/DataSource
   * @class
   * @extends module:model/CatalogItem
   */
  var exports = function() {
    CatalogItem.call(this);
  };

  /**
   * Constructs a <code>DataSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DataSource} obj Optional instance to populate.
   * @return {module:model/DataSource} The populated <code>DataSource</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      CatalogItem.constructFromObject(data, obj);
      if (data.hasOwnProperty('IsEnabled'))
        obj.isEnabled = ApiClient.convertToType(data['IsEnabled'], 'Boolean');
      if (data.hasOwnProperty('ConnectionString'))
        obj.connectionString = ApiClient.convertToType(data['ConnectionString'], 'String');
      if (data.hasOwnProperty('DataSourceType'))
        obj.dataSourceType = ApiClient.convertToType(data['DataSourceType'], 'String');
      if (data.hasOwnProperty('IsOriginalConnectionStringExpressionBased'))
        obj.isOriginalConnectionStringExpressionBased = ApiClient.convertToType(data['IsOriginalConnectionStringExpressionBased'], 'Boolean');
      if (data.hasOwnProperty('IsConnectionStringOverridden'))
        obj.isConnectionStringOverridden = ApiClient.convertToType(data['IsConnectionStringOverridden'], 'Boolean');
      if (data.hasOwnProperty('CredentialsByUser'))
        obj.credentialsByUser = CredentialsSuppliedByUser.constructFromObject(data['CredentialsByUser']);
      if (data.hasOwnProperty('CredentialsInServer'))
        obj.credentialsInServer = CredentialsStoredInServer.constructFromObject(data['CredentialsInServer']);
      if (data.hasOwnProperty('IsReference'))
        obj.isReference = ApiClient.convertToType(data['IsReference'], 'Boolean');
      if (data.hasOwnProperty('Subscriptions'))
        obj.subscriptions = Subscription.constructFromObject(data['Subscriptions']);
    }
    return obj;
  }

  exports.prototype = Object.create(CatalogItem.prototype);
  exports.prototype.constructor = exports;
  /**
   * A Boolean value that specifies whether the DataSource is enabled for use.
   * @member {Boolean} isEnabled
   */
  exports.prototype.isEnabled = undefined;

  /**
   * A string value that can be passed to a data source in order to begin the process of establishing connection.
   * @member {String} connectionString
   */
  exports.prototype.connectionString = undefined;

  /**
   * DataSource extension such as 'SQL'.
   * @member {String} dataSourceType
   */
  exports.prototype.dataSourceType = undefined;

  /**
   * Indicates whether the original connection string for the data source was expression-based.
   * @member {Boolean} isOriginalConnectionStringExpressionBased
   */
  exports.prototype.isOriginalConnectionStringExpressionBased = undefined;

  /**
   * Specifies whether the original connection string is overridden.
   * @member {Boolean} isConnectionStringOverridden
   */
  exports.prototype.isConnectionStringOverridden = undefined;

  /**
   * @member {module:model/CredentialsSuppliedByUser} credentialsByUser
   */
  exports.prototype.credentialsByUser = undefined;

  /**
   * @member {module:model/CredentialsStoredInServer} credentialsInServer
   */
  exports.prototype.credentialsInServer = undefined;

  /**
   * Indicates whether this is a reference to a shared data source or an embedded data source.
   * @member {Boolean} isReference
   */
  exports.prototype.isReference = undefined;

  /**
   * @member {module:model/Subscription} subscriptions
   */
  exports.prototype.subscriptions = undefined;

  return exports;

}));
