/*
 * SQL Server 2017 Reporting Services REST API
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ReportParameterState', 'model/ReportParameterType', 'model/ReportParameterVisibility', 'model/ValidValue'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ReportParameterState'), require('./ReportParameterType'), require('./ReportParameterVisibility'), require('./ValidValue'));
  } else {
    // Browser globals (root is window)
    if (!root.SqlServer2017ReportingServicesRestApi) {
      root.SqlServer2017ReportingServicesRestApi = {};
    }
    root.SqlServer2017ReportingServicesRestApi.ReportParameterDefinition = factory(root.SqlServer2017ReportingServicesRestApi.ApiClient, root.SqlServer2017ReportingServicesRestApi.ReportParameterState, root.SqlServer2017ReportingServicesRestApi.ReportParameterType, root.SqlServer2017ReportingServicesRestApi.ReportParameterVisibility, root.SqlServer2017ReportingServicesRestApi.ValidValue);
  }
}(this, function(ApiClient, ReportParameterState, ReportParameterType, ReportParameterVisibility, ValidValue) {
  'use strict';

  /**
   * The ReportParameterDefinition model module.
   * @module model/ReportParameterDefinition
   * @version 2.0
   */

  /**
   * Constructs a new <code>ReportParameterDefinition</code>.
   * An object that specifies the metadata definition of a parameter for a report.
   * @alias module:model/ReportParameterDefinition
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ReportParameterDefinition</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ReportParameterDefinition} obj Optional instance to populate.
   * @return {module:model/ReportParameterDefinition} The populated <code>ReportParameterDefinition</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('AllowBlank'))
        obj.allowBlank = ApiClient.convertToType(data['AllowBlank'], 'Boolean');
      if (data.hasOwnProperty('DefaultValues'))
        obj.defaultValues = ApiClient.convertToType(data['DefaultValues'], ['String']);
      if (data.hasOwnProperty('DefaultValuesIsNull'))
        obj.defaultValuesIsNull = ApiClient.convertToType(data['DefaultValuesIsNull'], 'Boolean');
      if (data.hasOwnProperty('DefaultValuesQueryBased'))
        obj.defaultValuesQueryBased = ApiClient.convertToType(data['DefaultValuesQueryBased'], 'Boolean');
      if (data.hasOwnProperty('Dependencies'))
        obj.dependencies = ApiClient.convertToType(data['Dependencies'], ['String']);
      if (data.hasOwnProperty('ErrorMessage'))
        obj.errorMessage = ApiClient.convertToType(data['ErrorMessage'], 'String');
      if (data.hasOwnProperty('MultiValue'))
        obj.multiValue = ApiClient.convertToType(data['MultiValue'], 'Boolean');
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('Nullable'))
        obj.nullable = ApiClient.convertToType(data['Nullable'], 'Boolean');
      if (data.hasOwnProperty('ParameterState'))
        obj.parameterState = ReportParameterState.constructFromObject(data['ParameterState']);
      if (data.hasOwnProperty('ParameterType'))
        obj.parameterType = ReportParameterType.constructFromObject(data['ParameterType']);
      if (data.hasOwnProperty('ParameterVisibility'))
        obj.parameterVisibility = ReportParameterVisibility.constructFromObject(data['ParameterVisibility']);
      if (data.hasOwnProperty('Prompt'))
        obj.prompt = ApiClient.convertToType(data['Prompt'], 'String');
      if (data.hasOwnProperty('PromptUser'))
        obj.promptUser = ApiClient.convertToType(data['PromptUser'], 'Boolean');
      if (data.hasOwnProperty('QueryParameter'))
        obj.queryParameter = ApiClient.convertToType(data['QueryParameter'], 'Boolean');
      if (data.hasOwnProperty('ValidValues'))
        obj.validValues = ApiClient.convertToType(data['ValidValues'], [ValidValue]);
      if (data.hasOwnProperty('ValidValuesIsNull'))
        obj.validValuesIsNull = ApiClient.convertToType(data['ValidValuesIsNull'], 'Boolean');
      if (data.hasOwnProperty('ValidValuesQueryBased'))
        obj.validValuesQueryBased = ApiClient.convertToType(data['ValidValuesQueryBased'], 'Boolean');
    }
    return obj;
  }

  /**
   * A boolean value that indicates whether the ReportParamter is allowed to be blank.
   * @member {Boolean} allowBlank
   */
  exports.prototype.allowBlank = undefined;

  /**
   * An array of string values that specify the ReportParameter's default values. If the parameter is multi-valued then the array can have more than one entry.
   * @member {Array.<String>} defaultValues
   */
  exports.prototype.defaultValues = undefined;

  /**
   *  A boolean value that indicates whether the DefaultValues property is NULL.
   * @member {Boolean} defaultValuesIsNull
   */
  exports.prototype.defaultValuesIsNull = undefined;

  /**
   * A boolean value that indicates whether the ReportParamter's default values are obtained from a query (instead of being static specified values).
   * @member {Boolean} defaultValuesQueryBased
   */
  exports.prototype.defaultValuesQueryBased = undefined;

  /**
   * An array of string values that specify the dependencies for the ReportParameter.
   * @member {Array.<String>} dependencies
   */
  exports.prototype.dependencies = undefined;

  /**
   * Error returned when validating parameters.
   * @member {String} errorMessage
   */
  exports.prototype.errorMessage = undefined;

  /**
   * A boolean value that indicates whether the ReportParameter is multivalued.
   * @member {Boolean} multiValue
   */
  exports.prototype.multiValue = undefined;

  /**
   * A string value that specifies the name for the ReportParameter. This name will typically be displayed in the user interface.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * A boolean value that indicates whether the ReportParameter is allowed to be null.
   * @member {Boolean} nullable
   */
  exports.prototype.nullable = undefined;

  /**
   * @member {module:model/ReportParameterState} parameterState
   */
  exports.prototype.parameterState = undefined;

  /**
   * @member {module:model/ReportParameterType} parameterType
   */
  exports.prototype.parameterType = undefined;

  /**
   * @member {module:model/ReportParameterVisibility} parameterVisibility
   */
  exports.prototype.parameterVisibility = undefined;

  /**
   * A string value that specifies text used to prompt a user for the value of the ReportParameter.
   * @member {String} prompt
   */
  exports.prototype.prompt = undefined;

  /**
   * A boolean value that indicates whether the user should be prompted for the value for the ReportParameter.
   * @member {Boolean} promptUser
   */
  exports.prototype.promptUser = undefined;

  /**
   * A boolean value that indicates whether the ReportParamter is query based.
   * @member {Boolean} queryParameter
   */
  exports.prototype.queryParameter = undefined;

  /**
   * @member {Array.<module:model/ValidValue>} validValues
   */
  exports.prototype.validValues = undefined;

  /**
   * A boolean value that indicates whether the ValidValues property is NULL.
   * @member {Boolean} validValuesIsNull
   */
  exports.prototype.validValuesIsNull = undefined;

  /**
   * A boolean value that indicates whether the ReportParameter's valid values are obtained from a query (instead of being static specified values).
   * @member {Boolean} validValuesQueryBased
   */
  exports.prototype.validValuesQueryBased = undefined;

  return exports;

}));
