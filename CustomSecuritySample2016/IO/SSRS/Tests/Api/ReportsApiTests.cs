/* 
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.SSRS.Swagger.Client;
using IO.SSRS.Swagger.Api;
using IO.SSRS.Swagger.Model;

namespace IO.SSRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing ReportsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ReportsApiTests
    {
        private ReportsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReportsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReportsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ReportsApi
            //Assert.IsInstanceOfType(typeof(ReportsApi), instance, "instance is a ReportsApi");
        }

        
        /// <summary>
        /// Test AddReport
        /// </summary>
        [Test]
        public void AddReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Report report = null;
            //var response = instance.AddReport(report);
            //Assert.IsInstanceOf<Report> (response, "response is Report");
        }
        
        /// <summary>
        /// Test AddReportComment
        /// </summary>
        [Test]
        public void AddReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Comment comment = null;
            //instance.AddReportComment(id, comment);
            
        }
        
        /// <summary>
        /// Test AddReportHistorySnapshot
        /// </summary>
        [Test]
        public void AddReportHistorySnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AddReportHistorySnapshot(id);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test CheckReportDataSourceConnection
        /// </summary>
        [Test]
        public void CheckReportDataSourceConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataSourceName = null;
            //var response = instance.CheckReportDataSourceConnection(id, dataSourceName);
            //Assert.IsInstanceOf<DataSourceCheckResult> (response, "response is DataSourceCheckResult");
        }
        
        /// <summary>
        /// Test DeleteReport
        /// </summary>
        [Test]
        public void DeleteReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteReport(id);
            
        }
        
        /// <summary>
        /// Test DeleteReportComment
        /// </summary>
        [Test]
        public void DeleteReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //instance.DeleteReportComment(id, commentId);
            
        }
        
        /// <summary>
        /// Test DeleteReportHistorySnapshot
        /// </summary>
        [Test]
        public void DeleteReportHistorySnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string historyId = null;
            //var response = instance.DeleteReportHistorySnapshot(id, historyId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test GetReport
        /// </summary>
        [Test]
        public void GetReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReport(id);
            //Assert.IsInstanceOf<Report> (response, "response is Report");
        }
        
        /// <summary>
        /// Test GetReportAllowedActions
        /// </summary>
        [Test]
        public void GetReportAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetReportCacheOptions
        /// </summary>
        [Test]
        public void GetReportCacheOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportCacheOptions(id);
            //Assert.IsInstanceOf<CacheOptions> (response, "response is CacheOptions");
        }
        
        /// <summary>
        /// Test GetReportCacheRefreshPlans
        /// </summary>
        [Test]
        public void GetReportCacheRefreshPlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportCacheRefreshPlans(id);
            //Assert.IsInstanceOf<ODataCacheRefreshPlans> (response, "response is ODataCacheRefreshPlans");
        }
        
        /// <summary>
        /// Test GetReportComments
        /// </summary>
        [Test]
        public void GetReportCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportComments(id);
            //Assert.IsInstanceOf<ODataComments> (response, "response is ODataComments");
        }
        
        /// <summary>
        /// Test GetReportContent
        /// </summary>
        [Test]
        public void GetReportContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportContent(id);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetReportDataSources
        /// </summary>
        [Test]
        public void GetReportDataSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportDataSources(id);
            //Assert.IsInstanceOf<ODataDataSources> (response, "response is ODataDataSources");
        }
        
        /// <summary>
        /// Test GetReportDependentItems
        /// </summary>
        [Test]
        public void GetReportDependentItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportDependentItems(id);
            //Assert.IsInstanceOf<ODataDependentItems> (response, "response is ODataDependentItems");
        }
        
        /// <summary>
        /// Test GetReportHistorySnapshot
        /// </summary>
        [Test]
        public void GetReportHistorySnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string historyId = null;
            //var response = instance.GetReportHistorySnapshot(id, historyId);
            //Assert.IsInstanceOf<HistorySnapshot> (response, "response is HistorySnapshot");
        }
        
        /// <summary>
        /// Test GetReportHistorySnapshotOptions
        /// </summary>
        [Test]
        public void GetReportHistorySnapshotOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportHistorySnapshotOptions(id);
            //Assert.IsInstanceOf<HistorySnapshotOptions> (response, "response is HistorySnapshotOptions");
        }
        
        /// <summary>
        /// Test GetReportHistorySnapshots
        /// </summary>
        [Test]
        public void GetReportHistorySnapshotsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportHistorySnapshots(id);
            //Assert.IsInstanceOf<List<HistorySnapshot>> (response, "response is List<HistorySnapshot>");
        }
        
        /// <summary>
        /// Test GetReportParameterDefinitions
        /// </summary>
        [Test]
        public void GetReportParameterDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportParameterDefinitions(id);
            //Assert.IsInstanceOf<ODataReportParameterDefinitions> (response, "response is ODataReportParameterDefinitions");
        }
        
        /// <summary>
        /// Test GetReportPolicies
        /// </summary>
        [Test]
        public void GetReportPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetReportProperties
        /// </summary>
        [Test]
        public void GetReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetReportProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test GetReportSharedDataSets
        /// </summary>
        [Test]
        public void GetReportSharedDataSetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetReportSharedDataSets(id);
            //Assert.IsInstanceOf<List<DataSet>> (response, "response is List<DataSet>");
        }
        
        /// <summary>
        /// Test GetReportSubscriptions
        /// </summary>
        [Test]
        public void GetReportSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string expand = null;
            //string select = null;
            //var response = instance.GetReportSubscriptions(id, top, skip, filter, count, orderBy, expand, select);
            //Assert.IsInstanceOf<List<Subscription>> (response, "response is List<Subscription>");
        }
        
        /// <summary>
        /// Test GetReports
        /// </summary>
        [Test]
        public void GetReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetReports(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataReports> (response, "response is ODataReports");
        }
        
        /// <summary>
        /// Test SetReportCacheOptions
        /// </summary>
        [Test]
        public void SetReportCacheOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CacheOptions cacheOptions = null;
            //instance.SetReportCacheOptions(id, cacheOptions);
            
        }
        
        /// <summary>
        /// Test SetReportDataSource
        /// </summary>
        [Test]
        public void SetReportDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSource dataSource = null;
            //instance.SetReportDataSource(id, dataSource);
            
        }
        
        /// <summary>
        /// Test SetReportHistorySnapshotOptions
        /// </summary>
        [Test]
        public void SetReportHistorySnapshotOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //HistorySnapshotOptions historySnapshotOptions = null;
            //instance.SetReportHistorySnapshotOptions(id, historySnapshotOptions);
            
        }
        
        /// <summary>
        /// Test SetReportPolicies
        /// </summary>
        [Test]
        public void SetReportPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> itemPolicies = null;
            //instance.SetReportPolicies(id, itemPolicies);
            
        }
        
        /// <summary>
        /// Test SetReportSharedDataSets
        /// </summary>
        [Test]
        public void SetReportSharedDataSetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<DataSet> dataSets = null;
            //instance.SetReportSharedDataSets(id, dataSets);
            
        }
        
        /// <summary>
        /// Test UpdateCacheSnapshot
        /// </summary>
        [Test]
        public void UpdateCacheSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.UpdateCacheSnapshot(id);
            //Assert.IsInstanceOf<UpdateCacheSnapshotResult> (response, "response is UpdateCacheSnapshotResult");
        }
        
        /// <summary>
        /// Test UpdateReport
        /// </summary>
        [Test]
        public void UpdateReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Report report = null;
            //instance.UpdateReport(id, report);
            
        }
        
        /// <summary>
        /// Test UpdateReportComment
        /// </summary>
        [Test]
        public void UpdateReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //Comment comment = null;
            //instance.UpdateReportComment(id, commentId, comment);
            
        }
        
        /// <summary>
        /// Test UpdateReportParameterDefinitions
        /// </summary>
        [Test]
        public void UpdateReportParameterDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ReportParameterDefinitionPatch> parameterDefinitions = null;
            //instance.UpdateReportParameterDefinitions(id, parameterDefinitions);
            
        }
        
        /// <summary>
        /// Test UpdateReportProperties
        /// </summary>
        [Test]
        public void UpdateReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateReportProperties(id, properties);
            
        }
        
    }

}
