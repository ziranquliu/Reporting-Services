/* 
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.SSRS.Swagger.Client;
using IO.SSRS.Swagger.Api;
using IO.SSRS.Swagger.Model;

namespace IO.SSRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing SystemApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SystemApiTests
    {
        private SystemApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SystemApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SystemApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SystemApi
            //Assert.IsInstanceOfType(typeof(SystemApi), instance, "instance is a SystemApi");
        }

        
        /// <summary>
        /// Test GetSystemAllowedActions
        /// </summary>
        [Test]
        public void GetSystemAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSystemAllowedActions();
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetSystemInfo
        /// </summary>
        [Test]
        public void GetSystemInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSystemInfo();
            //Assert.IsInstanceOf<SystemInfo> (response, "response is SystemInfo");
        }
        
        /// <summary>
        /// Test GetSystemPolicies
        /// </summary>
        [Test]
        public void GetSystemPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSystemPolicies();
            //Assert.IsInstanceOf<List<Policy>> (response, "response is List<Policy>");
        }
        
        /// <summary>
        /// Test GetSystemProperties
        /// </summary>
        [Test]
        public void GetSystemPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> properties = null;
            //var response = instance.GetSystemProperties(properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test SetSystemPolicies
        /// </summary>
        [Test]
        public void SetSystemPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SystemPolicy systemPolicy = null;
            //instance.SetSystemPolicies(systemPolicy);
            
        }
        
        /// <summary>
        /// Test UpdateSystemProperties
        /// </summary>
        [Test]
        public void UpdateSystemPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Property> properties = null;
            //instance.UpdateSystemProperties(properties);
            
        }
        
    }

}
