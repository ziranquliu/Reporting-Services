/* 
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.SSRS.Swagger.Client;
using IO.SSRS.Swagger.Api;
using IO.SSRS.Swagger.Model;

namespace IO.SSRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing LinkedReportsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LinkedReportsApiTests
    {
        private LinkedReportsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LinkedReportsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LinkedReportsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LinkedReportsApi
            //Assert.IsInstanceOfType(typeof(LinkedReportsApi), instance, "instance is a LinkedReportsApi");
        }

        
        /// <summary>
        /// Test AddLinkedReport
        /// </summary>
        [Test]
        public void AddLinkedReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LinkedReport linkedReport = null;
            //var response = instance.AddLinkedReport(linkedReport);
            //Assert.IsInstanceOf<LinkedReport> (response, "response is LinkedReport");
        }
        
        /// <summary>
        /// Test AddLinkedReportComment
        /// </summary>
        [Test]
        public void AddLinkedReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Comment comment = null;
            //instance.AddLinkedReportComment(id, comment);
            
        }
        
        /// <summary>
        /// Test AddLinkedReportHistorySnapshot
        /// </summary>
        [Test]
        public void AddLinkedReportHistorySnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AddLinkedReportHistorySnapshot(id);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test DeleteLinkedReport
        /// </summary>
        [Test]
        public void DeleteLinkedReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteLinkedReport(id);
            
        }
        
        /// <summary>
        /// Test DeleteLinkedReportComment
        /// </summary>
        [Test]
        public void DeleteLinkedReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //instance.DeleteLinkedReportComment(id, commentId);
            
        }
        
        /// <summary>
        /// Test DeleteLinkedReportHistorySnapshot
        /// </summary>
        [Test]
        public void DeleteLinkedReportHistorySnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string historyId = null;
            //var response = instance.DeleteLinkedReportHistorySnapshot(id, historyId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test GetLinkedReport
        /// </summary>
        [Test]
        public void GetLinkedReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReport(id);
            //Assert.IsInstanceOf<LinkedReport> (response, "response is LinkedReport");
        }
        
        /// <summary>
        /// Test GetLinkedReportAllowedActions
        /// </summary>
        [Test]
        public void GetLinkedReportAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReportAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetLinkedReportCacheOptions
        /// </summary>
        [Test]
        public void GetLinkedReportCacheOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReportCacheOptions(id);
            //Assert.IsInstanceOf<CacheOptions> (response, "response is CacheOptions");
        }
        
        /// <summary>
        /// Test GetLinkedReportCacheRefreshPlans
        /// </summary>
        [Test]
        public void GetLinkedReportCacheRefreshPlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReportCacheRefreshPlans(id);
            //Assert.IsInstanceOf<ODataCacheRefreshPlans> (response, "response is ODataCacheRefreshPlans");
        }
        
        /// <summary>
        /// Test GetLinkedReportComments
        /// </summary>
        [Test]
        public void GetLinkedReportCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReportComments(id);
            //Assert.IsInstanceOf<ODataComments> (response, "response is ODataComments");
        }
        
        /// <summary>
        /// Test GetLinkedReportHistorySnapshot
        /// </summary>
        [Test]
        public void GetLinkedReportHistorySnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string historyId = null;
            //var response = instance.GetLinkedReportHistorySnapshot(id, historyId);
            //Assert.IsInstanceOf<HistorySnapshot> (response, "response is HistorySnapshot");
        }
        
        /// <summary>
        /// Test GetLinkedReportHistorySnapshotOptions
        /// </summary>
        [Test]
        public void GetLinkedReportHistorySnapshotOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReportHistorySnapshotOptions(id);
            //Assert.IsInstanceOf<HistorySnapshotOptions> (response, "response is HistorySnapshotOptions");
        }
        
        /// <summary>
        /// Test GetLinkedReportHistorySnapshots
        /// </summary>
        [Test]
        public void GetLinkedReportHistorySnapshotsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReportHistorySnapshots(id);
            //Assert.IsInstanceOf<List<HistorySnapshot>> (response, "response is List<HistorySnapshot>");
        }
        
        /// <summary>
        /// Test GetLinkedReportParameterDefinitions
        /// </summary>
        [Test]
        public void GetLinkedReportParameterDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReportParameterDefinitions(id);
            //Assert.IsInstanceOf<ODataReportParameterDefinitions> (response, "response is ODataReportParameterDefinitions");
        }
        
        /// <summary>
        /// Test GetLinkedReportPolicies
        /// </summary>
        [Test]
        public void GetLinkedReportPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetLinkedReportPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetLinkedReportProperties
        /// </summary>
        [Test]
        public void GetLinkedReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetLinkedReportProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test GetLinkedReports
        /// </summary>
        [Test]
        public void GetLinkedReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetLinkedReports(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataLinkedReports> (response, "response is ODataLinkedReports");
        }
        
        /// <summary>
        /// Test SetLinkedReportCacheOptions
        /// </summary>
        [Test]
        public void SetLinkedReportCacheOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CacheOptions cacheOptions = null;
            //instance.SetLinkedReportCacheOptions(id, cacheOptions);
            
        }
        
        /// <summary>
        /// Test SetLinkedReportHistorySnapshotOptions
        /// </summary>
        [Test]
        public void SetLinkedReportHistorySnapshotOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //HistorySnapshotOptions historySnapshotOptions = null;
            //instance.SetLinkedReportHistorySnapshotOptions(id, historySnapshotOptions);
            
        }
        
        /// <summary>
        /// Test SetLinkedReportPolicies
        /// </summary>
        [Test]
        public void SetLinkedReportPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> itemPolicy = null;
            //instance.SetLinkedReportPolicies(id, itemPolicy);
            
        }
        
        /// <summary>
        /// Test UpdateLinkedReport
        /// </summary>
        [Test]
        public void UpdateLinkedReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //LinkedReport linkedReport = null;
            //instance.UpdateLinkedReport(id, linkedReport);
            
        }
        
        /// <summary>
        /// Test UpdateLinkedReportComment
        /// </summary>
        [Test]
        public void UpdateLinkedReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //Comment comment = null;
            //instance.UpdateLinkedReportComment(id, commentId, comment);
            
        }
        
        /// <summary>
        /// Test UpdateLinkedReportParameterDefinitions
        /// </summary>
        [Test]
        public void UpdateLinkedReportParameterDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ReportParameterDefinitionPatch> parameterDefinitions = null;
            //instance.UpdateLinkedReportParameterDefinitions(id, parameterDefinitions);
            
        }
        
        /// <summary>
        /// Test UpdateLinkedReportProperties
        /// </summary>
        [Test]
        public void UpdateLinkedReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateLinkedReportProperties(id, properties);
            
        }
        
    }

}
