/* 
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.SSRS.Swagger.Client;
using IO.SSRS.Swagger.Api;
using IO.SSRS.Swagger.Model;

namespace IO.SSRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing FoldersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FoldersApiTests
    {
        private FoldersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FoldersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FoldersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FoldersApi
            //Assert.IsInstanceOfType(typeof(FoldersApi), instance, "instance is a FoldersApi");
        }

        
        /// <summary>
        /// Test AddFolder
        /// </summary>
        [Test]
        public void AddFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Folder body = null;
            //var response = instance.AddFolder(body);
            //Assert.IsInstanceOf<Folder> (response, "response is Folder");
        }
        
        /// <summary>
        /// Test DeleteFolder
        /// </summary>
        [Test]
        public void DeleteFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteFolder(id);
            
        }
        
        /// <summary>
        /// Test GetFolder
        /// </summary>
        [Test]
        public void GetFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetFolder(id);
            //Assert.IsInstanceOf<Folder> (response, "response is Folder");
        }
        
        /// <summary>
        /// Test GetFolderAllowedActions
        /// </summary>
        [Test]
        public void GetFolderAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetFolderAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetFolderCatalogItems
        /// </summary>
        [Test]
        public void GetFolderCatalogItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetFolderCatalogItems(id);
            //Assert.IsInstanceOf<ODataCatalogItems> (response, "response is ODataCatalogItems");
        }
        
        /// <summary>
        /// Test GetFolderPolicies
        /// </summary>
        [Test]
        public void GetFolderPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetFolderPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetFolderProperties
        /// </summary>
        [Test]
        public void GetFolderPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetFolderProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test GetFolders
        /// </summary>
        [Test]
        public void GetFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetFolders(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataFolders> (response, "response is ODataFolders");
        }
        
        /// <summary>
        /// Test SearchCatalogItemsInFolder
        /// </summary>
        [Test]
        public void SearchCatalogItemsInFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string searchText = null;
            //var response = instance.SearchCatalogItemsInFolder(id, searchText);
            //Assert.IsInstanceOf<ODataDependentItems> (response, "response is ODataDependentItems");
        }
        
        /// <summary>
        /// Test SetFolderPolicies
        /// </summary>
        [Test]
        public void SetFolderPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> itemPolicy = null;
            //instance.SetFolderPolicies(id, itemPolicy);
            
        }
        
        /// <summary>
        /// Test UpdateFolder
        /// </summary>
        [Test]
        public void UpdateFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Folder folder = null;
            //instance.UpdateFolder(id, folder);
            
        }
        
        /// <summary>
        /// Test UpdateFolderProperties
        /// </summary>
        [Test]
        public void UpdateFolderPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateFolderProperties(id, properties);
            
        }
        
    }

}
