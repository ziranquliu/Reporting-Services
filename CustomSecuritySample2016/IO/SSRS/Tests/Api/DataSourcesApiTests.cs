/* 
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.SSRS.Swagger.Client;
using IO.SSRS.Swagger.Api;
using IO.SSRS.Swagger.Model;

namespace IO.SSRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing DataSourcesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataSourcesApiTests
    {
        private DataSourcesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataSourcesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataSourcesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataSourcesApi
            //Assert.IsInstanceOfType(typeof(DataSourcesApi), instance, "instance is a DataSourcesApi");
        }

        
        /// <summary>
        /// Test AddDataSource
        /// </summary>
        [Test]
        public void AddDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataSource dataSource = null;
            //var response = instance.AddDataSource(dataSource);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test CheckExistingDataSourceConnection
        /// </summary>
        [Test]
        public void CheckExistingDataSourceConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CheckExistingDataSourceConnection(id);
            //Assert.IsInstanceOf<DataSourceCheckResult> (response, "response is DataSourceCheckResult");
        }
        
        /// <summary>
        /// Test CheckNewDataSourceConnection
        /// </summary>
        [Test]
        public void CheckNewDataSourceConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataSource dataSource = null;
            //var response = instance.CheckNewDataSourceConnection(dataSource);
            //Assert.IsInstanceOf<DataSourceCheckResult> (response, "response is DataSourceCheckResult");
        }
        
        /// <summary>
        /// Test DeleteDataSource
        /// </summary>
        [Test]
        public void DeleteDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteDataSource(id);
            
        }
        
        /// <summary>
        /// Test GetDataSource
        /// </summary>
        [Test]
        public void GetDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSource(id);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test GetDataSourceAllowedActions
        /// </summary>
        [Test]
        public void GetDataSourceAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSourceAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetDataSourceContent
        /// </summary>
        [Test]
        public void GetDataSourceContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSourceContent(id);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDataSourceDependentItems
        /// </summary>
        [Test]
        public void GetDataSourceDependentItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSourceDependentItems(id);
            //Assert.IsInstanceOf<ODataDependentItems> (response, "response is ODataDependentItems");
        }
        
        /// <summary>
        /// Test GetDataSourcePolicies
        /// </summary>
        [Test]
        public void GetDataSourcePoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSourcePolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetDataSourceQueryFields
        /// </summary>
        [Test]
        public void GetDataSourceQueryFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryFieldsRequest queryFieldsRequest = null;
            //var response = instance.GetDataSourceQueryFields(queryFieldsRequest);
            //Assert.IsInstanceOf<ODataQueryFields> (response, "response is ODataQueryFields");
        }
        
        /// <summary>
        /// Test GetDataSources
        /// </summary>
        [Test]
        public void GetDataSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetDataSources(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataDataSources> (response, "response is ODataDataSources");
        }
        
        /// <summary>
        /// Test GetDatasourceProperties
        /// </summary>
        [Test]
        public void GetDatasourcePropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetDatasourceProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test SetDataSourcePolicies
        /// </summary>
        [Test]
        public void SetDataSourcePoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> itemPolicy = null;
            //instance.SetDataSourcePolicies(id, itemPolicy);
            
        }
        
        /// <summary>
        /// Test UpdateDataSource
        /// </summary>
        [Test]
        public void UpdateDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSource dataSource = null;
            //instance.UpdateDataSource(id, dataSource);
            
        }
        
        /// <summary>
        /// Test UpdateDatasourceProperties
        /// </summary>
        [Test]
        public void UpdateDatasourcePropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateDatasourceProperties(id, properties);
            
        }
        
    }

}
