/* 
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.SSRS.Swagger.Client;
using IO.SSRS.Swagger.Api;
using IO.SSRS.Swagger.Model;

namespace IO.SSRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing KpisApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class KpisApiTests
    {
        private KpisApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new KpisApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of KpisApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' KpisApi
            //Assert.IsInstanceOfType(typeof(KpisApi), instance, "instance is a KpisApi");
        }

        
        /// <summary>
        /// Test AddKpi
        /// </summary>
        [Test]
        public void AddKpiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Kpi kpi = null;
            //var response = instance.AddKpi(kpi);
            //Assert.IsInstanceOf<Kpi> (response, "response is Kpi");
        }
        
        /// <summary>
        /// Test DeleteKpi
        /// </summary>
        [Test]
        public void DeleteKpiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteKpi(id);
            
        }
        
        /// <summary>
        /// Test GetKpi
        /// </summary>
        [Test]
        public void GetKpiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetKpi(id);
            //Assert.IsInstanceOf<Kpi> (response, "response is Kpi");
        }
        
        /// <summary>
        /// Test GetKpiAllowedActions
        /// </summary>
        [Test]
        public void GetKpiAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetKpiAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetKpiPolicies
        /// </summary>
        [Test]
        public void GetKpiPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetKpiPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetKpiProperties
        /// </summary>
        [Test]
        public void GetKpiPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetKpiProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test GetKpis
        /// </summary>
        [Test]
        public void GetKpisTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetKpis(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataKpis> (response, "response is ODataKpis");
        }
        
        /// <summary>
        /// Test SetKpiPolicies
        /// </summary>
        [Test]
        public void SetKpiPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> itemPolicies = null;
            //instance.SetKpiPolicies(id, itemPolicies);
            
        }
        
        /// <summary>
        /// Test UpdateKpi
        /// </summary>
        [Test]
        public void UpdateKpiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Kpi kpi = null;
            //instance.UpdateKpi(id, kpi);
            
        }
        
        /// <summary>
        /// Test UpdateKpiProperties
        /// </summary>
        [Test]
        public void UpdateKpiPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateKpiProperties(id, properties);
            
        }
        
    }

}
