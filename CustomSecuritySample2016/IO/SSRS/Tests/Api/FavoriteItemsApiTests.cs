/* 
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.SSRS.Swagger.Client;
using IO.SSRS.Swagger.Api;
using IO.SSRS.Swagger.Model;

namespace IO.SSRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing FavoriteItemsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FavoriteItemsApiTests
    {
        private FavoriteItemsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FavoriteItemsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FavoriteItemsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FavoriteItemsApi
            //Assert.IsInstanceOfType(typeof(FavoriteItemsApi), instance, "instance is a FavoriteItemsApi");
        }

        
        /// <summary>
        /// Test GetFavoriteItems
        /// </summary>
        [Test]
        public void GetFavoriteItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string expand = null;
            //string select = null;
            //var response = instance.GetFavoriteItems(top, skip, filter, count, orderBy, expand, select);
            //Assert.IsInstanceOf<List<FavoriteItem>> (response, "response is List<FavoriteItem>");
        }
        
        /// <summary>
        /// Test RemoveFavoriteItem
        /// </summary>
        [Test]
        public void RemoveFavoriteItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.RemoveFavoriteItem(id);
            
        }
        
        /// <summary>
        /// Test SetFavoriteItem
        /// </summary>
        [Test]
        public void SetFavoriteItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FavoriteItem favoriteItem = null;
            //var response = instance.SetFavoriteItem(favoriteItem);
            //Assert.IsInstanceOf<FavoriteItem> (response, "response is FavoriteItem");
        }
        
    }

}
