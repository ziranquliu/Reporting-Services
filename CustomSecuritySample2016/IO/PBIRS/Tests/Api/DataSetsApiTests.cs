/* 
 * Power BI Report Server REST API
 *
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.PBIRS.Swagger.Client;
using IO.PBIRS.Swagger.Api;
using IO.PBIRS.Swagger.Model;

namespace IO.PBIRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing DataSetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataSetsApiTests
    {
        private DataSetsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataSetsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataSetsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataSetsApi
            //Assert.IsInstanceOfType(typeof(DataSetsApi), instance, "instance is a DataSetsApi");
        }

        
        /// <summary>
        /// Test AddDataSet
        /// </summary>
        [Test]
        public void AddDataSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataSet dataSet = null;
            //var response = instance.AddDataSet(dataSet);
            //Assert.IsInstanceOf<DataSet> (response, "response is DataSet");
        }
        
        /// <summary>
        /// Test DeleteDataSet
        /// </summary>
        [Test]
        public void DeleteDataSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteDataSet(id);
            
        }
        
        /// <summary>
        /// Test GetDataSet
        /// </summary>
        [Test]
        public void GetDataSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSet(id);
            //Assert.IsInstanceOf<DataSet> (response, "response is DataSet");
        }
        
        /// <summary>
        /// Test GetDataSetAggregatedValue
        /// </summary>
        [Test]
        public void GetDataSetAggregatedValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string columnName = null;
            //string aggregation = null;
            //DataSetAggregateValueParameters parameters = null;
            //var response = instance.GetDataSetAggregatedValue(id, columnName, aggregation, parameters);
            //Assert.IsInstanceOf<List<double?>> (response, "response is List<double?>");
        }
        
        /// <summary>
        /// Test GetDataSetAllowedActions
        /// </summary>
        [Test]
        public void GetDataSetAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetDataSetCacheOptions
        /// </summary>
        [Test]
        public void GetDataSetCacheOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetCacheOptions(id);
            //Assert.IsInstanceOf<CacheOptions> (response, "response is CacheOptions");
        }
        
        /// <summary>
        /// Test GetDataSetCacheRefreshPlans
        /// </summary>
        [Test]
        public void GetDataSetCacheRefreshPlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetCacheRefreshPlans(id);
            //Assert.IsInstanceOf<ODataCacheRefreshPlans> (response, "response is ODataCacheRefreshPlans");
        }
        
        /// <summary>
        /// Test GetDataSetContent
        /// </summary>
        [Test]
        public void GetDataSetContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetContent(id);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDataSetData
        /// </summary>
        [Test]
        public void GetDataSetDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //decimal? maxRows = null;
            //DataSetDataParameters parameters = null;
            //var response = instance.GetDataSetData(id, maxRows, parameters);
            //Assert.IsInstanceOf<DataSetData> (response, "response is DataSetData");
        }
        
        /// <summary>
        /// Test GetDataSetDataSource
        /// </summary>
        [Test]
        public void GetDataSetDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataSourceId = null;
            //var response = instance.GetDataSetDataSource(id, dataSourceId);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test GetDataSetDataSources
        /// </summary>
        [Test]
        public void GetDataSetDataSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetDataSources(id);
            //Assert.IsInstanceOf<List<DataSource>> (response, "response is List<DataSource>");
        }
        
        /// <summary>
        /// Test GetDataSetDependentItems
        /// </summary>
        [Test]
        public void GetDataSetDependentItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetDependentItems(id);
            //Assert.IsInstanceOf<ODataDependentItems> (response, "response is ODataDependentItems");
        }
        
        /// <summary>
        /// Test GetDataSetODataFeed
        /// </summary>
        [Test]
        public void GetDataSetODataFeedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetODataFeed(id);
            //Assert.IsInstanceOf<ODataDataSetRows> (response, "response is ODataDataSetRows");
        }
        
        /// <summary>
        /// Test GetDataSetParameterDefinitions
        /// </summary>
        [Test]
        public void GetDataSetParameterDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetParameterDefinitions(id);
            //Assert.IsInstanceOf<ODataReportParameterDefinitions> (response, "response is ODataReportParameterDefinitions");
        }
        
        /// <summary>
        /// Test GetDataSetPolicies
        /// </summary>
        [Test]
        public void GetDataSetPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetDataSetSchema
        /// </summary>
        [Test]
        public void GetDataSetSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDataSetSchema(id);
            //Assert.IsInstanceOf<DataSetSchema> (response, "response is DataSetSchema");
        }
        
        /// <summary>
        /// Test GetDataSets
        /// </summary>
        [Test]
        public void GetDataSetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetDataSets(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataDataSets> (response, "response is ODataDataSets");
        }
        
        /// <summary>
        /// Test GetDatasetProperties
        /// </summary>
        [Test]
        public void GetDatasetPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetDatasetProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test SetDataSetCacheOptions
        /// </summary>
        [Test]
        public void SetDataSetCacheOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CacheOptions cacheOptions = null;
            //instance.SetDataSetCacheOptions(id, cacheOptions);
            
        }
        
        /// <summary>
        /// Test SetDataSetDataSource
        /// </summary>
        [Test]
        public void SetDataSetDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataSourceId = null;
            //DataSource dataSource = null;
            //instance.SetDataSetDataSource(id, dataSourceId, dataSource);
            
        }
        
        /// <summary>
        /// Test SetDataSetDataSources
        /// </summary>
        [Test]
        public void SetDataSetDataSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSource dataSource = null;
            //instance.SetDataSetDataSources(id, dataSource);
            
        }
        
        /// <summary>
        /// Test SetDataSetPolicies
        /// </summary>
        [Test]
        public void SetDataSetPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> itemPolicy = null;
            //instance.SetDataSetPolicies(id, itemPolicy);
            
        }
        
        /// <summary>
        /// Test UpdateDataSet
        /// </summary>
        [Test]
        public void UpdateDataSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSet dataSet = null;
            //instance.UpdateDataSet(id, dataSet);
            
        }
        
        /// <summary>
        /// Test UpdateDataSetParameterDefinitions
        /// </summary>
        [Test]
        public void UpdateDataSetParameterDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ReportParameterDefinitionPatch> parameterDefinitions = null;
            //instance.UpdateDataSetParameterDefinitions(id, parameterDefinitions);
            
        }
        
        /// <summary>
        /// Test UpdateDatasetProperties
        /// </summary>
        [Test]
        public void UpdateDatasetPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateDatasetProperties(id, properties);
            
        }
        
        /// <summary>
        /// Test UploadDataSet
        /// </summary>
        [Test]
        public void UploadDataSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //System.IO.Stream _file = null;
            //var response = instance.UploadDataSet(id, _file);
            //Assert.IsInstanceOf<DataSet> (response, "response is DataSet");
        }
        
    }

}
