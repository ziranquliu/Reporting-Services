/* 
 * Power BI Report Server REST API
 *
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.PBIRS.Swagger.Client;
using IO.PBIRS.Swagger.Api;
using IO.PBIRS.Swagger.Model;

namespace IO.PBIRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing MobileReportsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MobileReportsApiTests
    {
        private MobileReportsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MobileReportsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MobileReportsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MobileReportsApi
            //Assert.IsInstanceOfType(typeof(MobileReportsApi), instance, "instance is a MobileReportsApi");
        }

        
        /// <summary>
        /// Test AddMobileReport
        /// </summary>
        [Test]
        public void AddMobileReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MobileReport body = null;
            //var response = instance.AddMobileReport(body);
            //Assert.IsInstanceOf<MobileReport> (response, "response is MobileReport");
        }
        
        /// <summary>
        /// Test AddMobileReportComment
        /// </summary>
        [Test]
        public void AddMobileReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Comment comment = null;
            //instance.AddMobileReportComment(id, comment);
            
        }
        
        /// <summary>
        /// Test DeleteMobileReport
        /// </summary>
        [Test]
        public void DeleteMobileReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteMobileReport(id);
            
        }
        
        /// <summary>
        /// Test DeleteMobileReportComment
        /// </summary>
        [Test]
        public void DeleteMobileReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //instance.DeleteMobileReportComment(id, commentId);
            
        }
        
        /// <summary>
        /// Test GetMobileReport
        /// </summary>
        [Test]
        public void GetMobileReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetMobileReport(id);
            //Assert.IsInstanceOf<MobileReport> (response, "response is MobileReport");
        }
        
        /// <summary>
        /// Test GetMobileReportAllowedActions
        /// </summary>
        [Test]
        public void GetMobileReportAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetMobileReportAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetMobileReportComments
        /// </summary>
        [Test]
        public void GetMobileReportCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetMobileReportComments(id);
            //Assert.IsInstanceOf<ODataComments> (response, "response is ODataComments");
        }
        
        /// <summary>
        /// Test GetMobileReportContent
        /// </summary>
        [Test]
        public void GetMobileReportContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetMobileReportContent(id);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetMobileReportPolicies
        /// </summary>
        [Test]
        public void GetMobileReportPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetMobileReportPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetMobileReportProperties
        /// </summary>
        [Test]
        public void GetMobileReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetMobileReportProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test GetMobileReports
        /// </summary>
        [Test]
        public void GetMobileReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //var response = instance.GetMobileReports(top, skip, filter, count);
            //Assert.IsInstanceOf<ODataMobileReport> (response, "response is ODataMobileReport");
        }
        
        /// <summary>
        /// Test SetMobileReportPolicies
        /// </summary>
        [Test]
        public void SetMobileReportPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> mobileReports = null;
            //instance.SetMobileReportPolicies(id, mobileReports);
            
        }
        
        /// <summary>
        /// Test UpdateMobileReport
        /// </summary>
        [Test]
        public void UpdateMobileReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MobileReport body = null;
            //var response = instance.UpdateMobileReport(id, body);
            //Assert.IsInstanceOf<MobileReport> (response, "response is MobileReport");
        }
        
        /// <summary>
        /// Test UpdateMobileReportComment
        /// </summary>
        [Test]
        public void UpdateMobileReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //Comment comment = null;
            //instance.UpdateMobileReportComment(id, commentId, comment);
            
        }
        
        /// <summary>
        /// Test UpdateMobileReportProperties
        /// </summary>
        [Test]
        public void UpdateMobileReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateMobileReportProperties(id, properties);
            
        }
        
        /// <summary>
        /// Test UploadMobileReport
        /// </summary>
        [Test]
        public void UploadMobileReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //System.IO.Stream _file = null;
            //var response = instance.UploadMobileReport(id, _file);
            //Assert.IsInstanceOf<MobileReport> (response, "response is MobileReport");
        }
        
    }

}
