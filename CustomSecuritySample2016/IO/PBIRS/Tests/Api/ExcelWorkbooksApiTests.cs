/* 
 * Power BI Report Server REST API
 *
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.PBIRS.Swagger.Client;
using IO.PBIRS.Swagger.Api;
using IO.PBIRS.Swagger.Model;

namespace IO.PBIRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing ExcelWorkbooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ExcelWorkbooksApiTests
    {
        private ExcelWorkbooksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExcelWorkbooksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExcelWorkbooksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ExcelWorkbooksApi
            //Assert.IsInstanceOfType(typeof(ExcelWorkbooksApi), instance, "instance is a ExcelWorkbooksApi");
        }

        
        /// <summary>
        /// Test AddExcelWorkbook
        /// </summary>
        [Test]
        public void AddExcelWorkbookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExcelWorkbook excelWorkbook = null;
            //var response = instance.AddExcelWorkbook(excelWorkbook);
            //Assert.IsInstanceOf<ExcelWorkbook> (response, "response is ExcelWorkbook");
        }
        
        /// <summary>
        /// Test AddExcelWorkbookComment
        /// </summary>
        [Test]
        public void AddExcelWorkbookCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Comment comment = null;
            //instance.AddExcelWorkbookComment(id, comment);
            
        }
        
        /// <summary>
        /// Test DeleteExcelWorkbook
        /// </summary>
        [Test]
        public void DeleteExcelWorkbookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteExcelWorkbook(id);
            
        }
        
        /// <summary>
        /// Test DeleteExcelWorkbookComment
        /// </summary>
        [Test]
        public void DeleteExcelWorkbookCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //instance.DeleteExcelWorkbookComment(id, commentId);
            
        }
        
        /// <summary>
        /// Test GetExcelWorkbook
        /// </summary>
        [Test]
        public void GetExcelWorkbookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetExcelWorkbook(id);
            //Assert.IsInstanceOf<ExcelWorkbook> (response, "response is ExcelWorkbook");
        }
        
        /// <summary>
        /// Test GetExcelWorkbookAllowedActions
        /// </summary>
        [Test]
        public void GetExcelWorkbookAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetExcelWorkbookAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetExcelWorkbookComments
        /// </summary>
        [Test]
        public void GetExcelWorkbookCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetExcelWorkbookComments(id);
            //Assert.IsInstanceOf<ODataComments> (response, "response is ODataComments");
        }
        
        /// <summary>
        /// Test GetExcelWorkbookContent
        /// </summary>
        [Test]
        public void GetExcelWorkbookContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetExcelWorkbookContent(id);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetExcelWorkbookPolicies
        /// </summary>
        [Test]
        public void GetExcelWorkbookPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetExcelWorkbookPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetExcelWorkbookProperties
        /// </summary>
        [Test]
        public void GetExcelWorkbookPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetExcelWorkbookProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test GetExcelWorkbooks
        /// </summary>
        [Test]
        public void GetExcelWorkbooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetExcelWorkbooks(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataExcelWorkbooks> (response, "response is ODataExcelWorkbooks");
        }
        
        /// <summary>
        /// Test SetExcelWorkbookPolicies
        /// </summary>
        [Test]
        public void SetExcelWorkbookPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> itemPolicy = null;
            //instance.SetExcelWorkbookPolicies(id, itemPolicy);
            
        }
        
        /// <summary>
        /// Test UpdateExcelWorkbook
        /// </summary>
        [Test]
        public void UpdateExcelWorkbookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ExcelWorkbook excelWorkbook = null;
            //instance.UpdateExcelWorkbook(id, excelWorkbook);
            
        }
        
        /// <summary>
        /// Test UpdateExcelWorkbookComment
        /// </summary>
        [Test]
        public void UpdateExcelWorkbookCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //Comment comment = null;
            //instance.UpdateExcelWorkbookComment(id, commentId, comment);
            
        }
        
        /// <summary>
        /// Test UpdateExcelWorkbookProperties
        /// </summary>
        [Test]
        public void UpdateExcelWorkbookPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateExcelWorkbookProperties(id, properties);
            
        }
        
        /// <summary>
        /// Test UploadExcelWorkbook
        /// </summary>
        [Test]
        public void UploadExcelWorkbookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //System.IO.Stream _file = null;
            //var response = instance.UploadExcelWorkbook(id, _file);
            //Assert.IsInstanceOf<ExcelWorkbook> (response, "response is ExcelWorkbook");
        }
        
    }

}
