/* 
 * Power BI Report Server REST API
 *
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.PBIRS.Swagger.Client;
using IO.PBIRS.Swagger.Api;
using IO.PBIRS.Swagger.Model;

namespace IO.PBIRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing SubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubscriptionsApiTests
    {
        private SubscriptionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubscriptionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubscriptionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubscriptionsApi
            //Assert.IsInstanceOfType(typeof(SubscriptionsApi), instance, "instance is a SubscriptionsApi");
        }

        
        /// <summary>
        /// Test AddSubscription
        /// </summary>
        [Test]
        public void AddSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Subscription subscription = null;
            //var response = instance.AddSubscription(subscription);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test DeleteSubscription
        /// </summary>
        [Test]
        public void DeleteSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteSubscription(id);
            
        }
        
        /// <summary>
        /// Test DisableSubscription
        /// </summary>
        [Test]
        public void DisableSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DisableSubscription(id);
            
        }
        
        /// <summary>
        /// Test EnableSubscription
        /// </summary>
        [Test]
        public void EnableSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.EnableSubscription(id);
            
        }
        
        /// <summary>
        /// Test ExecuteSubscription
        /// </summary>
        [Test]
        public void ExecuteSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ExecuteSubscription(id);
            
        }
        
        /// <summary>
        /// Test GetSubscription
        /// </summary>
        [Test]
        public void GetSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSubscription(id);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test GetSubscriptions
        /// </summary>
        [Test]
        public void GetSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string expand = null;
            //string select = null;
            //var response = instance.GetSubscriptions(top, skip, filter, count, orderBy, expand, select);
            //Assert.IsInstanceOf<List<Subscription>> (response, "response is List<Subscription>");
        }
        
        /// <summary>
        /// Test SetSubscription
        /// </summary>
        [Test]
        public void SetSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Subscription subscription = null;
            //instance.SetSubscription(id, subscription);
            
        }
        
        /// <summary>
        /// Test UpdateSubscription
        /// </summary>
        [Test]
        public void UpdateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Subscription subscription = null;
            //instance.UpdateSubscription(id, subscription);
            
        }
        
    }

}
