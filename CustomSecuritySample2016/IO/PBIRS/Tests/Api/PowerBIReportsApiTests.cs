/* 
 * Power BI Report Server REST API
 *
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.PBIRS.Swagger.Client;
using IO.PBIRS.Swagger.Api;
using IO.PBIRS.Swagger.Model;

namespace IO.PBIRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing PowerBIReportsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PowerBIReportsApiTests
    {
        private PowerBIReportsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PowerBIReportsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PowerBIReportsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PowerBIReportsApi
            //Assert.IsInstanceOfType(typeof(PowerBIReportsApi), instance, "instance is a PowerBIReportsApi");
        }

        
        /// <summary>
        /// Test AddPowerBIReport
        /// </summary>
        [Test]
        public void AddPowerBIReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PowerBIReport powerBIReport = null;
            //var response = instance.AddPowerBIReport(powerBIReport);
            //Assert.IsInstanceOf<PowerBIReport> (response, "response is PowerBIReport");
        }
        
        /// <summary>
        /// Test AddPowerBIReportComment
        /// </summary>
        [Test]
        public void AddPowerBIReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Comment comment = null;
            //instance.AddPowerBIReportComment(id, comment);
            
        }
        
        /// <summary>
        /// Test CheckPowerBIReportDataSourceConnection
        /// </summary>
        [Test]
        public void CheckPowerBIReportDataSourceConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataSourceName = null;
            //var response = instance.CheckPowerBIReportDataSourceConnection(id, dataSourceName);
            //Assert.IsInstanceOf<DataSourceCheckResult> (response, "response is DataSourceCheckResult");
        }
        
        /// <summary>
        /// Test DeletePowerBIReport
        /// </summary>
        [Test]
        public void DeletePowerBIReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeletePowerBIReport(id);
            
        }
        
        /// <summary>
        /// Test DeletePowerBIReportComment
        /// </summary>
        [Test]
        public void DeletePowerBIReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //instance.DeletePowerBIReportComment(id, commentId);
            
        }
        
        /// <summary>
        /// Test GetPowerBICacheRefreshPlans
        /// </summary>
        [Test]
        public void GetPowerBICacheRefreshPlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBICacheRefreshPlans(id);
            //Assert.IsInstanceOf<ODataCacheRefreshPlans> (response, "response is ODataCacheRefreshPlans");
        }
        
        /// <summary>
        /// Test GetPowerBIReport
        /// </summary>
        [Test]
        public void GetPowerBIReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBIReport(id);
            //Assert.IsInstanceOf<PowerBIReport> (response, "response is PowerBIReport");
        }
        
        /// <summary>
        /// Test GetPowerBIReportAllowedActions
        /// </summary>
        [Test]
        public void GetPowerBIReportAllowedActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBIReportAllowedActions(id);
            //Assert.IsInstanceOf<ODataAllowedActions> (response, "response is ODataAllowedActions");
        }
        
        /// <summary>
        /// Test GetPowerBIReportComments
        /// </summary>
        [Test]
        public void GetPowerBIReportCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBIReportComments(id);
            //Assert.IsInstanceOf<ODataComments> (response, "response is ODataComments");
        }
        
        /// <summary>
        /// Test GetPowerBIReportContent
        /// </summary>
        [Test]
        public void GetPowerBIReportContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBIReportContent(id);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetPowerBIReportDataModelRoleAssignments
        /// </summary>
        [Test]
        public void GetPowerBIReportDataModelRoleAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBIReportDataModelRoleAssignments(id);
            //Assert.IsInstanceOf<ODataDataModelRoleAssignments> (response, "response is ODataDataModelRoleAssignments");
        }
        
        /// <summary>
        /// Test GetPowerBIReportDataModelRoles
        /// </summary>
        [Test]
        public void GetPowerBIReportDataModelRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBIReportDataModelRoles(id);
            //Assert.IsInstanceOf<ODataDataModelRoles> (response, "response is ODataDataModelRoles");
        }
        
        /// <summary>
        /// Test GetPowerBIReportDataSources
        /// </summary>
        [Test]
        public void GetPowerBIReportDataSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBIReportDataSources(id);
            //Assert.IsInstanceOf<ODataDataSources> (response, "response is ODataDataSources");
        }
        
        /// <summary>
        /// Test GetPowerBIReportPolicies
        /// </summary>
        [Test]
        public void GetPowerBIReportPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetPowerBIReportPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetPowerBIReportProperties
        /// </summary>
        [Test]
        public void GetPowerBIReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetPowerBIReportProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test GetPowerBIReports
        /// </summary>
        [Test]
        public void GetPowerBIReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetPowerBIReports(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataPowerBIReports> (response, "response is ODataPowerBIReports");
        }
        
        /// <summary>
        /// Test ReplacePowerBIReportDataModelRoleAssignments
        /// </summary>
        [Test]
        public void ReplacePowerBIReportDataModelRoleAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<DataModelRoleAssignment> dataModelRoleAssignments = null;
            //instance.ReplacePowerBIReportDataModelRoleAssignments(id, dataModelRoleAssignments);
            
        }
        
        /// <summary>
        /// Test SetPowerBIReportPolicies
        /// </summary>
        [Test]
        public void SetPowerBIReportPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> itemPolicies = null;
            //instance.SetPowerBIReportPolicies(id, itemPolicies);
            
        }
        
        /// <summary>
        /// Test UpdatePowerBIReport
        /// </summary>
        [Test]
        public void UpdatePowerBIReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PowerBIReport powerBIReport = null;
            //var response = instance.UpdatePowerBIReport(id, powerBIReport);
            //Assert.IsInstanceOf<PowerBIReport> (response, "response is PowerBIReport");
        }
        
        /// <summary>
        /// Test UpdatePowerBIReportComment
        /// </summary>
        [Test]
        public void UpdatePowerBIReportCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string commentId = null;
            //Comment comment = null;
            //instance.UpdatePowerBIReportComment(id, commentId, comment);
            
        }
        
        /// <summary>
        /// Test UpdatePowerBIReportDataSource
        /// </summary>
        [Test]
        public void UpdatePowerBIReportDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<DataSource> dataSources = null;
            //instance.UpdatePowerBIReportDataSource(id, dataSources);
            
        }
        
        /// <summary>
        /// Test UpdatePowerBIReportProperties
        /// </summary>
        [Test]
        public void UpdatePowerBIReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdatePowerBIReportProperties(id, properties);
            
        }
        
        /// <summary>
        /// Test UploadPowerBIReport
        /// </summary>
        [Test]
        public void UploadPowerBIReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //System.IO.Stream _file = null;
            //var response = instance.UploadPowerBIReport(id, _file);
            //Assert.IsInstanceOf<PowerBIReport> (response, "response is PowerBIReport");
        }
        
    }

}
