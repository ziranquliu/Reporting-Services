/* 
 * Power BI Report Server REST API
 *
 * The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.PBIRS.Swagger.Client;
using IO.PBIRS.Swagger.Api;
using IO.PBIRS.Swagger.Model;

namespace IO.PBIRS.Swagger.Test
{
    /// <summary>
    ///  Class for testing CatalogItemsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CatalogItemsApiTests
    {
        private CatalogItemsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CatalogItemsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CatalogItemsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CatalogItemsApi
            //Assert.IsInstanceOfType(typeof(CatalogItemsApi), instance, "instance is a CatalogItemsApi");
        }

        
        /// <summary>
        /// Test AddCatalogItem
        /// </summary>
        [Test]
        public void AddCatalogItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CatalogItem catalogItem = null;
            //var response = instance.AddCatalogItem(catalogItem);
            //Assert.IsInstanceOf<CatalogItem> (response, "response is CatalogItem");
        }
        
        /// <summary>
        /// Test DeleteCatalogItem
        /// </summary>
        [Test]
        public void DeleteCatalogItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteCatalogItem(id);
            
        }
        
        /// <summary>
        /// Test DeleteCatalogItems
        /// </summary>
        [Test]
        public void DeleteCatalogItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteItemsRequest deleteItemsRequest = null;
            //var response = instance.DeleteCatalogItems(deleteItemsRequest);
            //Assert.IsInstanceOf<BulkOperationsResult> (response, "response is BulkOperationsResult");
        }
        
        /// <summary>
        /// Test GetCatalogItem
        /// </summary>
        [Test]
        public void GetCatalogItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCatalogItem(id);
            //Assert.IsInstanceOf<CatalogItem> (response, "response is CatalogItem");
        }
        
        /// <summary>
        /// Test GetCatalogItemContent
        /// </summary>
        [Test]
        public void GetCatalogItemContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCatalogItemContent(id);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetCatalogItemPolicies
        /// </summary>
        [Test]
        public void GetCatalogItemPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCatalogItemPolicies(id);
            //Assert.IsInstanceOf<List<ItemPolicy>> (response, "response is List<ItemPolicy>");
        }
        
        /// <summary>
        /// Test GetCatalogItemProperties
        /// </summary>
        [Test]
        public void GetCatalogItemPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> properties = null;
            //var response = instance.GetCatalogItemProperties(id, properties);
            //Assert.IsInstanceOf<ODataProperties> (response, "response is ODataProperties");
        }
        
        /// <summary>
        /// Test GetCatalogItemRoles
        /// </summary>
        [Test]
        public void GetCatalogItemRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCatalogItemRoles(id);
            //Assert.IsInstanceOf<ODataProperties1> (response, "response is ODataProperties1");
        }
        
        /// <summary>
        /// Test GetCatalogItems
        /// </summary>
        [Test]
        public void GetCatalogItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string filter = null;
            //string count = null;
            //string orderBy = null;
            //string select = null;
            //var response = instance.GetCatalogItems(top, skip, filter, count, orderBy, select);
            //Assert.IsInstanceOf<ODataCatalogItems> (response, "response is ODataCatalogItems");
        }
        
        /// <summary>
        /// Test MoveCatalogItems
        /// </summary>
        [Test]
        public void MoveCatalogItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MoveItemsRequest moveItemsRequest = null;
            //var response = instance.MoveCatalogItems(moveItemsRequest);
            //Assert.IsInstanceOf<BulkOperationsResult> (response, "response is BulkOperationsResult");
        }
        
        /// <summary>
        /// Test SetCatalogItemPolicies
        /// </summary>
        [Test]
        public void SetCatalogItemPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<ItemPolicy> catalogItem = null;
            //instance.SetCatalogItemPolicies(id, catalogItem);
            
        }
        
        /// <summary>
        /// Test UpdateCatalogItem
        /// </summary>
        [Test]
        public void UpdateCatalogItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CatalogItem catalogItem = null;
            //instance.UpdateCatalogItem(id, catalogItem);
            
        }
        
        /// <summary>
        /// Test UpdateCatalogItemProperties
        /// </summary>
        [Test]
        public void UpdateCatalogItemPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<Property> properties = null;
            //instance.UpdateCatalogItemProperties(id, properties);
            
        }
        
    }

}
